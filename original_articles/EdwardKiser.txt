This is my home page. Welcome!

My last name rhymes with ''wiser.'' Click my name to see some of the pages where I've written, or been written about.

Currently I work for a software company in Jacksonville, Florida, writing database and data-entry tools in C# 4.0 and dot-Net 4.0. I am one of maybe seven or eight programmers at this company. I have also done a small amount of ASP.NET development for the company. The company maintains a gigantic e-catalog and contacts database, and has a data department of about fifteen people who use the tools I write (and other tools which I did not write) to maintain the data.

Previously I have written CeePlusPlus code (and a little Java) for telephony applications, doing everything from database stuff to DigitalSignalProcessing.

For hobby programming, I wrote a sample-rate converter, available at http://sr-convert.sourceforge.net/. It hasn't been maintained for a while. (I wrote a new version of it using the .NET Async CTP, and it supports multi-channel WAV files as well as 24-bit and 32-bit floating-point WAV files, but I have not released it yet. I had to uninstall the Async CTP to make room for SP1, which fixes some bugs related to the TextTemplateTransformationToolkit. I look forward to the refresh of the Async CTP, or C# 5, whichever comes first.)

I have also written a 64-bit ForthLanguage implementation, using Gambit scheme and 32-bit assembly language, but I have not released it because it seems useless... which is to say, I cannot use it to build anything. One of the good things about it though was ForthAssistedHandAssembly. I have recently come up with an idea for how to "fix" the Forth implementation, but it has been so long since I wrote it that all my programming tools have changed, so I will probably have to rewrite the whole thing.

I have also written a "nearly" r4rs SchemeLanguage interpreter in C#. The interpreter supports CallWithCurrentContinuation and its continuations have unlimited extent. It supports dynamic-wind and PartialContinuations, but those features make the implementation terribly complicated. It uses pre-treatment to speed up execution. I wrote an arbitrary-precision integer and rational number library for it (only to have the integers rendered obsolete by the new System.Numerics.BigInteger class). The interpreter uses reflection to populate its initial environment, and that makes it highly extensible; however, it is not presently capable of interoperating with dot-Net directly. (It's now published, at http://swscheme.codeplex.com/)

I am interested in 3-D graphics, and I used to enjoy editing Classic Doom levels. Doom is quite old, now, and I still haven't written that level editor I wanted to write... on the other hand I can run the DoomEditingUtility in DosBox. Of course now if I write my own editor I can easily add an embedded Scheme interpreter.

I am interested in lexical analysis, parsing, and ReflectionEmit. (I'm also interested in JIT compilers, and I have seen LowLevelVirtualMachine (LLVM) used for that purpose, and I think it's awesome, but I haven't used LLVM.)

I am also interested in functional languages like FsharpLanguage. I regard ObjectiveCaml and HaskellLanguage as important also.

I first discovered this Wiki in 1999 or so. I wrote a bunch of stuff about Scheme (and later Forth) which is still here, some signed and some not.

I also write fantasy-horror stories and compose music with Reason. These are hobbies at this point.
----
CategoryHomePage
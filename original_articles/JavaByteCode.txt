The ByteCode format used by the JavaLanguage. Sun tries to sell it as a general-purpose bytecode format. This has had some success: there are now several other languages that compile to JavaByteCode resulting in OtherLanguagesForTheJavaVm.

----
''Arguably the Internet needs an efficient, secure, portable, bytecode. The timing was just right to exploit web browsers and anti-Microsoft feeling. The big shame about the bytecode is that it was only aimed at Java in the beginning. Now it has crowded out other more general VirtualMachine''''''s.''

''WhoSaidThis''?

(LanguagePissingMatch makes it look like DaveHarris said this)

----
I'm currently exploring the OO PythonLanguage which does all the things that TCL or Perl do but allows you to produce much more readable code. And if the
JavaByteCode does become the network LinguaFranca of the next century I know I can
always use JPython (JavaPython) to run my objects on whatever systems exist in the future. -- MichaelDillon

Agreed. This is partly due to ingenuity of compiler vendors when faced with an unsympathetic machine. I didn't mean to imply that other languages couldn't be done for it, just that they have to work harder and perhaps be less efficient than they ought. -- DaveHarris
----

Where are (major) signs that 'Sun tries to sell it as a general-purpose bytecode format'? 

In JDK 1.4, the debugging architecture was extended for other languages that are compiled to Java sources (to translate the source line numbers). See 
*** http://java.sun.com/j2se/1.4/docs/guide/jpda/enhancements.html#debugotherlanguages (BrokenLink) try
*** http://jcp.org/en/jsr/detail?id=45


-- DanielBonniot

Java Decompiler: 
*** http://download.cnet.com/DJ-Java-Decompiler/3000-2213_4-10046809.html 
*** http://java-source.net/open-source/bytecode-libraries
----
See JavaVirtualMachine,
JavaAssemblerCode
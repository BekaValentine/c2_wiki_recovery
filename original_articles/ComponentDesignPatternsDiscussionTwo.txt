[ComponentDesignPatterns | ComponentDesignPatternsStories] 

This page was created because ComponentDesignPatternsDiscussion is too big.  The intent of these discussion pages it to allow folks to discuss issues related to the ComponentDesignPatterns.

----

A meme born from re-reading the ComponentBus pattern allowed me to establish the following taxonomy:
	* Where do you get them?
		* Component reuse patterns
		* Component development patterns
		* Component acquisition patterns
	* Where do you put them?
		* Foreign space patterns
		* Domestic space patterns
		* Component deployment patterns
	* And how do they interconnect?
		* Creational connection patterns
		* Structural connection patterns
		* Behavioral connection patterns

What do folks think about this?  For example, ComponentBus helps you in the component interconnection creational and structural ways.

--PhilipEskelin

Can you explain what "creational", "structural" and "behavioural" mean in the context of component connection patterns? --NatPryce.

"Creational" connection patterns are design patterns that can help you do connections between components better.  For example, when many smaller components running on a desktop in the same process or virtual machine access the same component on a remote server, ConnectionSingleton helps you manage connection resources better by allowing all components to share a single created resource.

ConnectionFlyweight and ConnectionObserver are some patterns that are more structural and behavioral with respect to connections between components.  Recently in ConnectionPatterns, comments were made regarding additional connection patterns, so there are probably more that can be helpful in the component-based context.

And with slightly higher-level patterns like ThirdPartyBinding, I see that ConnectionSingleton and ConnectionObserver would be useful in the resulting context in terms of the way each component manages its discovery, joining, and participation in the bus.  

Since connections and interactions are a big part of component-based efforts, I'm sure this area deserves more attention.

PhilipEskelin
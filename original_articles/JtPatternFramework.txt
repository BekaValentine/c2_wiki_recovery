Jt Pattern Oriented Framework



Introduction

This project describes a Pattern Oriented Framework for the rapid implementation
of Java applications. This integrated framework is based on a messaging architecture
which provides strong encapsulation and loose coupling; framework components can be
interchangeably plugged into complex framework applications using a “Lego" approach.
This framework provides capabilities for the implementation of applications
based on design patterns. The framework itself is conceived, from the ground up,
based on design patterns. Jt is probably one of the first Pattern Oriented Frameworks
(open source). The home page for this projects is http://jt.dev.java.net


Goals


The framework addresses the following goals:


A) The pattern oriented framework implements and/or facilitates the implementation of
well-known design patterns like Gang Of Four design patterns (GoF) and J2EE Design patterns. The framework itself  is conceived and implemented based on design patterns (from the ground up). The framework also facilitates and accelerates the implementation of applications based on design patterns.

B) The framework architecture is based on a messaging design pattern: framework objects
are able to interchange information and perform computations by sending, receiving and
processing messages. A messaging API provides strong encapsulation and loose coupling;
framework components can be interchangeably plugged into complex framework applications using a “lego/messaging” architecture. The framework takes full advantage of the power and simplicity of the messaging design pattern/API.

C) The framework lego/messaging architecture provides transparent access to remote components: remote framework objects are treated as local objects. Design patterns implemented by the framework (adapters, remote proxies and facades) make this possible by hiding the complexities associated with remote APIs.

D) The framework provides transparent integration with other technologies via framework
adapters, proxies and the implementation of related design patterns. These technologies include BPM,  Data Access Object implementations (DAO), Model View Controller implementations (MVC), EJBs, AJAX, JMS, XML and Web Services. 

E) The framework is designed to be lightweight and fast (low overhead/small footprint).

F) The framework messaging/lego architecture should improve and simplify design/development efforts. There should be a tight correspondence between UML design diagrams and the framework messaging based  applications and components needed for the implementation. The framework should provide wizards and automated capabilities for generating framework applications. Framework components should be easily added to BPM process diagrams. In future versions of the framework, it should
be possible for application modules to be generated directly from the UML design diagrams.
This goal is still work in progress. There is an early version of the Jt Wizard. 

G) The framework  messaging architecture facilitates testing and debugging efforts.
It provides capabilities for testing components as independent units by
sending messages to the component and verifying the expected reply messages.
 
H) In order to provide additional productivity, the framework has been integrated
with open source IDEs.

Features

· Implemented J2EE design patterns include J2EE business delegate, J2EE Session Facade, J2EE Service Locator and J2EE Value Object.

· Web Services integration via the implementation of Web Services adapters and proxies. The messaging architecture greatly simplifies the development of web services.

·         Integration with business process modeling (BPM). A jBPM adapter is provided within the Jt framework. jBPM is an open source implementation of  the BPM technology. Framework applications can be modeled using a process graph. This provides users with a very powerful way of modeling business processes. 

·         Integration with Ajax and the Struts implementation of MVC (Model View Controller). Universal framework components and adapters provide a transparent interface between the framework and these technologies. The business logic (controller piece) can be implemented using framework components and/or BPM business processes.

·         Integration with the Hibernate implementation of Data Access Objects (DAO). A Jt adapter provides a transparent interface between the Jt framework and Hibernate DAOs.

·         JDBC integration via a JDBC adapter.

·         The Command pattern implementation supports a request log, a queuing mechanism and undoable operations.


·         Integration with J2EE Enterprise Java Beans (EJB) via the implementation of design patterns like adapters, proxies, facades, etc. EJB clients are able to gain transparent access to remote framework objects. No need to deal with the complexities associated with remote APIs. An implementation of the J2EE Service Locator pattern is also provided. 

·         Easy customization of framework applications. This is done via resource files: object attributes can be automatically loaded from a resource file.

·         Java Server Pages (JSP) integration.

·         Integration with the XML APIs via XML helpers and built-in bean/XML mapping capabilities.

·         Integration with the Java Message Service (JMS). Framework messages can be sent and received via JMS adapters.

·         Built-in logging/debugging capabilities. Messages between framework objects are automatically logged. This simplifies the debugging and testing tasks.

·         Built-in  testing capabilities.

·         Efficient and lightweight in terms of memory utilization.

·         The framework can be easily extended by implementing additional framework adapters and helpers.

·         The Jt Framework provides a consistent way of handling and logging application errors and exceptions.


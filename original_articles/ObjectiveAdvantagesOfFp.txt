FunctionalProgramming is often asserted as superior to other methodoliges, especially procedural programming. FP partisans specifically claim that it is mathematically rigorous, being close to the basic lambda calculus model of computation, that the avoidance of mutable state simplifies analysis of the program, that the use of garbage collection mitigates or even eliminates many types of memory bugs, that features such as higher-order functionals and list comprehensions provide greater expressive power than conventional iteration methods, and that they make for more productive use of coding effort in general. Detractors counter that they are inherently less efficient than procedural programs, that they scale poorly for large programs, and that the greater expressiveness in some problem domains comes at the expense of greater complexity in other problem domains.

This page is set up so that FP partisans can assert any ''objective'' and preferably quantitative reasons why FP is superior, either in a specific problem domain or in general, as well as for any counterarguments by FP detractors.

''I guess this would bring in the figures of productivity increase.  But how on earth can you find really objective data from programming paradigms, which are after all frameworks of thought?''
I get the strange sense that programmers who yearn to write the next great ScriptingLanguage all have the same wicked little thoughts:

* I understand how the computer works better than all the rest - my CeeLanguage code is king and can never be SegFault''''''ed.
* My combination of language elements and style will beat all others - I have the lock on language design.
* My VirtualMachine that runs My ByteCode will be the fastest - mine will be the last C program ever written!

I know these thoughts all too well! I have thunken them! Evil pride, I banish thee!! :P

So, will there only be a handful of native code programmers someday that hold the keys to the car? Will the JVMs, and the SQLs, and the CLRs, and the MicroKernel''''''s of the world be the only CeeLanguage programs left?

''Contrary to popular belief, C is not the only language with native-code compilers.''

The question is, when will CLRs and MicroKernel''''''s be written in anything else?

''They already have been. Just as one example: the Scheme48 runtime environment is written in a dialect of Scheme. On non-standard hardware (Lisp machines), Lisp was used down to the metal; I think this should be possible on standard hardware too, although I don't have an example.''

Let's rephrase - when will such be written and become ubiquitous the way C/C++ (CeeCeePlusPlus) has, both commercially and as OpenSource? Symbolics machines in museums don't really count except as nostalgia or if you believe LispMachinesAreComingBack.

----
See also FutureOfProgrammingLanguages
----
CategoryCee
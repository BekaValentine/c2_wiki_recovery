"Interface Definition Language" refers to any of several ProgrammingLanguage-independent syntaxes (MS-IDL, OMG-IDL, etc.) for describing object interfaces in component or RemoteProcedureCall systems.

The interfaces have attributes and operation signatures. Each interface specified in the IDL specifies the operation signatures through which requests are made.

An IDL is only a definition language; mappings to ProgrammingLanguage''''''s are provided for invocation and manipulation.  Some IDLs support interface inheritance.

-----
CORBA (CommonObjectRequestBrokerArchitecture) OMG-IDL:
	* http://www.cs.umbc.edu/~thurston/corbidl.htm
Microsoft COM (ComponentObjectModel) MS-IDL:
	* http://www.microsoft.com/msj/defaultframe.asp?page=/msj/0898/idl/idl.htm&nav=/msj/0898/newnav.htm
RemoteProcedureCall''''''s (RPCs) in OpenSoftwareFoundation's DistributedComputingEnvironment (DCE):
	* SUPPORT IN DCE RPC IDL -- http://www.opengroup.org/tech/rfc/rfc48.3.html
	* ''(introduction)'' http://www.linuxjournal.com/article.php?sid=2204
RPC IDL:
	* ISO/IEC 14750:1999 Information technology -- Open Distributed Processing -- Interface Definition Language -- http://www.iso.org/iso/en/CatalogueDetailPage.CatalogueDetail?CSNUMBER=25486
	* ISO/IEC JTC1 SC32 -- http://www.iso.ch/meme/JTC1SC32.html

CapIDL (an ObjectCapabilityModel IDL used by ErosOs, CoyotOs and EeLanguage):
	* http://www.capidl.org/ (that site has succumbed to domain squatter use http://coyotos.org/docs/build/capidl.html instead)

----
See also DesignInIdl
----
CategoryInterface CategoryDistributed CategoryCorba
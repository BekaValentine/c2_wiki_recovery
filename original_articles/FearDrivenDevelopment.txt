I see a couple of possibilities here:
* Characterizes a software development process that attempts to forestall mistakes during coding by moving at a snail's pace, producing, double-checking, and re-triple-checking lots of paper artifacts, before producing any actual working software.  In essence, being so afraid of making mistakes that you end up not producing anything at all.
* Characterizes a software development process that attempts to wring productivity out of its participants by instilling in them fear of losing their jobs.  Often part of HeroCulture.

----
I have seen the second of these at work.  Often accompanied by exhortations to "keep on crankin'", we came to call this style CrankDrivenDevelopment.

----
Some of what you are thinking about may also be found at WorryDrivenDevelopment (HaHaOnlySerious). Cheers, --JasonNocks

----
FearDrivenDevelopment (FDD) could also be when you have an amount of LegacyCode and maintaining the code is hard because you don't know what unintended effects your changes have. When there is high coupling, changing method A suddenly made method B stop working and maybe that wasn't discovered until the code was deployed. A few live defects/bugs like that and you're suddenly practising FDD.
An n x n matrix, times its MatrixInverse, equals the IdentityMatrix.
 '''B'''  *  '''B'''^(-1) = '''I'''
The IdentityMatrix is an n x n matrix with 1's along the main diagonal, and 0's everywhere else.  When an n x n matrix '''A''' is multiplied by an n x n identity matrix '''I''', the answer is '''A'''. (Just like when a scalar ''a'' is multiplied by 1, the answer is ''a''.)

Some square matrices do not have inverses.

The MatrixInverse = the AdjointMatrix divided by the MatrixDeterminant. Both the AdjointMatrix and the MatrixDeterminant are calculated recursively. For 2 x 2 matrices, these are easy to calculate. As the matrices get larger, these calculations become very tedious very quickly.

----

For a 2 x 2 matrix:
          [ b11  b12 ]
      '''B''' = [          ]
          [ b21  b22 ]
The adjoint matrix is:
          [ b22 -b12 ]
 adj('''B''') = [          ]
          [-b21  b11 ]
The determinant is:
 det('''B''') = b11 * b22  -  b12 * b21
----

So, for the example on the MatrixFactoring page, we get:
          [ 0.795     8.805 ]   
      '''B''' = [                 ] 
          [ 0.205    -7.805 ]

          [-7.805    -8.805 ]
 adj('''B''') = [                 ]
          [-0.205    0.795  ]

 det('''B''') = (0.795)*(-7.805) - (0.205)*(8.805)
        = -8.01

          [ 0.9744   1.09925]
 '''B'''^(-1) = [                 ]
          [ 0.0256  -0.09925]

 [ 0.795  8.805 ]   [ 0.9744  1.09925]     [ 1  0 ]
 [              ] * [                ]  =  [      ]
 [ 0.205 -7.805 ]   [ 0.0256 -0.09925]     [ 0  1 ]
----
The general case of finding a MatrixInverse can be solved by augmenting an IdentityMatrix and using GaussianElimination
----
CategoryMath
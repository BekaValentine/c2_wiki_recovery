Someone has some wonderful new idea that sounds p-assed for some small value of p. But they keep pushing it, and other people get enthused about it, or maybe the idea just has a glimmer of truth amid the glitter.

So we learn the idea, embrace it actively, try to "get it" the way the fanatic gets it. We allow it to sweep over us, we try to love the idea. Finally, we really grok it in fullness. We make it our own.

We return to normalcy, but with a new bunch of tricks in our bag of tricks.

Example areas where one should consider EmbracingException:

Learn LISP the way LISPers do it. Learn Smalltalk like a Smalltalker, C like a hacker, Forth, ML, Dylan, Oberon, ...

Learn how to do CMM as the SEI would have you do it. Learn how to do XP the way those crazy [obscenity elided] would have you do it.

Learn to deal with people the way DaleCarnegie would have you do it.

Really get into these things, let them wash over you. It won't hurt. Remember the LitanyAgainstFear. You will remain. You will remain you.

----

Now, turning this on the head, the LISPers should equally be capable of EmbracingException. That is, people who don't use LISP. If the advocates of the p-assed idea aren't capable of listening to other ideas either, then they have failed. Furthermore, ''learning'' about how others conduct their business is one thing, but that doesn't imply that you have to swallow their whole egg. You can learn what they did, extract some useful information, then apply that to your context.

----

This page is referred to (indirectly through TakingException) the PrincipleOfDispassionateMethodology. The implication on that page was that the XP advocates seem incapable of listening to other people, their problems, and the solutions they have to their RealWorld situations. Therefore, I guess the point of this page is that XP people should try to listen more. Is that correct? ''Oh, I missed the reference about those "crazy [obscenity elided]" XP folk. That's too bad. It's impossible not to listen to XP on this site. See SixDegreesOfExtremeProgramming. ;)'' -- SunirShah

----

Well, I don't think it was a mistake that the title of the first XP book was ExtremeProgrammingExplainedEmbraceChange. The primary intent of the title might be to suggest that embracing change in your product is the only way to adopt to the pressures of software developing, but the initial impression of a reader browsing through the bookshelf would be "Change your process and embrace XP." Similarly, you think EmbracingException is something we should do ''to'' XP. 

But the material on this site defies that logic. It's apparent that XP can't change itself. Why advocate using IndexCard''''''s as part of your methodology when they are so trivial to the whole thing? Why advocate UnitTest''''''ing alone when UnitTest''''''ing just makes no sense in many cases, like distributed computing or graphics? It made sense in ''your'' case with C3 (the only case you had before you wrote the books), but XP can't adapt. It's locked down in its own rhetoric.

XP should embrace change. XP should embrace exceptions to the standard implementation and adapt. If XP ''itself'' isn't adaptive, it clearly can't teach me about how to adapt. You're driving the XP car off the road.

In fact, I propose not even using XP, but stealing its methods and experiences to build a much more comprehensive non-methodology methodology. A PatternLanguage of methods that allow each individual to adapt to their own situation. Think of this as being the SelfLanguage methodology to XP's SmallTalk. The more adaptive, more powerful version. 

Another big advantage is that you can't buy the non-methodology. You can't consult for it. You can only read it, solve your ''own'' problems. No more selfish motives from methodologists. No more snake oil. See ya, Rational. Thanks for playing. -- SunirShah
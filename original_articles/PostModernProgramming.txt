Lots of software is already written and can solve your problems, if you can only get it to do what you need. Postmodern programming is about using code that already exists, and not writing much code yourself. This is usually in the form of gluing together or configuring other people's code. This is the reality of "enterprise" software today. Postmodern programmers recognise this fact and work with it rather than pretend that it isn't the case and come up with, for example, a programming language or paradigm that would solve all programming problems once and for all if only everybody does everything properly - that way - the one true way. There is no OneTrueWay.

See also:
* http://www.postmodernprogramming.org
* NotesOnPostmodernProgramming
* PostModernistProgrammingLanguage (PerlLanguage and other GlueLanguages)
* XpAndPostModernism
* PostModernism
* EnterpriseApplication

----
Some early principles discovered at a PoMo programming workshop at OopslaOhFive (http://nat.truemesh.com/archives/000555.html):
* '''Examples''' over '''Documentation'''
* '''Source Code''' over '''Binary Components'''
* '''Loosely Structured Data''' over '''Highly Structured Data'''
* '''Dynamic Typing''' over '''Static Typing'''
* '''Focused Components''' over '''Frameworks'''
* '''Compose Components''' over '''Modify Existing Applications'''
* '''Rich Component Library''' over '''Programming Tools'''
* '''Actual Capabilities''' over '''Intended Use'''
* '''Simplify the Problem''' over '''Functional Areas'''
----
VernorVinge is sympathetic with this view, conceiving of "software archeologists" who scour ancient codebases for algorithmic treasure.
----
CategorySoftwareDevelopment
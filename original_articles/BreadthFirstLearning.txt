My learning style could best be described as "BreadthFirst."  I like to learn just a tad about a wide variety of subjects.  I know just enough to be dangerous about machine code, processor design, networking, formal specification languages, management, finance, etc., even though my job involves object-oriented programming and process coaching.

When I need to know more about something, then I dig into it and learn what I need to know.  Breadth first, depth as needed.  This usually goes quickly because I can take advantages of similarities with other things I know about, and I can understand how the new ideas fit into a larger context.

I find that having a large breadth of knowledge allows me to debug very effectively, and I learn new technologies quickly as well.

On the negative side, it takes a lot of real-world experience to truly understand the nuances of a subject.  Because I learn breadth-first, I'm often working with subjects that I've recently learned.  I don't truly understand all the little details.  And, the more technologies I learn, the more impatient I become.  I find myself doing less and less indepth reading, and instead just "winging it" with new technologies.  That makes the problem of not truly understanding new technologies worse.  I'm also starting to get bored... I never get to work with any of the really cool technology.

Overall, though, I've found BreadthFirst learning to be a great way to approach my career.  What do other people do?  Anybody out there use DepthFirstLearning?

--JustaProgrammer

----

I don't use DepthFirstLearning, but rather AstarLearning, meaning, that I have a learning goal in mind all the time (since I can remember) and try to learn everything, that contributes to this goal (minimizes the distance to the goal). 

The goal is motivated by a curiosity how things work or could be made to work (at an abstract scale, including social problems). The distance to this goal is measured by the usefulness of the knowledge to achieve this.

Interestingly I have found, that learning this way all the pieces of information quickly form a coherent picture and fit together. Though I have to admit, that this might be my subjective impression and I hope that this beautiful picture is not an artifact of my mind.

As to the personal usefulness of this approach, I think, that it provides me with a clear profile as well as an in-depth expertise in my field.

-- GunnarZarncke

''Do you not worry that you will find a local minimum and mistake it for the global one? (cf. simulated annealing)  It sounds like you have ("this beautiful picture") [I think I meant have worried, not have mistaken!]. In my case, I suspect I chase the goal that appears to be necessary or relevant at the time. See also RandomWalk. -- MatthewAstley''

No. My impression is, that the universal knowledge space is rather flat. But what I do worry about, is, whether I will ever come near to my goal and whether this goal is really worth it.

Lately I discovered, that the space around my optimum seems to be really flat. Meaning, that I now have the problem, that determining the direction of further research gets difficult. On the other hand, this might mean, that my personal world model (locally centered around my learning-goal) may be rather consistent now. I might try a RandomWalk to break out of this - possibly - local maximum. (Maybe related to QualityPlateau)

----

I use DepthFirstLearning when there is a specific skill I need to acquire or detailed technical knowledge I need to master.  I grab all the texts and specs I can find, then lock myself in a room until I've absorbed it all.

One nice thing about depth-first is that I can usually, at some point, declare that I am "done" learning it.  That's not really true, but I know I've read all that I care to on the subject.  On the other hand, with breadth-first learning, I always feel like I haven't learned enough.

I find that depth-first vs. breadth-first is related to the level at which one is thinking.  If I am designing or working on high-level architecture or design, then breadth-first is the way to go.  If I am focusing on one very low-level task, then I go depth-first.

----
See also ImmersiveLearning, DepthFirst, BreadthFirst, AstarSearch, TooMuchToRead

CategoryEducation
Let's be honest, there really are SlackPatterns. Sometimes the best thing to do is very little. Slack is the general form of DoTheSimplestThingThatCouldPossiblyWork. 

Slack and laziness are different. Laziness implies not doing the necessary work (or doing it badly) while slack implies doing whatever would save the most effort.

''Some might point out that slacking/slacker is laziness, while slack (in a rope) is "necessary looseness". Both are correct, but '''slack''' (singular) is "enlightened laziness".''

Some examples:
* LarryWall's infamous LazinessImpatienceHubris example
* AutomationIsOurFriend
* OnceAndOnlyOnce
* DoTheSimplestThingThatCouldPossiblyWork
* BeginWhenReady
* Waiting for something else to mature before working, saving redundant or needless work
----
'''An example of where laziness and slack differ'''

Imagine a project where work (1x) would save work (2x) later. However, (a different) work (2x) would save work (4x) later. The lazy programmer would do work (1x). The slack programmer would, in order to exert minimal effort, would choose work (2x), to save twice as much energy later. Overall, a slack-principled programmer is even "lazier" than a lazy programmer. The difference is that the slack-principled programmer is less concerned with immediate gain, and more concerned with overall gain.
----
See PragmaticProgrammer, LazyProgrammer, WizardsAreLazy, LazyBastard
----
Contributors: LayneThomas
'''A quick way to estimate exponential growth: If ''n'' dollars are invested at ''r'' percent for ''y'' years and if ''r'' * ''y'' = 72, then ''n'' roughly doubles.'''

----
The following excerpted from http://www.programmingpearls.com/sec071.html

Assume that you invest a sum of money for y years at an interest rate of r percent per year. The financial version of the rule says that if r times y = 72, then your money will roughly double. The approximation is quite accurate: investing $1000 at 6 percent interest for 12 years gives $2,012, and $1000 at 8 percent for 9 years gives $1,999. 

The Rule of 72 is handy for estimating the growth of any exponential process. If a bacterial colony in a dish grows at the rate of three percent per hour, then it doubles in size every day. And doubling brings programmers back to familiar rules of thumb: because 2^10=1024, ten doublings is about a thousand, twenty doublings is about a million, and thirty doublings is about a billion. 

Suppose that an exponential program takes ten seconds to solve a problem of size n=40, and that increasing n by one increases the run time by 12 percent (we probably learned this by plotting its growth on a logarithmic scale). The Rule of 72 tells us that the run time doubles when n increases by 6, or goes up by a factor of about 1000 when n increases by 60. When n=100, the program should therefore take about 10,000 seconds, or a few hours. But what happens when n increases to 160, and the time rises to 10e7 seconds? How much time is that? 

You might find it hard to memorize that there are 3.155x10^7 (3.155e7) seconds in a year. On the other hand, it is hard to forget Tom Duff's handy rule of thumb that, to within half a percent, 

	 :	'''PiSeconds is a nanocentury.''' 

Because the exponential program takes 10^7 (1e7) seconds, we should be prepared to wait about four months.
----
See also: RuleOfThumb
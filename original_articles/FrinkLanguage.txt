Frink is a calculating tool and programming language designed by Alan Eliasen. It incorporates features similar to PerlLanguage, RubyLanguage, JavaLanguage, SmalltalkLanguage, and various BasicLanguage implementations. Its primary focus is on the fields of science, engineering, physics, text processing, and education.

The language is named in honor of the brilliant (but fictional) Professor John Frink, who predicted, decades ago,

	 :	"I predict that within 100 years, computers will be twice as powerful, ten thousand times larger, and so expensive that only the five richest kings of Europe will own them."

One of the distinguishing characteristics of Frink is that it tracks units of measure through all calculations. This allows all values to contain a quantity and its units of measure. Frink understands how different units of measure interrelate, such as a length cubed is a volume, or power multiplied by time is energy. Different units of measure can be mixed in calculations, and Frink automatically ensures that the calculations lead to a result with the expected dimensions.

 height = 3 feet
 gravitation = 9.80665 m/s^2
 mass = 60 kg
 potential_energy = height * gravitation * mass
 println[potential_energy -> joules]  // Display in joules
The standard distribution comes with a data file which contains thousands of the most common units of measure, along with common data such as masses of elementary particles, planetary data, and historical measures. The standard data file uses the SI base units as its fundamental units of measure.

The syntax of Frink tries to follow standard mathematical notation when unambiguous. For example, the statement above could be rewritten using implicit multiplication between the three units:

 height gravitation mass
Frink is not exactly a dynamically typed nor a statically typed language. By default, any value may be placed into any variable. However, for more safety, arbitrary constraints may be placed on any variable, ensuring that only values meeting the constraints can be assigned to the variable. For example, one can constrain a variable to only contain values that have dimensions of power:

 var p is power = 10 watts
Any number of arbitrary constraints may be placed on a variable, including constraints described by user-defined functions. For example, a variable or function argument could be constrained to only contain PrimeNumber''''''s greater than 100.

Frink has arbitrary-size integers, arbitrary-size rational numbers, arbitrary-precision floating-point numbers, and ComplexNumbers.

Date/Time values are integrated with the units of measure. Date/time literals are surrounded by the pound sign # and can be parsed in a wide variety of formats. A date/time represents a particular moment in time, and can be converted to different timezones, Julian day, Modified Julian day, Dynamical Time, and other systems of time. An interval (that is, a value with dimensions of time) can be added to or subtracted from a date/time to obtain a new date time. In addition, a date/time value may be subtracted from another date/time value to obtain the interval between the dates.

The following program demonstrates date handling. It calculates the date/time that a computer's clock will fail if times are represented as a signed 32-bit two's complement integer, indicating the seconds from the Unix epoch.

 #1970-01-01 00:00 UTC# + (2^31-1) seconds -> UTC
 AD 2038-01-19 03:14:07.000 AM (Tue) Coordinated Universal Time
Frink uses Unicode characters throughout, allowing it to represent most of the world's languages.

Frink has RegularExpression''''''s for text processing which are very similar to those in PerlLanguage or RubyLanguage.

Other built-in datatypes include arrays, dictionaries, enumerating expressions, and AnonymousFunction''''''s. Frink also allows writing of object-oriented programs, although inheritance is not yet implemented.

Frink can call JavaLanguage methods and automatically convert its internal types to and from Java types, allowing use of external Java libraries.

Frink Server Pages uses Frink as a language for creating dynamic web-based resources, similar to PhpLanguage or ActiveServerPages.

It is implemented in Java and will run on a JavaVirtualMachine version 1.1 and later. This includes PersonalJava 1.1 implementations that include implementations of the optional java.math libraries.

Frink is free to use, but is ''not'' open-source.

See http://futureboy.us/frinkdocs/
----
CategoryProgrammingLanguage
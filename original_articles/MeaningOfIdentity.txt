The following is an exercise in InformationTheory and NetworkSecurity.

Consider a network of computers where each node can communicate either one-to-one (narrowcast) or one-to-all (broadcast). 

One-to-one messages can be done in any protocol two machines can define between each other.

All broadcast messages have only these fields: Subject, IP of originator, version, and message body. To broadcast, instead of making multiple connections to every node in the network, a node posts the message into a file in a weak versioning system on the central network, Weak == it has only one undo level; just enough to avoid race conditions and to back out from a network disaster. So, instead of just sending the content the poster wishes to add/change, the entire file is replaced every time.

In general, the information transmitted is supposed to be independent of the point of origin. That is, the identity of the machine that sent a given message is mutually exclusive to the content of the message. 

However, the originator may decide to put its machine name on any message they send as part of the message content. However, as you note from above, the IP is available. This isn't because the sender posted it but because the central network computer knows which computer is talking to it. However, note that some machines are behind a proxy so many machines may appear to have the same IP.

The reason a poster wishes to place its machine name is to distinguish its postings from other machines (an end of record tag) and to provide a context for its postings. For instance, if the machine was a news ticker such as Reuters, clearly it's important to provide your name for the purposes of validation and accreditation. As to the latter, note that there is a concept of ownership of information outside the network.

Also, note that the network of computers is also busily verifying the output of the other computers. If an error is detected, the machine may elect to use a blackboard technique (post all possible choices until a consensus can be made) or to just modify the extant data in place. These changes can be signed or unsigned as well.

So, since after many changes, a machine's IP disappears from the versioning system, and since the broadcast system doesn't provide for an authentication to prove identity, what does it mean to have an identity in this network?

This question is different than the one of ContentOfIdentity. Here, the question is, why is it important for machines to have an identity and why would you program them to use it in some places and not others? Where should they use their identity?

Related also is the notion of IdentitySubversion.

----

Here's a list of possible meanings: (some, all, or definitions not on the list may apply in any given situation)

	*The distinct name of an object aka ObjectIdentity
	*The distinctness of an individual.
	*The role an object or person plays in a network of relations
	*difference '''Identity is what is not identical'''
	*an UnwrittenRule or set thereof by which individuals structure their relationships and divide resources and remember histories (reputations).

Hmm? Any IdentityPatterns coming to mind yet? --LarryPrice

''Larry, you bring an interesting point. How does personal identity compare to computer identity?''

I don't know that I see those as being necessarily separate issues, identity exists in context. Someone's identity on Wiki is not necessarily their identity in the classroom, or the workplace, just as a model can have several views. Isn't it rather interesting though that identity in either case has a lot to do with persistence? --LarryPrice
----

See also ContentOfIdentity, IdentitySubversion, CommunityLifeCycle, DramaticIdentity, AddressedAndSignedMessage, IdentityIsntWhatItSeemsToBe (where Identities in the general sense are surrounding the MessageBody)


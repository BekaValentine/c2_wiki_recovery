People solve problems in different ways in software.  Patterns have attempted to distill the most common practices that can be deciphered from the '''source'''.  Pattern solutions are perhaps a ''mode'', as is ''XP'' programming and other combinations of design/code/test.  My experience has been that certain modes of solution discovery cloud my ability to understand the true posibilities that another solution might provide.  Embedded software development is often concerned with instruction timing, interrupt processing latency and available memory space, including instruction memory (in a separte I&D processor such as the PIC microcontrollers).  If none of these things could be measured, but you had guarenteed entries for timer based dispatchers (this is akin to interrupt latency), a threading model that produced no measureable overhead in the execution of any particular thread, I would suggest that you would use a different mode of discovery for solving a particular class of problems in a microcontroller environment.

GreggWonderly
See SevenPillarsOfCred and KnowHowToGrow.

A ControlledRapidEvolutionaryDelivery framework would now be called in Wiki lingo a SpikeSolution for early feedback on NonFunctionalRequirements or other very early working version of the system, based on the EndToEndPrinciple. Once the first version of the framework is in place it is continually refactored and evolved in response to feedback from very small step deliveries to real customers. 

Although these evolutionary aspects worked very well, as they had for other languages, I would definitely criticize some of the CRED framework emphasis nowadays, especially trying to establish "nearly fixed" Java interfaces early in the framework to allow separate development of 'frames' or Java packages. From further experience, I'd say leave such overhead as late as you can, partly because of interlocking difficulties with the Java type system, naming scope, exceptions and programming environment(s) that don't yet get their heads round these things.

In CRED we were trying for something more general than XP, for example scalable up to larger teams, based on some interesting early experiences applying EvolutionaryDelivery to bigger projects. This was one reason we took up the "framework" and "interface" themes. But frankly we didn't prove these aspects of our ideas in large projects. I'm happier with the emphasis and focus of XP in these areas and indeed with small teams wherever possible. -- RichardDrake
----

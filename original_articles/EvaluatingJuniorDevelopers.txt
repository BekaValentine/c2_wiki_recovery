Evaluating senior developers is straightforward. Either they know what they are doing, or they don't. They have a history of getting things done, or they don't. They work well with others, or they don't. They adapt well to new situations, or they don't. I want them on my team now, or I don't.

In contrast, evaluating a junior developer is not as easy. There is a shorter track record to examine. Skills and habits are still forming. Rough edges are being smoothed. They make more mistakes, but they are learning from them. They are not as productive, but they have a lower cost. In the short term, they are liabilities, but they may become assets. With a junior developer, one must judge potential, and try to predict the future.

What are the best ways to determine which junior developers have the "stuff" that make them worthy of investment? And how do we determine how to help them reach their potential?

----
See also LetTheJuniorDrive

----

If you call me and claim you're looking for a senior developer, don't ask me questions about HTML. You're not looking for a senior developer.
There is a page about WhatsWrongWithCorba.  However, CORBA was a lot better than equivalent systems at the time it was released.  Let's also document what's right with CORBA.

	* '''Standard''': There are multiple implementations from commercial vendors and OpenSource projects.
	* '''Simple IDL''': It compiles to multiple languages, not just C.  The language mappings translate IDL features into the most suitable host language features.  E.g. errors get translated into exceptions, rather than cumbersome error codes.
	* '''Static and Dynamic invocation''': No need for objects to implement their own support for scripting.  Any scripting language that uses the DII can invoke methods on any CORBA object.
	* '''Location independence''': an object reference is independent of the server.  Objects can be moved between servers without breaking references.

If you have not looked at CORBA for a couple of years you may be surprised how much it has changed for the better.  Here are some of the features of CORBA 2.5, 2.6, and 3.0:

	* '''Asynchronous Messaging''': The CORBA answer to Message Oriented Middleware
	* '''Minimum CORBA''' for embedded systems
	* '''Fault tolerance'''
	* '''Real-time CORBA'''
	* '''Interoperable Name Service''': Defines two URL formats.  One that can be used as an object reference and another that can point out objects in a remote Naming Service.
	* '''The CorbaComponentModel''': from the OMG web site:
		* A container environment that packages transactionality, security, and persistence, and provides interface and event resolution
		* Integration with EnterpriseJavaBeans
		* A software distribution format that enables a CORBAcomponent software marketplace

The ObjectManagementGroup web site should probably be listed on the WhatsWrongWithCorba page, but if you don't mind muddling through a sea of documents, the online specs are rather good ("http://www.omg.org/technology/corba").

----
CategoryCorba
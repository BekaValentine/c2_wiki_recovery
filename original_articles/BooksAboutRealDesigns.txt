Books describing the design and implementation of significant programs, all the way from overall philosophy down through the source code.

	* '''ProjectOberon: The design of an operating system and compiler''', by NiklausWirth. [ISBN 0201544288]. Describes the complete OberonOperatingSystem and compiler. This is an amazing account of applying OccamsRazor to operating system design.
	* '''TheArchitectureOfConcurrentPrograms''', by PerBrinchHansen. [ISBN 0130446289]. Thoroughly describes three small special-purpose operating systems. Includes a very instructive example of using performance analysis to drive the design of concurrency and buffering in a system, among many other things. ''29-Oct-2002: There are currently a lot of cheap second-hand copies of this book available via http://www.bookfinder.com/''

These books are true classics, don't be put off by the publication dates.

Side note: TheArchitectureOfConcurrentProgram includes a quotation of ChristopherAlexander, which surprised me since the book was published in 1977! It also appears on RalphJohnson's GreatSoftwareBooks list.

''Why does the reference to Alexander surprise you? There are mentions of his work on design in the proceedings of the original "software engineering" conferences, back in the late 60's''

It surprised me because I didn't know that. :-)

----
The Practical Guide to Enterprise Architecture by JamesMcGovern also has good case studies on applying measures of goodness to large projects.
----
Don't forget LiterateProgramming books! The LCC book (''A Retargetable C Compiler: Design and Implementation'' by Fraser and Hanson) is one great example. So is ''C Interfaces and Implementations'' - it's about how to write reusable libraries (with a focus on C), API design, etc. Highly recommended, whatever language(s) you use. --ScottVokes
-----
PayrollExample discusses an arguable example of such.
----
CategoryBooks
ComputerLinguisticMonism is the axiom: "Where one ArtificialIntelligence language can be used to achieve a particular goal, do not use multiple languages."

* This principle can be applied to problem domains outside AI, of course.  While there is no UniversalProgrammingLanguage today, many problems can be efficiently coded into a single language.  However, not all can; beware of the trap of UniformityUberAlles.

While this axiom can apply to everything from a NationalLanguage to metric vs english sockets, it was conceived by RobertGoodwin as an AI applied OccamsRazor, based on his experience with decompiling the AliceBot. After working with the ALICE ChatBot, it was determined that the AI was unnecessarily reliant upon multiple languages, shell commands, JSDK, and Personal Web Server, thereby multiplying the contingency rate, user learning curve, and processor. It also hampered the ReverseEngineer ability of the device, some of which, though OpenSource, was in binary, adding decompilers to the LearningCurve.

Server-side AIs typically require web development kits, DOS, Java, and C to develop, decompile, or operate. Client-side AIs only require knowledge of HTML and JavaScript, and are editable using page editors.  (There is an ongoing comparison of ClientSideVsServerSideAiFunctionality .)

CLM as an axiom reduces AIs designed as server-side mechanisms into client-side mechanisms by eliminating the tendency of users to make sloppily amalgamated freeware. AIs running on the client side offer the user more control, speed, and simplicity since they do not require crash courses in DOS, JAVA and C, or a fresh supply of ReverseEngineeringTools.  Client-side AIs are highly suited for the upcoming peer-to-peer bot networks which are independent of ISP control factors.

Contrast ComputerLinguisticMonism with AlternateHardAndSoftLayers.


(Thanks!  My objectives are to contribute and I am now happily directed to client-side wiki downloads.)

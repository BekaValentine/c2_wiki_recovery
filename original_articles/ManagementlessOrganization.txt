Google. Really, from the hiring and the firing to the management of programmer time. It's got management, sure, but it doesn't have managers and the like.
----
A ManagementlessOrganization is a hypothetical organization that requires no day-to-day management of the rank-and-file. Executives are still needed to provide the vision and direction for the organization. The executives, rather than hiring managers to promote their vision, treat the company as a CooperativeGame and set rules designed to produce the desired outcome. The organization literally has no managers. The members manage themselves.

When is ManagementlessOrganization preferable to a ManagedOrganization? Perhaps when the organization has grown large enough that the executives can no longer hire managers that can effectively promulgate their vision.

Possible ways to create a ManagementlessOrganization:

	* CompensationGame
	* ...?
----
'''Example:''' Macroware, a software consulting company.

Executives' vision: Maximize profits by focusing on customer satisfaction and employee know-how.

Rules: 
	1 Part of each employee's salary is based on technical skill. Skill level is assessed by encouraging employees to present on technical topics to each other, then collecting surveys after each presentation.
	2 Each team's total salary is a percentage of revenue based on customer satisfaction. Customer satisfaction is assessed by collecting surveys from customer. Teams with higher customer satisfaction receive higher percentages.
	3 The other part of each employee's salary is a portion of the team's salary, allocated according to the CompensationGame.

Hoped-for results:
	1 Rule 1 motivates employees to learn new things
	2 Rule 1 motivates employees to share knowledge with each other
	3 Rule 2 motivates employees to please customers
	4 Rule 3 motivates employees to work as a team

''No rule motivates employees to deliver projects at a profit, so all projects deliver on time at enormous cost and the company goes under''

Caveat: This simplified example focuses only on programmers and ignores all of the support staff that would be necessary. Furthermore, it hasn't been tried.
----
Rule 1 would encourage people to learn new things, all right. However, it would also encourage people not to learn things other people already know, which would probably lead to reduced knowledge sharing (because people wouldn't be listening). It sounds a lot like it would promote specialists, not generalists.

''Rule 1 also encourages people to rate the other presenters badly (hoping that they therefore look better, and get a bigger slice of the pie).''

''Rule 2 also encourages teams to sabotage each other, again hoping that they therefore look better than the other teams...''
----
''I think this could also very easily be an AntiPattern, if you're not careful. Do you really know what you want from your people? Do you want people who learn, know and talk about things well, but can't actually accomplish anything? -- JeffGrigg''
----
Management isn't that easy.

''This makes lots of assumptions about people and their goals which are only rarely true (e.g that the various executives don't have their own agendas, have only the interest of the company at heart, that the executives agree on where the company is going, and even when they think they agree they're actually agreeing on the same thing, that its possible to set rules that will produce the desired outcome, that those rules will be followed in practice, or even that its sensible to enforce those rules). '' -- last edit 02March
* I support this viewpoint

It also limits the ability of the executives to learn about what's really happen or needs to happen when the plans have to meet the real world. One of the functions of middle management is to communicate down - but also up, and keep the upper management informed about what's really happening.

All of these are very non-trivial issues and are much discussed and studied academically and in management practice. I suggest referring to the enormous body of literature covering this kind of thing (although one of the frustrations is that the business schools got their web strategies sorted early, and so papers aren't typically available for free on the Web).

-- PaulHudson (manager, MBA, computer scientist, software developer, in no particular order)
----
I once worked at a software company that was ''effectively'' managementless, because the President was inept, refused to manage, and kept on claiming that we needed to hire "people who can manage themselves."

The software engineers eventually evolved out some leaders of their own to make things happen, and those leaders were tacitly welcomed by the CEO.

Good thing? No. Because these seat-of-the-pants managers had no way of controlling the bad apples. Without the ability to fire the deadweight, the best they could do was minimize their damage, by constraining the projects the deadweight was working on. This frustration usually led them to leave the company. So we had a system where the best people were put into positions they came to hate, and then moved on to other companies. The deadweight stuck around, of course; a process that many other people have mentioned in lots of organizations.

-- AnonymousDonor

Indeed, I have experienced this accumulation of deadwood in a variety of organizations, and have called it GummyResidue Effect.  As you watch the folks who have somewhere to go go there, and look at what remains, you start to wonder if your reputation and your pride will take a hit if you stick around.  Downsizings almost invariably produce the effect, but so does organizational toxicity of other kinds.

--Rex
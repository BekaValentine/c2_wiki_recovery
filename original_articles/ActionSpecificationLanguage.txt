Seemingly, the ObjectManagementGroup are looking to provide precise semantics for modelling "actions" within the UnifiedModelingLanguage. KennedyCarter have brought SteveMellor on board and have developed the ActionSpecificationLanguage to allow UML models to be animated in the way that ShlaerMellorMethod models may be. See [1] for marketing fluff.

''Please take a look at the Action Semantics Consortium web site to find out which companies and organisations are involved. It's not just KennedyCarter and ProjectTechnology.''
*** http://www.kc.com/as_site/  ( BrokenLink )

''Is ASL part of UML or on top of UML?'' It seems to be a bit of both: proposed extention and addition, and maybe also some kind of infrastructure. A bit like the ObjectConstraintLanguage, but with different proportions. That's maybe not such a bad analogy: OCL is UML-does-SyntropyMethod, ASL would seem to be UML-does-ShlaerMellorMethod. And ASL is probably damned to the same kind of slow suffocation in a very small niche as OCL. Unless it gets built into RationalRose; OCL seemed to fail in the market partly because Rose doesn't do it.  

----

''Is the syntax similar to UML or more complexity?''

''Has KC any real language design experience?'' They seem to be mostly a CASE tool and consultancy outfit.''

	 :	''Sounds like they'll just add more cruft to the monstrosity that is UML. Very unorthogonal. Very complex. Building a language based on past standards leads you into the C runtime library. After all, who uses gets() except IOCCC winners? Sorry, I'm ranting.''

	 :	"Very unorthogonal. Very complex." Do you suggest that the OMG can err? Begone, heretic! More seriously, this work is in responce to an OMG RFP  [2] that has JamesOdell's name attached, which makes me wonder...

	 :	''Has the OMG acknowledged that UML is a programming language yet? Is UML TuringComplete?'' Don't know. Almost certainly not.

----

Actually, modulo the bloat and cruft (which might not leave much) it could be an improvement if the ASL/translation approach described here provoked a re-assessment of the ObjectModellingTechnique style "seamlessness" idea that causes so many, err, ''less descerning'' OO folk to get so confused.

''A perfect model must be at least as complex as what it is modeling. It's simpler to have fractal layers of abstraction. Is there any TuringComplete portion of UML that does this, or am I pissing into the wind here?'' 

I doubt most heavy UML/RUP (RationalUnifiedProcess) users (or authors) think this deeply about the question. 

The CatalysisMethod takes this view: in Catalysis the process of moving from one layer of abstraction to another (in a, yes, self-similar fasion) is called "refinement". In my opinion, if one is going to do a lot of modelling, then translation is the way to go. Catalysis muddies the water by treating refinement as a uniform operation beteen any two levels (thus, like the recursive transformation that builds a fractal), giving the impression of seamlessness, without clearly showing that refinement ''is'' a translation. Which it must be to work properly, I think.--KeithBraithwaite

The UML is not a programming language, and was never intended to be one. If the "translation" view of modelling is correct then it cannot and should not be one.

----
See also: ExecutableUnifiedModelingLanguage, UnifiedModelingLanguage, RecursiveDesign, ShlaerMellorMethod
----
CategoryProgrammingLanguage
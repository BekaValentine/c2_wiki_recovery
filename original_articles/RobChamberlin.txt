Robert Chamberlin - member of the Programmer's Guild

Currently residing in Rochester Minnesota.  Retired from IBM in 1993 where I worked as a programmer -- I became an advocate of the REXX Language and prototyping as a programming development philosophy.
----
e-mail me at rchamberlin@yahoo.com
----
Interested in all types of programming.
Especially where it leads to machine problem solving.

I have some really narrow viewpoints of programming technique.  You may agree or not, but they have served me well.  Such as:

Strong Typing - A BadThing. The developer is forced to compensate for a poor compiler design and/or implementation.  Shun those compilers and languages they support.

End-of-line - Developer is forced to remember when to end a line with '';'' or some other such token; the compiler should recognize the E-O-L, either with cr-lf or context.

Documentation - The source code should be human language and structured for clarity.  Therefore self-documenting.

Interpreted vs Compiled - BOTH - in the interpreted form can be used to prototype a task or function - proof-of-concept, while the compiled version would provide speed and security.

Errors - Either during coding, compile, or execution.  If the editor, compiler or run-time support found an error, it MUST share that information with the developer or user.  There is nothing worse than getting a ''syntax error on line 2368'' message with no additional information.  The processing program ''knows'' just what caused the error, and needs to share that information.

Go To - While not necessarily a GoodThing, my early years were spent in machine coding - yes in binary. I have always viewed the Go To as an unconditional JMP and have used it (sparingly) as such. The option to use should be supported.  End user choice should be respected.
----
I've just discovered the Zeno project in Germany, and sent them
an e-mail directing them to check out wiki.

A link to the Zeno white paper in PDF may be found on the ZenoDiscussion page.
----
Also of interest to me is the Delphi Process, or iteration leading to consensus as a means of mapping future trends.  Which was/is a community discussion technique.  Does anybody care?  DelphiDiscussion
----
Another topic I am gathering information about is that of design.  Why is it done? Should it be done? How does it relate to programming and human interaction?  My starting point is http://www.tcdc.com/default.htm, but since everything I am interested in is really a ''process'' or can be defined as one, I need to include research into Deming  http://curiouscat.com/guides/deming.cfm  and his ContinuousImprovement philosophy - as applied to processes.
----
DistributedComputing projects seem to be springing up like mushrooms in a fertile environment.  Some pay for your spare computer time, some look for volunteers.  Is it worth it?  Is anyone working on a registry of projects?  
----
Proofreading and Editing copy is another thing that is of interest to me.  Anyone who is involved in the creation of a document, technical paper or treatise is often not "up to speed" on the finer issues of detecting errors.  I am interested in tools which assist one in developing quality documents.  Links to the tools I have found to be of help are to be found at ProofReadingLinks.
----
CategoryHomePage
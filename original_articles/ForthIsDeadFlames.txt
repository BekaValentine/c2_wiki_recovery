ForthIsDead or FID (as opposed to FIG: ForthInterestGroup)
----
1. TrollExpression used by C advocates to try to vilify and diminish Forthers self-esteem (which they usually have an ample supply of). Contrast ForthIsAliveAndKicking. (FIAAK)

2. Sad summary of the reality. Some advocates say that Forth was born in 1979 and died in 1983. Interestingly, while there's no doubt that Forth occupies a dying niche, Forthers tend to be very vocal, and seem to multiply. Maybe they are on an arm-wrestling contest with Lisp?

''Is there some explanation for those dates[Ed. born on 1979, dead on 1983]?  That's about ten years after the first Forth, up to about the time I learned Forth.''

 There was a first European meetting in 1977. The crowd decided to meet again
 a year later. And in 1979 the first ''defacto'' standard "Fig-Forth" emerged.
 It was killed by the 1983 "new standard" that made Fig-Forth irrelevant,  
 outdated, and hobbyist-only targeted. It also coincides with the end of the
 widespread interest in Forth. Later standards, like the 1994's -- which is/was
 an ISO/ANSI standard -- only froze common/current practice with little incentive
 to try and go anywhere beyond what everybody was already doing.

3. Secret weapon also used by Lispers to focus the attention of the masses on more MainStreamLanguages. This allows you to KeepYourSecretSecret, invest in your own proprietary ''IPR'' and beat the competition, if any... -- verec
----

Forth can never die because it is so clever. We'll remember it for a long time just to learn from it. But that doesn't mean it's going to be vibrant. Smalltalk isn't dead, it's just that not many people care about it any more. Sure, when you realize that we have applications like Forte and Together/J sucking up 800MB of RAM to do ''nothing'', Forth's ideals are dead. But not everyone uses Java. Some people actually write applications that don't suck. Suck RAM and CPU cycles, that is. -- SunirShah

----

At a time when lots of little computers are being dropped into our everyday lives, ForthIsDead seems like a losing bet.  Forth is the finely-honed expression of certain values that fit quite well into environments with small amounts of memory and processor power.

You can, of course, ignore those values and write big, bloated code in ForthLanguage.  But don't kid yourself that that's Forth.  ChuckMoore is fanatical about keeping things simple and concise.  He's also fanatical about refactoring -- or, as he calls it, just plain "factoring" -- and YouArentGonnaNeedIt.  The fact that he wrote a VLSI CAD program by himself, from scratch, says something about those values.

In fact, much as XP/Patterns/Smalltalk is one maximal solution to software development (one that stresses LateBinding and the flexibility it gives you), Forth (in ChuckMoore's style) is another maximal solution (one that stresses EarlyBinding, small amounts of code, and the combination of speed and flexibility (!) those give you).

Java fan though I may be, if I were developing for anything embedded or handheld, I'd take a good look at a Forth solution before dragging in the JVM.  --GeorgePaci

The JVM specification is in fact very close to being Forth.  Some Forth chip manufacturers are now remarketing them as "Java chips".  --KrisJohnson

----
ForthLanguage, ForthReadability, ForthPortability, ForthReusability, ForthPessimism
----
CategoryForth

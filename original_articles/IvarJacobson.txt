Ivar invented the UseCase as a way of collecting and organizing requirements for a telephone switch.

''Uses'' and ''Extends'' are operations on use cases.  You will find them much easier to understand if you consider placing a telephone call as your primary use.

----------------------------------------------------------------------------------------------
Ivar Jacobson, is the creator of the Objectory method and is founder of Objectory AB in Sweden.  He is currently retired and was formerly Vice President of Business Engineering at Rational Software where he was involved with the development of UML.  IvarJacobson is well known for his pioneering work and over 25 years of experience using object methods for the design of large, real-time systems.  His work on large-scale, architected reuse was a key elementof the success of Ericsson's AXE telecommunications switch.

He is the principal author of two important OO books, Object-Oriented Software Engineering - A Use Case Driven Approach and The Object Advantage:  Business Process Reengineering with Object Technology.  He also wrote Software Reuse, my personal favorite.

He is most well known for the invention of the UseCase.  You can get more information about IvarJacobson, and the other two of the ThreeAmigos (GradyBooch and JimRumbaugh) at http://www.rational.com.

-- DionHinchcliffe
----
Another thing Ivar did was to propose separate models for analysis and design. I haven't seen much about this in UML and RUP - if it's there then it is well buried. For large scale, complex systems it is very useful to maintain an idealised object model of the system that shows how objects in a fluffy cloud can collaborate to meet functional requirements. You can ignore all the non-functional clutter about concurrency, distribution, persistence, performance, scalability, and so on. Those are tackled in the design model. I'm applying the analysis model idea to reverse-engineer a very large mobile telecomms network, hoping that such an object model will help us localise changes and identify commonality & abstractions. I would not want to do it at the design level!!  -- MikeHowells

Ivar spoke at Software Development West, 2004, giving a keynote on AOP and use cases. He made the point that AOP is a perfect way of retaining the idealized separation of use cases all the way down to the code level. He also gave some excellent evidence of having proposed an early AOP-like mechanism in an OOPSLA paper some 20 years ago. -- NicholasLesiecki

IvarJacobson was a Keynote Speaker at OtTwoThousandAndFour in Bedfordshire, England in March 2004 - MattStephenson

IvarJacobson is also behind the EssentialUnifiedProcess
----
CategoryAuthor
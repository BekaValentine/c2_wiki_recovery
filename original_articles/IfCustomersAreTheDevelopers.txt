If Customers ''Are'' The Developers or part of development in a piece of software
*The software will hold on longer and will have less chance of becoming just a temporary fling. 
*The customers will feel more at home with the software.
*The customers play a part in adding more software features, not just the company or dictator.
*The software can still have non-developer customers using the software as it is.
*The customers will be happier since they can modify what they need, as long as the software has enough open-ness or interface into it. Otherwise customers may complain about not enough customization, only some customization.
*The customers will be like a second staff, and will lessen development costs. Example: Joe Schmoe writes a plug-in for some software and offers it available to the public. It may have taken the software company 600 hours to write the plug in, but the customer did it for you. 
*Or with GnuLinux: Redhat uses software from Gnu, and Gnu is mainly built by customers using Redhat and other distros, so the customers are developers.  It may have taken RedHat 600 hours to write one part of Gnu, but the customers did it for them.
*The software caters to developers and users, not just one alone.
*The software may be easier to narrow down bugs. The people using the software will be more technical and able to describe the bugs more precisely (assuming more developers are using the software)

Actual Examples
*Any software with a plug-in interface.
*Any software with an API interface. 
*Internet Explorer with its plug-in side bars,  panels, toolbars, API.
**i.e. Google Toolbar is useful, and is free. Yet it helps market the Windows OS at the same time. 
*Opera with HTML side panels
*Mozilla with plug in extensions
*All programming languages: Languages are what people use to build software. Create a language , and you will eventually have people using the language. (i.e. Microsoft with C#, Borland with ObjectPascal or DelphiLanguage, Python and Guido, PHP and (...), Perl and Wall, Java and Sun, JavaScript and Sun.
*Open-source/Closed-source hybrid software
**i.e. OpenOffice and Mozilla as to StarOffice and Netscape.
*Photoshop with plug-ins
*Linux: RedHat, Mandrake, Slackware, Debian, etc., can each be a different distro of GnuLinux, yet they still are Linux softwares.
*Microsoft and the WinAPI . Let's people do anything they want with windows, while secretly marketing more windows software, due to the fact that the WinAPI based software must run on Windows OS. Without knowing the true source code behind windows, a developer can write software for windows.
*Microsoft with MicrosoftDotNet technology. Same as above. Except for the way that MicrosoftDotNet was engineered, this may make the situation worse, if GnuLinux can interpret DotNet on it's own OS. 
*Open or free software
*Open/Plug-in based combination based software. If the developer can write a quick plug-in without having to look over all the source code, this is an advantage. (plug-ins can still be useful in Open software).


''Windows Forms'' is the name of the part of the MicrosoftDotNet framework (and DotNetCompactFramework) that supports implementation of rich GUI applications.

Contrast with MicrosoftWebForm.

----
An example of WindowsForms creation, in sample chapter at http://www.microsoft.com/mspress/books/sampchap/6702.asp

----
It appears WindowsForms is not used much amongst the MicrosoftDotNet community. Its predecessor, client server applications, is still viewed to be a better implementation option where it is appropriate to have "rich client" applications. Perhaps this is related to the fact that the MicrosoftOffice software components that are being used do not themselves integrate well with MicrosoftDotNet. PleaseComment.

As for the future, there are already remarks in the publications that with WindowsLonghorn looming over the horizon, todays WindowsForms application will be so different in a Avalon ExtensibleApplicationMarkupLanguage based world that WindowsForms are themselves a legacy liability.

As at end 2004, two years after official launch of MicrosoftDotNet, uptake of WindowsForms has not been as spectacular as MicrosoftWebForm, possibly due to the fact most workstation software (including MS own office products that are in use) are still operating within the unmanaged ComComponent world. And the fact that the development environment for DotNet has not yet caught up with the likes of VbClassic.
* In the case of VbDotNet, in 2005 it will be much closer to VbClassic in convenience, as expected in the upcoming VisualStudioWhidbey.

----
A little known (or used) aspect of WindowsForms is that there are Zero''''''Deployment options (via web) aimed to minimize problematic software upgrade process. However this needs to be balanced with increased security provisions which adds complexities to such undertaking. See http://msdn.microsoft.com/msdnmag/issues/02/07/NetSmartClients/

----
CategoryDotNet

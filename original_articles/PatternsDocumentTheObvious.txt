While writing a pattern language on user interfaces, I found that I was censoring myself.  I tossed out a few patterns because I felt that they documented the obvious!

One of my patterns suggested to use graphics and well designed layouts to ''Communicate Visually''. How obvious!  What a waste of writing!  Well, maybe not.

Even some of Alexander's Patterns seem obvious or ''un-profound''.  
The best provoke the AhaPrinciple, but some left me going: ''yeah, yeah, any idiot knows that''.

It took me a while to realize that if just one person doesn't feel that the pattern is ''obvious'', then that pattern is an integral part of the language.  Without it, gaps in a persons knowledge or experience will cause application of the pattern language to fail.  A pattern language must be complete to be useful.

A good pattern writer can make the mundane and obvious readable and tolerable.

A great pattern writer can make the mundane and obvious seem profound.

-- ToddCoram
-------------------
The "obvious" patterns provide grounding in familiar, well-understood principles that we all need in order to absorb the less obvious. Also, patterns that are obvious to one are often new and exciting to another.

-- TomStambaugh

----------

I don't think it's so much the "obvious" that patterns document as it is the "familiar". If you haven't seen it
before, it's not obvious. However, there are some conclusions I can draw that might be obvious, even though I haven't seen them time and time again. The "obvious" part comes into play when I recognize it from something within my own internal repertoire (my personal "bag of tricks" ;-). It doesn't become obviously recognizable until I have used/seen it often enough that I have "internalized" it.

So rather than say "Patterns Document the Obvious", I would prefer to say:

	 :	Patterns document best practices that are "old hat" to seasoned professionals in the particular domain.

--BradAppleton
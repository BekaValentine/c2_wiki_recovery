Skinny Books are those things that take up less than about a centimeter of shelf space.

When well written, that's all you need for a topic that's been carefully refactored.

Examples:

* ''ManagingProjectsWithMake'' (2nd Edition) by AndrewOram and SteveTalbott
* ''TheAwkProgrammingLanguage'' by AlfredAho, PeterWeinberger, and BrianKernighan
* ''TheCeeProgrammingLanguage''  (2nd Edition) by BrianKernighan and DennisRitchie (see KernighanAndRitchie)
** I notice the new printing of this has suddenly got bigger! Thicker paper. It did always seem very expensive for its size, but really is the only CeeLanguage book you ever needed.
* ''TheElementsOfStyle'', by Strunk and White
* ''UmlDistilled'' (2nd Edition) by MartinFowler, Kendall Scott
* ISBN: 0596001339 ''XML Pocket Reference'' (2nd Edition) by Robert Eckstein (with contributions by Michel Casabianca), O'Reilly, April 2001
* ''ThePragmaticProgrammer'', Hunt & Thomas
* Polya's ''HowToSolveIt''
* ISBN: 1880656124 ''WabiSabi : For Artists, Designers, Poets & Philosophers''
* ''MrBunny's Big Cup of Java'', Carleton Egremont III.
* ISBN: 0-201-10331-1 ProgrammingPearls, Jon Bentley 
* ISBN: 0-201-11889-0 MoreProgrammingPearls (confessions of a coder), Jon Bentley (out of print)
* ''OnNumbersAndGames'', by JohnHortonConway
* ''The Craftsman'', Richard Sennett.

----
There are also skinny books which do not fit directly into ComputerScience:

* Halmos: NaiveSetTheory
* SaundersMacLane: CategoriesForTheWorkingMathematician - does for category theory what Halmos's book does for set theory (''I think the comparison is fair, but whether doing that is good or bad is a matter of opinion...'')
** Mac''''''Lane invented categories, and is an excellent, interesting author, so I don't really see anything negative on that side. NaiveSetTheory, on the other hand, set a new standard for tedium, IMHO. The thinner, the better.

These two, plus perhaps a book like Enderton's, are all the mathematical logic and CategoryTheory most working mathematicians ever need.

----
''Removed from the list above because it is not a SkinnyBook:''

* If you just read ''TheCeeProgrammingLanguage'' (see KernighanAndRitchie),  you'd better also learn how to avoid CeeLanguage pitfalls: ''WritingSolidCode'' by SteveMaguire (ISBN 1556155514)

----
I'd like to see an analysis of the book quality as a function of the page number.  The software industry especially seems to prefer very thick books (one inch or more), some with many co-authors. Many of these share a lack of coherence and "flow" that becomes more pronounced as they become thicker. These books may look impressive on a shelf, but their total value is often less than thinner books on the same topic; and the value/page ratio is naturally much worse. (Perhaps such an analysis should go into ThickBooks?)

These books also tend to be padded out with examples that don't always work and scads of tables and lists shamelessly copied from the vendor's documentation. Of course, the probability of the browser's eye stopping on your book increases with space it occupies on the shelf, so editors have no incentive to slim down. 

-----
The first thing I look for in a thin book is it's index -- is it useful? Complete?   I usually have three or four things I want to look up in my new book ahead of time. 
Anything by Brian Kernighan has been found to have an excellent index -- making it a true reference book after you've made your first pass.
-- ChrisGarrod
----
See also: ShortBooks as opposed to FatBook''''''s
----
CategoryBooks
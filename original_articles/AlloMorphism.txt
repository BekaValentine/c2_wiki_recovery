In linguistics, an Allomorph is an alternative manifestation of a morpheme (which is in turn the smallest meaningful linguistic unit in a language). Allomorphs vary in shape or pronunciation according to their conditions of use, but not as to meaning.

Here are some examples of allomorphs. In English, the negative prefix ''in'' has several allomorphs: 

	* ''In'' -capable 
	* ''Il'' -logical 
	* ''Im'' -probable 
	* ''Ir'' -reverent 
----
In "First published in ''IEEE Communications Magazine'', May 1993, Volume 31, Number 5, '''System Management Information Modeling''', S. Mark Klerer, AT&T Bell Laboratories (''Abstract: OSI techniques and tools successfully model telecommunications equipment, networks, and services - and enhanced capabilities are on the way. )[1]

It says, "...

'''Allomorphism '''

Allomorphism refers to the ability of an MO instance that is a member of one class to be managed as an instance of an object of one or several other MO classes. In its most general form OSI allows members of arbitrary classes to be related allomorphically as long as they exhibit compatible behavior. In its most useful format allomorphic behavior will result in the object fully emulating the behavior and characteristics of a member of that MO class to which it currently is allomorphic. Two types of allomorphism may be distinguished: static and dynamic. Static behavior involves an object being created allomorphically and representing that class to all its users. Dynamic allomorphism allows the same object to represent different class characteristics to different managers. 

Static allomorphism is useful in allowing a managed system to substitute a more refined MO, generally representing a more sophisticated resource, for the one that the user or manager requested. The more useful case is, however, that of dynamic allomorphism. Dynamic allomorphism allows managing systems and managed systems to evolve independently, thus providing for backward compatibility. It also allows for an elegant way of handling proprietary extensions. Backward compatibility is provided by allowing the manager to request that the MO behave as if it were an instance of a class of which the manager has full knowledge. The manager need not have any other information about the object. 

Allomorphism accommodates proprietary extensions by allowing vendors to create subclasses (or otherwise compatible classes) while retaining the capability of being managed as an instance of a standard class. A management system customized to cope with the proprietary extensions can exploit the vendor-specific features, while a standard management system still can be assured of interoperability.
 
As defined in SMI, allomorphism is a property of an instance not of the class as a whole. This allows members of the same class to exhibit different allomorphic behavior. The more usual case is the case of every member of a class being allomorphic to some superclass. However, the capability of allowing individual instances to be allomorphic to other compatible classes is useful in creating customized views of MO instances. For instance, if a service provider wishes to hide certain attributes and events from some users, a compatible class may be defined that is identical to the MO class except that it is lacking the characteristics that are to be hidden from the user. The user is then granted access to only instances of that "view" class, thus essentially masking the characteristics that are to be kept private. 

Allomorphism is the one property that potentially makes class relationships visible to the user and of importance to the implementor. Allomorphism is not free; however, it is an important property that will prove its usefulness in the marketplace.

..."

----

Is this related to Facets? -- MartinPool

----
CategoryJargon
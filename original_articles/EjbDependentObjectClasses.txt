Regular Java objects, preferably not Serializable, that represent business domain objects owned by an EnterpriseJavaBean.  They have intrinsic object identity (i.e. reflect state in the database), and are laden with business rules, hence are not necessarily appropriate to be transferred to a client application via Serialization.  

See EjbDependentValueClasses for what should be passed to clients.

They are an informal concept when using BeanManagedPersistence, meaning one has free reign to use them to implement an arbitrary domain model and/or database bindings or optimizations (such as field-change-tracking, deferred queries, etc.)

With EjbTwo ContainerManagedPersistence, these classes are more specifically structured such that a PersistenceManager can properly persist their state to a datastore.   For instance, fields must be Serializable or primitive (mappable to a database), other dependent objects, or collections of type java.util.Collection or Set.  (List and Map are not yet supported in the EJBTwo draft).  Owners of relationships must provide abstract factory methods, (i.e. createXXX) two be overridden by the persistence manager.

----
EJB 2.0 ProposedFinalDraft2 has eliminated EjbDependentObjectClasses in favor of EjbLocalInterfaces on Entity EJB's.

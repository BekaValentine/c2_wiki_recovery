Naming suggestion: QompSystem or QompFramework

''Too specific. Qomp is itself.''

Of course Qomp is itself.  But calling it 'itself' provides absolutely no information about 'it'.  Qomp as you describe it here is a framework, a system, or (to use your term) 'an infrastructure', and you need at least two words.  Therefore, QompSystem, QompFramework, or QompInfrastructure makes an appropriate WikiPage name.  'QompItself' does not.  Further, 'QompItself' doesn't lend towards accidental linking, and looks awkward when placed in a sentence (it'd be like having a page called JoeHimself because JoeSmith is JoeSmith.)  

''This Wiki does not allow one to make a "Qomp" page. The last name in JoeSmith makes that page possible, but Qomp doesn't have a last name. Maybe we can consider QompUte or TheQomp or QoMp, but that is just a confusing MixedCase hack.''  (We call that UgLy here.)

----
Qomp is itself. It is not just QompLanguage. It is an infrastructure.

The distinction needs to be made. Qomp is itself, not just a language. 

----

Started the QompOs page for fun, but currently no time to work on a Qomp operating system.

----

In true NameIsName fashion:  Java is great for writing portable object-oriented code with strong typing.  Perl is great for banging out a script, and has modules for every conceivable application domain.  Python is a great learning language with a very simple syntax and lots of great tutorials online.  Ruby has all the great scriptability of Perl, a similar syntax to it, but with a focus on OOP that's the envy of Perl and Python alike.  Qomp?  Well, uh, Qomp is Qomp. --someone

''Opinions are like rectums. Everyone has one.''

Qomp is an opinion.

''i.e. like everything else''.

----

Qomp is the alpha and the omega.  Except Latin instead of Greek, and in the middle of the alphabet instead of the ends, and four letters instead of two.
----

Qomp is a word, a project, a community, a language, an infrastructure. Qomp is itself. 

----

Anyone can program code in Python, Ruby, C, or APL or InsertYourFavoriteLanguageHere. Nobody cares about just the language. People care about infrastructure. If designing a new language, it is essential to not design ''just a brand new language''.. but to make use of existing infrastructure instead. Otherwise programmers will be recreating new infrastructures that already existed in old infrastructures.

----
Some programmers invent languages which are just ''programming languages''. 

What about the libraries. What about the infrastructure. What about itself?

----

Languages that don't have existing infrastructure to work with, may be just ''pet projects''. 

Languages that reuse ''existing infrastructure'', such as the ability to link to existing C libraries, link to existing modules (source or binary based), or the ones that can make use existing Unix API's, or the existing Windows API's, or existing run time libraries... these languages are the ones that are not just languages. The languages that can make use of OtherPeoplesCode, are the ones with infrastructure and community.
----
Example: Java is a community and infrastructure, but some think it is just a language. More importantly are the Java Libraries and the community, therefore Java is not just a language, but an entire infrastructure. 
----
Language growth requires infrastructure, extensions, community.

----
See also: QompReactions, QompOs, QompLanguage
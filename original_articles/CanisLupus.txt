''AreYouThere? 2004-06-02, last edit 2000-07-07''

Pseudonymous videogame developer.

Believes that videogames can be (but often aren't) extremely ExtremeProgramming. Things are slightly different because videogames are about ''fun'' and no two people entirely agree on what is ''fun''. So, to an extent, the design -- the gameplay -- needs to be refactored, not just the code. This leads to all sorts of potential problems. AlternateHardAndSoftLayers can help. Either way, we have a lot of fun, because you can ReallySeeTheObjects.

Last seen conspiring with EddieEdwards.

----

(thread conversation moved to ExtremeProgrammingForGames.)

----

"Things are slightly different because videogames are about ''fun'' and no two people entirely agree on what is ''fun''"

Thanks for starting this thread and for making this key point which is not just true for games, but is especially true for games. ImpactModelling explicitly encourages the customer(s)/developer(s) to model multiple peoples' views of success - but '''only''' as much as is necessary for successful delivery (as seen by the person that's paying), based on the DocumentToDeliver principle (otherwise you would never stop modelling everyone's opinion). I would say, based on Wiki, that XP currently says: delegate the simplification or prioritisation of this "much too complex" reality (for the development team) to a single "customer" (or group) who are not developers (eg RonJeffries in WhoIsTheCustomer). This does not encourage multiple views of success to persist or even be known to developers and it doesn't fit at all easily with hybrid customer/developers (a concept that is only mentioned briefly at the end of TerminationCanBeSuccess as far as I know). I see this as a weakness in XP as a totally general purpose method, based on my limited knowledge of every word on Wiki and what's developing in the heads of the OfficialXpPersonnel. I doubt that it's wise for XP to try to be totally general purpose anyway. But the planning book isn't finished yet and the terminology and concepts look like they're changing (see DonWells' comments buried in ChiefArchitect). ExtremeProgrammingForGames may help a lot in giving the writers the kind of problems they need right now. Well done for starting it! -- RichardDrake

-----

Thanks, Richard. And with ''(otherwise you would never stop modelling everyone's opinion)'' you hit on the precise point of failure for a great many games companies.

All too often, a game will try to spoon in "a little bit of everything". Sometimes this is due to disagreement amongst the developers, sometimes it's due to publishers insisting on the game appealing to as many people as possible -- which sometimes leads to it being reduced to the lowest common denominator (like network television ;-} ). Or, they'll just argue forever and never get around to implementing ''anything''.

When I think back to the games I have most enjoyed, they are frequently notable for their ''unity of vision''.

Thus, the ChiefArchitect concept is one gaining currency in the games industry, and I believe it's essential. But it's not popular. The reason is simply that games either ''are'' art, or are dangerously close to art, depending on your POV, and this drags in Ego. Lots of it. Not in an all-consuming I Am The Centre Of The Universe sort of way, but in terms of people taking their ideas very personally. Nobody likes their ideas being squashed; of course, you get this anywhere, but it's harder when you're trying to apply such vague criteria such as ''fun'', and also, when your product is not simply something ''useful'' for a particular company, but something that potentially hundreds of thousands of people across the globe are going to buy, play and hopefully enjoy. People like to think that ''their'' ideas are what makes a game successful. It's the "So which bit did you do?" factor. :}

(And I don't make any claim to be exempt from this myself, tho I do try not to let it get out of hand! ;} )

-- CanisLupus


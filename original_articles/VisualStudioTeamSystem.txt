http://msdn.microsoft.com/vstudio/teamsystem/
	 :	''"Visual Studio Team System, a new member of the Visual Studio product line that integrates process guidance, prescriptive architectures, and life-cycle tools for successfully deploying solutions on the Windowsï¿½ Server System."''

To most developers, the relevant part of Team System would be TeamFoundationServer, the new VersionControl server (and clients) to replace SourceSafe. Many of the major technical problems with SourceSafe have disappeared. The irrational design of the Visual Studio solution and project integration remains. It also is ''not'' free with VisualStudio, and has fairly hefty technical requirements.

Related Information:
* Article by Brian Button, "One Agile Coder" -- ''"Real Test Driven Development with Visual Studio Team System"'' -- http://www.agileprogrammer.com/oneagilecoder/archive/2005/11/28/9859.aspx
** ''Brian Button recommends using Test''''Driven.NET (TestDrivenDotNet) to make it easier to run tests within this environment:'' http://www.testdriven.net/
** [CategoryTestDrivenDevelopment]

----

Is there anything in VS Team System that cannot already be done better by existing, open-source tools? For example:

* ContinuousIntegration: CruiseControlNet (VSTS cannot do ContinuousIntegration without some work)
* UnitTest''''''ing: NUnit, MbUnit (the VSTS test framework is a straight copy of NUnit, including all of its flaws, but is needlessly incompatible) 
* MockObject''''''s: NMock, RhinoMock
* IDE Test Runner: TestDriven .NET (the VSTS test runner is prettier but cannot run all the tests in a solution with one click!)
* AcceptanceTest''''''ing: FIT

''When has that stopped Microsoft from reinventing the wheel before? The MS tools will be inferior, but quality is irrelevant - they will be integrated well with the MS toolkit and will not require hunting to get them, and as such will be the defacto standard.''

I'm not expecting Microsoft to stop reinventing the wheel.  I'm asking if there's anything in VS team system that would give me something more than existing tools that are more flexible, more reliable, have a faster upgrade cycle and more responsive development teams.  Surprisingly IDE integration is *not* an advantage of the VSTS tool set.

''A big advantage is that it will be easier for engineers to convince management to use the approach.  If Microsoft endorses it, that goes a long way with managers.  If it's just some thing you can get off the net, you are more likely to get push-back from them.''

----
[CategoryDotNet] And see BigAgileUpFront
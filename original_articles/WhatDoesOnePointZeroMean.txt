Nothing to do with how ThereAreNoRealNumbers.

When OpenSource software reaches a certain level of maturity, someone or someones declares it has reached 1.0. Many folk nod sagely at this, others do attaboys, and still more regard it as a good time not to use the damn thing.

WhatDoesOnePointZeroMean? Why do you want your software to reach it, how does it change things for the user community, and in general who cares about it?

----
In the OpenSource world, reaching v1.0 is pretty important. It means you are ready for other projects to depend on you. It means you have tested and built on a variety of platforms, not just your own dev box. It means you are now ready to stand behind your interface decisions, and support them into perpetuity. This is especially important if your software is a library, framework, or tool. This is as big a step as giving your project its first experimental release version and releasing it into the world for the first time.

For example, I am helping with a project called XCB, a library on top of the XwindowProtocol intended to replace the old and crusty Xlib for low-level work. The project itself is rather old, about five years, yet it only had its first preview release less than a year ago, and is still not 1.0. There are still some hard problems to solve and interface decisions to work out. Toolkits like Gtk+ and Qt don't wish to use it until it reaches 1.0, because they want to avoid rework if the interface or behavior changes. -- IanOsgood
----
Reaching version 1.0 generally implies that the software is trustworthy and may be used in production, given some reasonable and common-sense interpretations of "trustworthy" and "production." Prior to version 1.0, if it eats your data, crashes your server or impregnates your dog, you have no one to blame but yourself. After version 1.0, if it eats your data, crashes your server or impregnates your dog, you ''still'' have no one to blame but yourself, but at least the developers should demonstrate some concern. As version numbers rise, the ratio of necessary self-blame to developer-concern should (hopefully!) increasingly teeter in your favour. -- DaveVoorhis
----
0.95 <= 1.0 < 1.05 (using conventional "round half even" rounding). -- GeoffSobering (Sorry, I couldn't help myself.)
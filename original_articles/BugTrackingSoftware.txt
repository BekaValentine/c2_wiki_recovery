Software to help you gather, assign, prioritize, track, ... bugs (bug TrackingTool''''''s).
* '''Agility''' (http://www.agileedge.com Bug Tracking) from AgileEdge is a Web-based Issue and Bug tracker. Agility is a highly customizable solution to track all your project needs. Agility also features a rich security framework that can be customized at the project level.
* '''Bee''' : hosted application focusing on web applications (http://bee.cloudbur.st)
* '''Bontq''' (http://www.bontq.com Web Based Bug and Issue Tracking) It allows you to manage projects and track bugs very easy because of its clean and user-friendly interface. The essential part of Bontq is it's Desktop Client. Using Desktop Client's functionality you can Capture Screenshots, Record Videos and attach them right to your items.
* '''Bluetail Ticket Tracker''' (http://btt.sourceforge.net/): very easy to setup and use, free
* '''BugaBoo''' : Open Source, web based, very feature rich and easy to handle (http://www.bug-a-boo.org)
* '''Bug Rat''' (http://www.gjt.org/pkg/bugrat/) - A free, open-source java implementation ... but the code is a BigBallOfMud
* '''Bug Track''' is a simple Perl/DBI bug tracking tool (http://agstools.com/bugtrack/index.html)
* '''BugTrackerNET''' (http://btnet.sourceforge.net/bugtrackernet.html): bug tracker written using ASP.NET and C#. GNU.
* '''BugZilla''': open source, powerful, and nowadays pretty easy to set up
* '''Code Track''' http://www.openbugs.org/ - light-weight, PHP/XML, open source/GNU GPL
* '''Dev''''''Track''' http://www.devtrack.com - commercial license.  Customizable work-flow.  Often mated with Perforce.
* '''Double Choco Latte''' (http://dcl.sourceforge.net/) - Looks pretty good, nice and easy to use. Has quite a few features (but missing out some of the more complicated ones).
* '''elementool''' (http://elementool.com): web based, so there is no set up, and it is free. The functionality is fairly basic.
** ''According to the web page, it is FreeAsInBeer up to 200 "issues" stored; after that there is a monthly fee. It doesn't appear to be FreeAsInSpeech in any way.'' -- JosephDale
* '''ExtremePlanner''' is a commercial tool we are using for planning and tracking stories and tasks - its working out really well so far (http://www.extremeplanner.com)
* '''FogBUGZ''' (http://www.fogcreek.com/FogBUGZ/): Web-based. Intended to be straightforward, yet powerful. Developed by the moderately well-known developer JoelSpolsky
* '''FlySpray''' (http://flyspray.rocks.cc/) -Meant to simple. Anyone used it?
* '''GNATS''' (http://www.gnu.org/software/gnats/)
* '''Insecticida''' (http://sourceforge.net/projects/insecticida/) - Originally a fork from Workbench (http://sourceforge.net/projects/workbench/). Implemented in PHP. Iteration aware. Check-ins are emailed to all the team members. Several interesting KeyPerformanceIndexes ... but the code is a BigBallOfMud.
--- As of 05-2007 it contains a Wiki and issues have Wiki tags, which means you can upload photos of bugs. Nice!
* '''Issue Tracking Anywhere'''(http://www.dynamsoft.com/Products/ITA_Overview.aspx)-uses SaaS (Software as a Service) as the delivery model.
* '''ITracker''' (http://sourceforge.net/projects/itracker) - A free, open-source java implementation that seems ok but lacks all the features of BugZilla.
* '''JiRa''' - free for open-source and non-profit projects.
* '''JitterBug''' http://samba.anu.edu.au/jitterbug/ - light-weight, C CGI program, open source/GNU GPL, used by the samba team (''now unmaintained'')
* '''Mantis''' (http://www.mantisbt.org/): PHP based, supports MySQL, MS SQL, PostgreSQL - open source. Current version is 1.0.6. Oracle support experimental. Great (i.e. simple) UI, easy to install and extend.
* '''myTracker''' (http://mytracker.sf.net): free, powerful, written delphi, SOAP based integration
* '''OnTime''' (http://www.axosoft.com/): Browser-based, Hosted, and Windows product application for project management and tracking bugs, issues, defects, and more.
* '''Projxpert''' (http://www.Projxpert.com/) - Web based. Each project has an issue tracker, subversion version control and forums.
* '''PR-Tracker''' (http://www.prtracker.com) - Easy to use bug/issue tracking software. Has free 1 users options.
* '''Quality Center''' - Enterprisy (web-based activex control) but powerful. From HP Mercury.
* '''Rational ClearQuest''' - expensive and big. Highly customisable through Perl and VBScript APIs. Scalable, multi-site-capable.
* '''WRAP'''- WoodRanch Agile Projects (http://www.agilewrap.com): Agile project management and Bug tracking software. On-demand, affordable, scalable solution with 5 user licenses Free.
* '''RedMine''' (http://redmine.org) - Similar to TracWiki, with some improvements (multiple projects, project planning and calendaring, etc). Free and OpenSource; written in RubyOnRails.
* '''Roundup''' (http://roundup.sourceforge.net/)
* '''Scarab''' (http://scarab.tigris.org/) - intended as a replacement for BugZilla. Implemented in java. Too heavy and bloated.
* '''SourceForge''' itself contains web-based bug-tracking software called "Tracker" (http://sourceforge.net)
* '''StarUnit''': just CaptureBugsWithTests
* '''TargetProcess''' (http://www.targetprocess.com): Agile bug tracking and project planning system. Supports ExtremeProgramming. Web-based.
* '''TeamSupport.com''' (http://www.TeamSupport.com) - TeamSupport integrates a help desk with a powerful bug tracking system so that customer service and development can work on the same tool. 100% hosted solution by Muroc Systems, Inc.  The first three users are free.
* '''TestTrack Pro''' (http://seapine.com): Powerful, cross platform software by Seapine
* '''TracProject / TracWiki''' (http://trac.edgewall.org/) - seems like a follow on from CvsTrac. It integrates issue/bug tracking, SubVersion checkins, wiki and a few other goodies. Makes the crosslinks between rfcs, bugs, work orders etc very visible.
** '''CvsTrac''' http://www.cvstrac.org - tracks bugs and cvs checkins, includes a wiki and cvs browser. Best idea: bug descriptions and cvs checkin comments are wiki formatted so they and wiki pages can refer to each other. Open source/GNU GPL.
* '''WikiWikiWeb''': can be used for bug tracking, but misses certain features desirable for this purpose ''(but see TracWiki)''

----
Other ideas:
* '''Any wiki''' (see note in TwikiClone)
* '''NoBugDatabase''' - "Database? DATABASE?! We don't need no steenkin' bug database!"
* '''Roll your own''' - often a group will start with a simple SpreadSheet or custom DataBase. If the project is small or short-lived, this may be sufficient.
* http://directory.google.com/Top/Computers/Software/Configuration_Management/Bug_Tracking/Free/
* '''SharePoint''' - Works fine for us. Filter on "me", "Assigned" and sort by priority...

----
'''The problem of using StarUnit: just CaptureBugsWithTests'''

	1 You need to separate your backlog from your regression tests. It is very simple to convert one in the other when using StarUnit, but OTOH it is very hard to discern one from the other.
	1 Architectural and Macro Tasks (like UserStories) are not handled well with StarUnit.
	1 Priorities are not handled well with StarUnit: Which must be fixed first?
	1 Releases are not handled well with StarUnit: Which must be fixed in this release and which must be postponed?
	1 Dependencies are not handled well with StarUnit: Which depends on which?
	1 Estimates are not handled well with StarUnit: How long will it take?
	1 Risks are not handled well with StarUnit.
	1 Subtasks are not handled well with StarUnit: How do you divide tests?
	1 Planning is not handled well with StarUnit. If a tool is good for estimation, dependencies, assigning priorities, assigning scope and release, subdividing tasks, etc. then it is good for planning.
----
Should we consider having so few bugs that we don't need this kind of software? Naaah ... 

''If you are able to do that, I envy you. Maybe you are KentTheBeck (are you?), or maybe you are in a different situation. But I'm currently working on legacy code that was initially uncommented, undocumented, without tests and not well factored, and frankly, at least I can't get there from here quickly. In the meanwhile, Mantis is helping me a lot. -- FalkBruegmann''

To parallel some brutal sarcasm, maybe you are good enough to do that, but I'm not...

''I know it's not ideal, but I didn't exactly have a choice. The business situation is such that we needed to keep adding features right after taking over the code base. So we PayForMeatWithCandy, and refactor/add tests/comment/debug as we go along. As the system is neither very big/complex nor '''very''' buggy, this seems to work so far. -- fb''

Sorry, the attempt was to say that if you can build a system of any size with
so few bugs they don't need to be tracked, you are better (at it) than I am. I don't see how it can be done.

----

Tip: If you are using such a system, consider tracking project risks and/or feature requests with it, depending on the situation.

''If you start mixing non-defect data into a defect tracking system, take great care to provide a way of reporting on (or at least counting) just the defects. Otherwise, you leave the system open to misinterpretation. Consider the "Microsoft NT ships with 64,000 bugs!" headline. Few external people will dig deep enough to discover that N entries in the tracking system doesn't mean N bugs. -- DaveSmith''

----
''I guess the question is; what is a bug? Defects, misunderstanding, failures, etc. You need a way of keeping tracking of all the stuff that development churns up. It should be light, easy to use. I wrote my own Web one. It looked really neat... pity no one used it. We regressed to Post-It and Excel. Sigh! -- StewartBaird''
----
See also DefectTracking and click the title to see more related pages.
----
Is anybody able to add some comparisons? Such as: I used x, then tried y, before settling on z. I don't really have the time to try all these options.

	* Ok - looks like I'll be first... Our company is migrating from dcl to trac. Dcl is quite nice for some things, but apparently trac is amazing in the efficiency it creates.

	* I made extensive use of TestTrackPro at a previous job - worked OK, but: Cumbersome windows client, lots of work to enter a new issue, searching was powerful but difficult to grok, no real way to plan for a specific release, flakey server. Of course, YMMV. At my new job, we use JiRa - Easy to enter issues, dashboard to keep track on project state, able to plan for specific releases and more. It runs rings around TTP. My 2c, BevanArps.

----
CategorySoftwareTool CategoryConfigurationManagement
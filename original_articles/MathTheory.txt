Math does not confuse me. Mathematicians confuse me.

----

How do we confuse you?

''Writing books full of nutty symbols & squiggles and such without defining these in a legend anywhere comes to mind. Interleaving these with quick homely prose analogies would help*. DesignPatterns, by contrast, starts with quick definitions of terms like 'virtual' & 'interface' and such, and has 3 working instances per Pattern.'' 


(*)See HowToWriteUnmaintainableCode, section "Book Of The Month Club".

----

Although the systems has its flaws (and inconsistent notation is all to often the case) it works quite well. Analogies would ''not'' help. Prose is a very poor tool for describing things rigorously. This is why we don't use it (after 1000's of years experience, I might add).

''We should also add that a Math still uses a lot of PlainEnglish - for example:''

''(Minding's Theorem) If two surfaces are of the same constant Gaussian curvature they are locally isometric''

''Not a single WeirdSymbol in that statement (though it could be formalized). Proofs and math problem solutions also typically have a lot of "prose" in addition to symbols. See also TheoremProving''


Usually, if you don't understand the symbols used in a paper/text (ignoring the ones that are just crap), either immediately or from context, then you are reading the wrong thing. It is understood that you will back up and learn the underlying material first....

'Design Patterns' works the way it is written because the subject matter is neither particularly complicated nor particularly well defined. Thus 'prose homilies' are appropriate, and useful. I have a feeling that same approach would fail miserably to describe, say, functional analysis...

I'm not saying ''everything'' needs to be done rigorously, quite the contrary. On the other hand, the vast majority of the programmers I have known wouldn't know a rigorous argument from a hole in the ground - and the vast majority of them would benefit from that knowledge. Not to suggest that we all move to Prolog :) Just that I have many times seen somebody 'waste' weeks of prototyping etc. on a problem they didn't understand, where a little careful thought would have shown them immediately.

----

We remind me of a most excellent Anti-FAQ compiled for the insane asylum known as news:sci.math:

http://www.ocf.berkeley.edu/~abhishek/pearls.html

It lists the top 77 dumbest Subject lines.

Some selections:

	* Elitistic proof that 0=infinity
	* I am disappointed in God
	* I proved FermatsLastTheorem
	* PLEASE no more losers, cranks, etc.
	* Ok, I'm *so* sorry
	* Invisible alien problem

And the number one entry is:

	* What is the point of rigor?
----

Math texts are very different from computing manuals, as I discovered while attempting to read "The Geometry of Complex Numbers" (ISBN 0486638308?). With computing books, you read the whole thing in one go and let the context assemble itself later. With math, you must ''understand'' page N before proceeding on to page N+1.

----
CategoryMath
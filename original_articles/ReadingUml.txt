Does anyone have any evidence of the utility of reading someone else's UML model?
And if so, what is the best way of teaching the skill?
-----
Context: The testers who write the external tests for our systems are used to working from a requirements document but use the (textual/structure diagram/screen shot) system design document to understand the context of the solution (thus allowing them to navigate to required preconditions) and resolve ambiguities.

(Yes we use JavaUnit regression tests. We still need external system level tests. And we need an upfront design, not an XP incremental approach. The reasons are not relevant here.)

For a new Java based system we have UseCases instead of a big requirements document. This is fine. But instead of a big design document we have various UML models, mostly ClassDiagram and SequenceDiagram .  The testers do not understand and want a textual design document.

The obvious answer is to teach them to read UML, just as hardware test engineers have to be able to read circuit schematics.  Is anyone aware of evidence that this analogy might work: do UmlModels have any utility to non-designers?

Assuming it does, what would be needed?  Telling them all to read UmlDistilled is not a good answer.  And all classes I have seen on UML concentrate on creating them for analysis or design. Is there an adequate online tutorial somewhere? Could a half day training course get the testers over the hump?

MarkSwanson

Ever since MicrosoftDotNet is out, the word '''Managed''' seem to be repeated over and again.

In a .Net context, "managed code" means code that requires DotNetFramework to provide services such as "garbage collection". There is a certain misconception that Managed code is also "thread-safe" code, the latter is a default but has heavy performance penalties.

See also NextGenerationWindowsServices, and ItJustWorks for a surprise backdoor out of the MicrosoftManagedCode.

----
'''WindowsFx (WinFX) - Managed API for WindowsVista '''

Applications developed for WindowsVista will only be able to invoke MicrosoftManagedCode, although Avalon, WindowsFileSystem and WindowsCommunicationFoundation will all have internal routinees that use unmanaged code.
From http://www.computerworld.com.au/index.php/id;1229648758;fp;16;fpid;0

''DonBox reckons WindowsVista will be the "tipping point" for widespread adoption of MicrosoftManagedCode.'' See http://www.sys-con.com/story/print.cfm?storyid=46994

----
Question: Any characteristic of  Managed code beside the implications of requiring the use of CommonLanguageRuntime?

Due to automated garbage collection, freeing up resources for unwanted objects may be deferred. It is said there are special considerations required as a result of this "feature".

''What are these considerations?''

You have to consider situations where a resource held by an object is not automatically freed immediately after the object becomes unwanted (keywords here are "automatically" and "immediately").
----
I wondered what ManagedCode is other than a VirtualMachine where the ByteCode happens to x86-code. But then realized, that this seems to be a more or less new combination (even if it may be a step back). ??

''Gunnar I do not understand your remark. I just make a mental translation of "Managed Code = code that works under an environment with garbage collection and sandboxing added to enhance InformationSecurity." -- dl''
----
CategoryDotNet CategoryMicrosoft
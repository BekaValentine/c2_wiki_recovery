A riff on strongly typed. Used to describe an implementation that needlessly relies on strings when programmer & refactor friendly options are available.

For example:

Method parameters that take strings when other more appropriate types should be used.
On the occasion that a string is required in a method call (e.g. network service), the string is then passed and used throughout the rest of the call graph without first converting it to a more suitable internal representation (e.g. parse it and create an enum, then you have strong typing throughout the rest of your codebase).
Message passing without using typed messages etc.
Excessively stringly typed code is usually a pain to understand and detonates at runtime with errors that the compiler would normally find. -- http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html

-------
This kind of sounds like the "tag-free" typing model (see ColdFusionLanguageTypeSystem and DefinitionOfTypeTag). Treating all variables as strings (at least initially) gives one pretty close to what the tag-free model does. 

One nice things about such is that it's generally easier to pass strings to diverse tools/languages/servers than "binary" types. It helps with system "gluing".
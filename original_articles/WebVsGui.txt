Differences between HTML-HTTP-based UI's and "traditional" GUI's.

* Web pages have no built-in state. They must be redrawn upon each server communication. (Of course there are ways to work around this or emulate state, but none are standardized or smooth.)

* Web pages have the "back" button convention, while GUI's don't. The expectation of or ability to back-up complicates integrity and state management. Related: BackIsNotUndo.

* User can have multiple instances of a given web page or web form, which creates problems similar to those of the "back-up" issue.

* Web pages lack widgets that GUI designers are used to. Solutions are often proprietary, limiting browser audience. Missed widgets include:
** combo-boxes (select boxes with optional type-in)
** tab buttons (that don't require a page refresh)
** edit-able data grids that provide a spreadsheet-like feel
** menus (frame usage tends to muck up web emulation)
** Related: WebBrowserMissingWidgetWorkArounds

* Web page designer tools tend to be "flow-based" (hierarchical) while GUI tools tended to be coordinate based. (Which is better seems to be a strong personal preference -- CoordinateVersusNestedGui)

* GUI's often use "modal" screens for certain types of interaction. This is where one cannot return to the original screen or MDI area until they complete a diolog box or series of dialogs (sometimes called "wizards"). JavaScript error messages provide this, but are not customizable.

* GUI kits usually have the option of MDI screen management where all sub-screens are visually contained in the MDI window. Usually there is a "main" screen in MDI interfaces.

* Hyperlinks are not a traditional GUI concept, however it is possible to add such a feature, at least for non-modal screens.

-----
CategoryUserInterface, CategoryWebDesign, CategoryInteractionDesign
In addition to LanguagePissingMatch and ParadigmPissingMatch, there is also the DomainPissingMatch. Example: "I work for NASA, so my stuff is more complex/interesting than yours." If any domain was truly easy, than it would already be automated and available in a box purchasable via Tiger Direct or somewhere else on the Web. 

*  ''Tell that to all the people doing trivially-automated jobs in other industries, or who are kept around for compliance reasons and then given odd jobs to keep them busy.''
* I'm not following. What's an example of a "trivially-automated job" that is not being automated?  And NASA is probably subject to plenty goofy compliance rules also. In fact, contracts intentionally are awarded to spread jobs among multiple states, efficiency be damned.
 
For example, business applications may not have a lot of high-level math involved, but they are often a big puzzle in how to handle tons and tons of interweaving and interrelated rules and relationships. LifeIsaBigMessyGraph. They are "hard" because of the complex relationships, not so much complex algorithms. Whether that makes them "boring" or not is personal issue. But complexity is there. It seems there is a bias to algorithmic complexity being '''more uppitty''' than relationship complexity. I am not sure why this is, other than perhaps to say that relationship complexity has been harder to apply "science" to so far. Thus, it has a larger portion of its body in the "art" side of the room than the science side. Further, it may be easier to catalog and write papers on algorithm solutions than relationship management solutions. The first is more "labbable". It seems easier to experiment on and study complex operations on a few items than simple or semi-complex operations on lots and lots of items. This is probably one of the reasons we don't yet have true AI. The neuron is relatively easy to model by itself. However, there are just too many of them interacting in the human brain to sufficiently study how they work together.


''The laws of math and physics also have the nice property that the PointyHairedBoss can't change them upon a whim.  BusinessLogic is tricky precisely because the rules change, on a regular basis.''

That is true. One is often modeling marketing, legislative, and internal mandate "rules" rather than laws of math or physics. As far as marketing rules, often the users don't know how to specify them precisely, and it is the developer's job to try to turn vague notions into TuringComplete algorithms. Sometimes the developer finds contradictions and must find a way to explain the contradiction in terms the marketing expert understands. See JustMakeItRight.

--------

Domains where one is "'''closer to the hardware'''" are sometimes considered to be where RealProgrammer''''''s go, while biz apps are for the the allegedly "less skilled" ones. While I agree it takes a lot of specific skill to write resource-efficient software and tools, it personally is not my bag. I like powerful, abstract, compact commands/languages/tools/API's that do a lot with only a little bit of code. This is one reason why I dig CollectionOrientedProgramming: I don't want to have to reinvent and deal with the nitty-gritty of CollectionOrientedVerbs: I want to command "Join A to B!", and have the collection engine do all the joining for me.

I liken my preference to commanding an army: you move the model pieces around the board, and lower-level generals and their staffs take care of the details for you. Thus, I didn't focus on biz apps because I am too dumb for hardware-centric, but because I want to '''play general'''. Whether one of these domains is less skilled, more skilled, or different skilled; I refuse to give a value judgement at this point. --top

------
See also: AreBusinessAppsBoring, IsEmbeddedBehind
--------
CategoryBusinessDomain
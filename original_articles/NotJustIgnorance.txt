There may be some very PositiveReasonsForWaterfall that explain the persistence and dominance of WaterFall software development since the sixties.  Please feel free to supply these reasons (said in the true spirit of MrVoltaire: "I disagree with what you say Sir, but I would give my life for your right to say it".)

Apart from the positive reasons I've suggested that the negative ones probably come down to one or more of IgnoranceFearPrideOrFraud.  The following story convinced me in the eighties that whatever the exact mix was, what we were facing was not just ignorance.

----

TomGilb had the opportunity to give a presentation in the mid eighties to senior managers from one the largest software houses in the UK.  Yes, I remember the name quite well but even after fifteen years it doesn't feel either right (breaking Tom's confidence) or safe to publish it on Wiki. (Note the implications for more recent or more damning testimony.  Despite the strengths of Wiki we're only getting a fraction of the full picture here, let me assure you.)

Tom convincingly presented a completely new way for this company to develop software, a safer, more enjoyable way that would lead to much greater customer satisfaction.  He no doubt mentioned inspections and metrics (because he always does) but the heart of his message was something called EvolutionaryDelivery, a radical alternative to waterfall that you can learn lots about on Wiki, especially its latest precocious offspring, ExtremeProgramming.

One of the most senior managers came up to Tom afterwards.  "That was great Tom.  You are absolutely right on every point. The trouble is we're making far too much money the current way."

One consequence of such decisions is that Tom Gilb did not become as well known as some other software pundits in the 1980s.  Nor did the term Evolutionary Delivery.  

Now that ExtremeProgramming has arrived none of that matters right?

Think again.

--RichardDrake

'''Problem: '''
If an army platoon is issued weapons and put together after advanced infantry
training, are they now a fighting unit? If nine experienced baseball players
are handed gloves, bats, and a ball, are they capable of playing as a team
right away?
If an experienced software development team is run through training in
relevant technology, are they immediately capable of employing it effectively
''as a team'' ? Would you risk your company on it?


'''Context: '''
A team of experienced software developers is formed and then put through
training together in tools and technology that are relevant to an upcoming
project or to prepare them for future development deemed essential by
business research. TrainHardFightEasy has been taken to heart.


'''Forces: '''
	*Training is only useful if it has been applied at least once
	*First mistakes are usually the largest
	*"What? You mean we spent $$$ on training and they're not ready yet?"
	*The higher the stakes, the more preparation pays off

'''Solution: '''
Build a trial project together using the new learned technology. Make it a 
real project, but a small one of no profound consequence. Call it "pre-season."

'''Resulting Context: '''
The team learns to manage the dynamics of working together using the new
tools and methods recently learned per the TrainHardFightEasy Pattern.
The team is now battle-tested and motivated to tackle some real-world 
work. 

'''Rationale: '''
Training alone will not an effective team make, or even a single engineer
create. Application of knowledge in a real setting is essential. A brief
project of some weight and consequence, but not show-stopping value, should
be given to the team to shake out their stiffness with the new lessons. It
gives a team time to hit its stride, learn to turn that double play cleanly,
set up an ambush, implement clean code meeting the agreed-upon interfaces.

'''Related Pattern:''' CasualDuty

'''Author: '''
DonOlson 95/09/14

----
CategoryProject


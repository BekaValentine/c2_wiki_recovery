What are your observations on how most mainstream developers use OOP, not just Wikizens? My observation is that they generally like pre-existing OO frameworks for networking protocols, GUI's, etc., but generally don't build significant OOP frameworks of their own. Of course this often depends on which definition of OO one is using, but they generally lean toward a procedural style. Most "OO purists" would wince at what is being produced. For example, there would be a lot of IF/Case statements instead of polymorphism, and classes are used like procedural modules instead of ResponsibilityDrivenDesign. In otherwords, OO tends to be "read-only" in practice. 

''Most any type of programming tends towards "read-only" in practice''

[maybe I've just got a mental block, but I don't see how the phrase "read-only" arises in the above.]

[''My guess is the original contributor means that mainstream OO programmers are happy to use (i.e. "read") pre-existing OO code, but the code they write is not OO.  This assumes that the people writing the "pre-existing" OO code aren't a significant part of the mainstream.'']

Isn't it generally the case that formal tool writers are smaller than the set of tool users? Otherwise, there is little or no economies of scale in making and buying such tool. (Maybe "economies of scale" is not the right term, but the alternative is not coming to me yet.)
----
That they dont actually and most code is actually C code put into a class, most not separated properly.
----
" but generally don't build significant OOP frameworks of their own" - Yes. They wouldn't know where to start.

To answer the premise of this topic in a word: Badly.
- Peter's son.

[From WhyNotUseEmacs]

''One of the strongest arguments for emacs has been made by Borland, who bought and then buried this editor that many here were so happy with. There is no risk of this ever happening to emacs...''

[Yes, it is sad that Borland - not the best run software house in existence - screwed up the Codewright series by putting it out to pasture. However, after an editor reaches the level of perfection attained by Codewright there is very little left to do, so it's kinda hard to sell new versions. '''Hmm.''']

I don't use EmacsEditor or Xemacs because there is '''CodeWright,''' Blessed Be Thy Name. ''"Amen," said the congregation.''

Having used just about every text (and straight to disk) editor on the planet in the last almost 30 years I can say without qualification that Codewright beats them all. It is a stable and very well supported professional product that has all the editing features I can ask for and many others as well. If I am too lazy to remember the contortionist's key combo for a particular operation, I can map it to a button on the toolbar. I can create my own operations as macros or create my own primitives via C or C++ and add them into the function library. Codewright loads very quickly, searches very quickly, saves very quickly, and does everydamnthing else it does very quickly as well. And now that Codewright is published by Borland I expect things to improve even more, if that's possible.

''That's very funny in retrospect. I expected the same from Borland, but they killed it instead. I would love to see it picked up by another company, but it looks grim.''

They tell me that Emacs is supported by professional firms on a contractual basis. That's great, but I need a complete shrink-wrapped product that I can tell the client to buy. I need something plug & chug. Codewright has always been such a product and will continue to be so.

I was forced to use Xemacs and Emacs again on a gig a few years ago where I had no other option (government job; no other editors on the campus, ya here?!?). My experiences with Emacs as the End All, Be All pseudo-editor gave me the creeps. The only good thing was that I could edit text with this mess. Oy. -- MartySchrader

First of all, a 100% open source system is a necessity for me. Second, Emacs does have professional support, several firms offer support contracts. Emacs allows creation and addition of macros and primitives as well. You can put any of them on the toolbar. Emacs loads quickly on my PC, and can lazily load libraries if you want more load speed. If you want user support for Emacs, come to the #emacs channel on irc.freenode.net and I personally will answer your questions. As for renowned vendor support, I don't trust vendors, not the least little bit.

Also, Emacs has a nifty incremental parser generator and yacc/lex clone called the Semantic Bovinator. You can create a full blown parser for any language you choose by defining a BNF file. (Scheme, Elisp, Java, C, C++, Erlang supported that I know of.) -- ShaeErisson

''Well, I can't speak to stability on Windows, since I deploy on Windows but don't write on it. I do, however, have one particular instance of emacs here that has been up a little over four months. The last time I actually had an emacs crash (with daily use) was in '97 or '98. So at least on my platforms it is pretty stable. The idea that emacs is some sort of non-professional toy is laughable. Fully half of the best professionals I know swear by it (and the other half hate it...). ''

''On the other hand I've met 'professionals' whose tool of choice was notepad (so perhaps you have something there). Emacs certainly has its warts, but it gets some things extremely right. In a sea of half-assed editors tacked onto IDEs it is still plugging away extremely productively. I've tried codewright; It is ok, but that's about it. I had a complicated set of merge-and-verify procedures for a particularly bad in-house revision control system at the time. Adding support for this to codewright was a pain and then some. The macro support was so-so, it didn't do regexes properly (or at all, I forget now), and I finally had to fall back on C which is a terrible extension language. Oh, and at least at the time, it couldn't even do syntax highlighting correctly. I filed a bug report against it and they replied that 'doing it properly was too slow, so we won't bother'. Professional, was that what you called it? It was zippy enough, but then again I haven't had a real complaint about editor speed in ten years, it just isn't an issue. ''

''Extensibility in emacs was vastly superior, so that wins out in the end for me. Not that I wouldn't like a better emacs, I just don't want to write it. I don't really care if my editor is free or not, but I really got tired of people trying to sell me something that couldn't do 1/3 of what my current editor did, but could do it fast. Certainly there could be a better editor out there now, I haven't looked in ages. It would have to be pretty good to make it worth retraining my fingers. And a few nifty built-in features don't mean squat compared to proper extensibility. Codewright isn't it, not even close. If it's out there, I've never seen it.''

Gee, I don't know what version of Codewright you were trying to use, but I have been using it pretty much continuously for the past half dozen years or more and it's been pretty stable for me. Version 7 doesn't have any bugs at all that I have been able to uncover, although there were some minor problems in the past. Codewright's extensibility is pretty flexible, but I haven't had to use it much. The latest version needs no extensions at all for me to use it as is. Codewright's use of regular expressions is dead on and flexible as well. Macros always perform as per expectations. Syntactical coloration is ''nearly'' perfect [correction made 24 Mar 03; some <SCRIPT></SCRIPT> text in HTML pages doesn't color quite right]. I have never seen some of the things you are complaining about.

Perhaps the denizens of Emacs aren't quite the same SmugLispWeenie''''''s that they were a few years ago. (Somehow I kinda doubt that; these folks were proud of their independent, do-it-yourself heritage and were very quick to deride anyone not willing to invest tons of time and effort into developing their own Lisp stuff.) Perhaps Emacs has evolved - or mutated - into a Higher Life Form. Whatever. After my experiences I am not willing to invest any more of my time into integrating Emacs into my tool set, particularly when Codewright does it all, does it correctly, and does it right this very moment. Too bad; Emacs could have been a nice tool to use.

I have used a text editor of one type or another just about every day of my life for the last twenty-five years or more. Codewright remains the best thing I have ever used in all that time. Emacs is somewhere in the top twenty or so, but probably not in the top ten.

-- MartySchrader

''Well, experiences differ. When I used Codewright (see above) it had trouble with syntax highlighting (this would have been about 95 or so), and was a pita to get it to indent properly (for an inhouse language). Out of the box it wasn't even close to usable for me. I need extensibility, because I often work on oddball projects and want seamless integration.''	

''CW's macros were ok, but weak compared to what I could do in emacs. C is a terrible extension language. Lisp is an excellent extension language, so emacs wins big there (even with elisp). Not that most of my coding has unabashedly been in c. It is very good for some things. Prototyping and extension aren't two of them. I have only been using an editor every day for about 15 years, so you may well have used many more than I; however Codewright wouldn't make my top 10 (and I did use it daily for about 6 months, I had no choice). It was nice to see a commercial editor that understood that everything should be modifiable/extensible, rather that the sort of half-assed "product" tacked on to most IDE's etc., however CW just didn't cut the mustard for me, and others I know. 

''Glad to hear that it worked out so well for you. It's a shame you seem to have had a bad experience with some emacs users, but that really isn't relevant to how good a tool it is. By the sounds of it the main difference between our experiences is in extensibility. You don't use it, so you don't care much. For me, however, it is crucial. I have my editor smoothly integrated with a half dozen weird in-house tools and other bits of strange legacy code. No editor is going to work like this out of the box, because almost nobody else has the tool-chain. So being able to extend the editor in essentially arbitrary ways is a minimum requirement, for me. I should note that there are many things I would change about emacs, I certainly don't think it is anything near perfect. It is, however, pretty damn good, warts and all.''

AhHa. You last used Codewright in 1995, back when I was still using TSE or Qedit or some such thing. I didn't start using Codewright until about '96 or '97. I have used it continuously in one form or another since then. I even tried Brown Bag, Crimson, S''''''uperEdit, BRIEF, and a handful of other editing products. They all had nice features, but none came close to matching Codewright's overall performance and flexibility. Also, Codewright has undergone the kind of mutation that you would expect from a leading commercial product - they stole everybody else's ideas and integrated them into Codewright.

I last used Emacs in 1999 [corrected back again] at a government gig. It was an okay editor, but it didn't have anything like the kind of built-in feature set that Codewright has. When I asked about these "missing" features - a lot of which were fairly common in the PC/Windoze world - the Esmacks crowd started bitch-slapping me all over the newsgroup. Oh, well. Use the tool you feel comfortable with. I have absolutely no need to investigate another editing product ever again; this one does everything I could ask for, does it very quickly, and does it all without any hiccups. NuffSaid.

-- MartySchrader

Emacs is multiplatform, Codewright is not. NuffSaid. Just for kicks, take a look at SdMagazine's website and look over the list of Award winners from years gone by. You'll find that few (if any) of the companies listed are still around. For example, you can't even get SageProfessionalEditor any more (not even from the 3 companies that subsequently bought and sold it.) Emacs is still around, stronger than ever. I hope Premia makes it (I cheer for the underdog). Personally, I use VIM because it is the only other OpenSource editor with as large a user community. I don't look for support from a company. I look for a strong user community. And nothing leverages a large user community like OpenSource. -- RonPerrella

Sorry, I could give a pile of beans about cross-platform this or that. Back in my UNIX daze I used to download a pile of source code to a PC just to do editing, then Kermit everything back up to the UNIX box for the compile/link/debug cycle. It was easier and faster to do it that way than to attempt using the horrid UNIX tools I had available to me. These days all my clients develop on PC platforms, mostly Win2K. If they are worried about cross-platform capabilities then they sweat the UNIX side of it after developing for the Windoze world. That's the name of that tune. -- MartySchrader

''That's funny, we do it the other way around. Develop on unix and deploy (some things) on windows. The win32 tools just don't stack up in our case, and being able to wipe the XP boxes whenever they get crashy is a bonus. My actual development machine hasn't been booted in a little over a year (sparc). Now a fair amount of the pain is due to impedance mismatch between our development and bog standard win32, almost certainly. Things might be different if we were a Java/C++ only shop or whatever, or did much in the way of 3-banana interface generation via click-and-hope. We do have to do a bit of windows specific devel of course, but it is at end-of-cycle, and we avoid most blatant braindamage (e.g. MFC) completely.''

Well, goodie for you. Check the industry publications and I think you'll find that your shop is in the minority. Actually, a quick pass at the want ads should do it. In the embedded world UNIX is pretty damn near dead. Still able to fog a mirror, but that's the only way to know it's still there. -- MartySchrader
----
I've been using my version of CodeWright v.5.1a - ca 1996 - on my Windoze machines for years, and I'm perfectly happy with it. I long ago gave up trying to keep up with upgrades, because they seemed to add more and more cruft that I don't need or want, and because what I have works just fine. When I'm on unix, I use emacs ('''not''' vi!). If I'm going to do any "cross-platform" stuff, it will be to capture the best of something - particularly UI. In my experience, this eliminates virtually all unix tools.

''Yeah, well, I decided to keep up with the new versions because they '''do''' occasionally find and squash bugs. Plus, the two times I have suggested changes to Codewright over the last 8 years or so they have both been implemented in the next version. Maybe I'm a genius, or maybe enough people asked for the same change that they decided to do it. At any rate, Codewright is never "too much" with the new features. Everything they add is fully configurable, including taking it all the way out if you feel the need. -- MartySchrader''

I just checked the CodeWright website again. At $299.00 (new) or even at $99.00 (upgrade - who knows whether I'd qualify), I just don't see the value for me. I don't have even $99 worth of pain with my old version - which, by the way, is the way I think a product is ''supposed'' to work. I'm very happy with it, and I'd encourage anybody who has the money to go for it.
----
Emacs is portable to a new job - on Windoze, all you have to do is copy it (and any customizations you like) to the hard drive or network drive, and run it. This means that when I go to a new job, I don't have to convince them to buy me "my" editor or suffer through learning another one.

''Codewright has config files and stuff that can be copied around. You can also just copy everything from one directory to another (I've done this), but you miss a lot of the system hook functionality if it isn't installed properly. Yeah, the client has to buy a seat for you, but what's another three bones one time on top of the three large or so they're already paying for my services every week?''

I like using the same editor at home and at work. I don't want to pay $300 for an editor for home use. Currently, our department standard is CodeWright, and I install and support it for all the other programmers in our department, so I have a pretty good idea about what CodeWright can do. Even so, I still prefer emacs. In fact, when I watch the others using CodeWright, I get frustrated at how long it takes them to do some things that are so quick in emacs.

CodeWright is a good programmer's editor, and you can be reasonably productive using it without a lot of time invested in learning or customizing it.

Emacs is extremely powerful, but you should get a good configuration from someone, and you must spend some time learning it to become really proficient. Preferably, you should learn Emacs lisp so you can really customize it.

''If your crew are experiencing anything in Codewright slowing them down it has got to be their newbieness. Anything Emacs can do Codewright can do, and then some. And as far as learning Lisp so that your crew can extend Emacs, how about using C/C++, Basic, or a handful of other compiled and interpreted languages to extend Codewright?''

Actually, both editors can do the same things - both are extensible with Turing complete languages. (Except, I don't think Codewright runs on Linux or HP-UX, which I also use).

Also, the problem with their speed isn't so much their newbieness (some have used Codewright for many years). It's more that they don't spend time learning what it can really do, and we don't have control over the extensions (they're handed to us by another department). They also tend to use only the least common denominator functions of editors (you know, cut, copy, paste, and find/search) because they have to deal with so many other editors (Word, Outlook,...).

My opinion is still the same: if you're only going to edit on PCs, and you don't want to spend a lot of time learning how to customize editors, Codewright is a good choice. If you want to use the same editor on multiple OSs, and/or you don't mind spending time customizing an editor, emacs is a good choice. Both are appropriate for their intended users. HorsesForCourses.
----
People used to use Codewright here at the Company I work for. As I came here and they saw how efficient one can work with Emacs, many did the switch and started to enjoy things like 'sort-lines' or 'shell-command-to-region', which were not available to them before, so they told me.

''Yes, they were. The users simply didn't know how to use Tools | Filter or other available hooks.''
----
CategoryComparisons, CategoryEmacs
We are engineers. By nature, we are control freaks. We try and hammer out methodologies for programming (we get StructuredDesign, ObjectOrientedDevelopment, ClientServer, DistributedArchitectures, etc).  We also try and hammer out methodologies for UserInterfaceDevelopment.  By doing this, we end up ignoring the user.

Sure, we have measured what the user will want. We have done studies suggesting what a user really does. We read  psychological studies. We study good software. We KNOW what the user wants.

And... when we deliver the software, the user is not amused. He makes ridiculous demands, suggest wild changes that will break our elegant designs.  Half the time the user is wrong. Half the time the user will ask you to make a change, you will make it, and then the user will ask you to change it back.  But, sometimes the user is right.

I bought a new town house a few years back.  I even watched the developers build it.  They had it perfectly engineered. It was from a pre-conceived plan that was based on years of study about what a person wants in a town house.

Well, I don't like the placement of my kitchen window, and I don't like the angle at which my living room ceiling vaults. I couldn't have suggested a change when they were building it and I can't make the changes now.  My house was perfectly engineered.

My next house (let me dream, please) will not be so perfectly engineered. I will work with the architect and builders and try to get the windows right.  I want to walk around the house and feel the space before they finish building it. I want to see how the ceiling looks and suggest modifications.  I want to make sure my art room catches the right amount of light. Of course, it will cost me extra money. And hopefully the developers won't let me force them to make stupid changes, but.... you get the idea. -- ToddCoram
-----
CategoryInterface
Moved from WikiIsForPeople: 

Is it as possible to RefactorMercilessly on Wiki as with code? I'm always afraid of stepping on someone's edits and offending my peers.

I have the impression that people are very attached to their words - that they are not thinking of Wiki in the same way they think about ownerless code. I think that ownerless code - the lack of ego attached to what you write - is a requirement for code refactoring, because nobody wants to make their peers mad. For that same reason, I think that the "ownerless" property is a requirement for Wiki refactoring. Or at least for me to do it. My fear isn't actually of goofing up the refactoring - it's of making my peers angry. 

''I'm a slash-and-burn farmer when I refactor. The more code I get rid of, the better I feel. I can just imagine the monolithic page I'd reduce to a paragraph, and the outraged cries that would result. I'm not even sure that it would be good for Wiki to have these pages boiled down. Who am I to decide?''

A little suggestion: write that paragraph, place it at the top of the page, and call it a summary. People who are mildly interested can read just the highlights, while those who really care can read the whole thing. Some people don't like boiled pages - I want my Wiki deep-fried with extra ThreadMode. -- CliffordAdams

Well, WikiIsForPeople, and people have some needs that do not apply to compilers and interpreters of code. For instance, the need for recognition - it's very powerful and difficult to do without. Witness the persistence of threadmode on wiki; even those who disparage it practice it on occasion. I have found myself wanting to be recognized for some of the pieces I've contributed unsigned, CommunityLifeCycle for instance. I'm not sure why DocumentMode is so difficult for us, although I must say that a balanced, well-factored page is an unalloyed pleasure to read. Maybe because it's so difficult to achieve? -- LarryPrice

Several of the great DocumentMode authors have written larger documents. They call these documents "books". :-) 

''Very, very good points, and well said. I was just thinking, when I refactor code, I do it in little bitty pieces... I don't know how to do it any other way. I think I've been approaching Wiki refactoring from the wrong angle. What if I pretend it's code and just make little improvements here and there, over and over, until it's good?''
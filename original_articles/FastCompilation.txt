FastCompilation is a desirable attribute for any programming tool, but especially desirable if you prefer the RapidApplicationDevelopment style of programming.   Even better, some would say, is to use an interpreted very high level language, which gives you the benefits of NoCompilation.

BorlandDelphi for example, can incrementally compile and rebuild only changed parts of a program in less than five seconds, in my experience. The important distinction here is that if you have to wait for a build in order to test a feature, you will tend to do a lot of development, and then a lot of running, instead of doing a lot of quick changes, and then a lot of quick checks to see if your application still works properly.   FastCompilation and NoCompilation enable the IncrementalMethod of development, a key part of the RapidApplicationDevelopment mindset.

See RapidApplicationDevelopment for the context that this remark refers to.

ExCode for MacOsx has a feature called FixAndContinue. It's pretty decent if you are one of those kinds of developers who lives in the debugger.  I'd still like to see what an IDE built with test-first development in mind would look like.

The requirements for fast compilation by develop team and release team are different.
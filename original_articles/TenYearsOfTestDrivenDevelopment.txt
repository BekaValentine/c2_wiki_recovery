MichaelFeathers and SteveFreeman are working on a talk reviewing what must be about 10 years of TestDrivenDevelopment. What do you think were the significant moments in its history? Here are a few strawman moments to get started with. I'm sure there are more, and that there's some interesting pre-history.

Before:
* 12000 BC : OgTheVenerable, holding a raw piece of meat, describes the process of creating fire to his fellow cavemen, setting their expectations and a prescription for his own task.  The piece of charred meat he held in his hand afterward is widely regarded as the first passing test case.
* 1815-12-10 to 1852-11-27 : AdaCountessOfLovelace creates the need for computational TDD unawares: "She used the information and formulas supplied by Babbage and determined where the calculations would go into the machine and where the answers would be displayed. Since Lovelace had no machine on which to test the program, printed editions of her "Notes" available today contain some errors." -- http://www.bookrags.com/research/lovelace-ada-byron-king-countess-of-csci-01/
* 1959 through 1963 : programmers for the Mercury Space Program use a form of TDD while programming punched cards

1989:
* GerryWeinberg writes tests first on punched cards (http://secretsofconsulting.blogspot.com/2008/12/how-we-used-to-do-unit-testing.html)
* KentBeck reads about punching the output tape.
* 1989 - WardCunningham writes Fit-like testing framework, GaryGoldberg writes tests first, http://fit.c2.com/wiki.cgi?FrameworkHistory

1990:

1991:

1992:

1993:

1994:
* 1994 : KentBeck writes first version of SUnit test framework in 1994 (letter from Kent at http://shebanator.com/2007/08/21/a-brief-history-of-test-frameworks/ )

1995:
* 1995 : WardCunningham includes testing pattlets in "Episodes Pattern Language" based on Wyatt experience, 1995, http://c2.com/ppr/episodes.html
* 1995-10 : Kent demos TDD for WardCunningham at OopsLa Austin October 1995 (first experiments a year or two earlier)
* ExtremeProgramming concepts start to leak out of the C2Project
** RonJeffries and other "Internet Pirates"  ;->  effectively take over a public Wiki intended for discussion of DesignPatterns, and argue with everyone else the premise that ExtremeProgramming (including TDD) is the answer to everything.  ;->

1996:

1997:

1998:

1999:
* 1999-07-08 : RefactoringImprovingTheDesignOfExistingCode book.
* 1999-10-05 : ExtremeProgrammingExplainedEmbraceChange book.
* 1999-12 : The first TDD tutorial (where?) (ObjectMentor XpImmersionOne December 1999?)
* 1999-? : John Nolan's “No Getters” challenge at Connextra.  [See slide 15 at http://www.slideshare.net/deimos/tim-mackinnon-agile-and-beyond ]


2000:
* 2000-08-16 : JUnit.org website launched by ObjectMentor, editor ErikMeade (16 Aug 2000)
* NunitFramework registered on SourceForge (02 Sep 2000)
* JavaUnit registered on SourceForge (25 November 2000)
* Kent Beck and Erich Gamma write the paper "Test Infected". Around the same time that JUnit first appears.
* XpTwoThousand conference
* The first MockObject''''''s paper

2001:
* 2001 : NatPryce writes a dynamic mock object library in RubyLanguage (2001), demos it at the ExtremeTuesdayClub. Eventually ports it to JavaLanguage, open-sources it. It is extended and refactored by Nat, TimMackinnon, SteveFreeman, JoeWalnes and several other contributors into JavaMock. 
* XpTwoThousandAndOne conference
* TimPeters makes a DocTest module for the PythonLanguage which, for the first time, integrates code ''documentation'' with code ''testing'', making TDD a '''no-brainer'''.
* ContinuousIntegration and CruiseControl
* ChrisStevenson introduces the SentenceStyleForNamingUnitTests and the TestDox tool

2002:
* BillWake publishes his BillWakeTestFirstChallenge.
* Name change from TestFirstProgramming to TestDrivenDevelopment as part of writing ''TestDrivenDevelopmentByExample''
* ???? : TestDrivenDevelopment page on http://c2.com/cgi/wiki  (oldest version in the internet archive is 2002-04-19)
* 2002-01 : First published TDD book (German): "Unit Tests mit Java" by Johannes Link and Peter Fröhlich (January 2002)
* 2002 : MichaelFeathers writes up the TheHumbleDialogBox pattern, triggering interest in the idea of PassiveViews in TDD 
* 2002-02-07 : Yahoo TDD list (7 Feb 2002) - http://tech.groups.yahoo.com/group/testdrivendevelopment/
* 2002-11-18 : KentBeck's TDD book TestDrivenDevelopmentByExample (18 Nov 2002)
* Builtin JUnit support in EclipseIde

2003:
* 2003-04 : ''UnitTestingInJava: How Tests Drive the Code'' by JohannesLink and PeterFrohlich (April 2003) [ISBN:1558608680]
* 2003-07-12 : DaveAstels' TDD book (12 July 2003) - ''TestDrivenDevelopmentaPracticalGuide''
* 2003-08 : BrianMarick proposes using the terminology "checked examples" instead of "tests". (August 2003) http://www.exampler.com/old-blog/2003/08/22/#agile-testing-project-2
* IndustrialLogic reports successful client engagements using StorytestDrivenDevelopment to ExtremeProgramming@yahoogroups.com, soon after added as a standard practice to IndustrialExtremeProgramming
* MartinFowler's "State vs Interaction Testing" writeup
* ObjectMother paper

2004:
* 2004-03-02 : RonJeffries ExtremeProgrammingAdventures (2 March 2004)
* 2004-07-24 : Testing support in RubyOnRails (2004 July 24 - version 0.5.0 is the first instance on RubyForge). Rails very quickly becomes RubyLanguage's KillerApp, and introduces hordes of neophytes to both Ruby and TDD.
* 2004-07 or 08 : StorytestDrivenDevelopment article in StickyMinds, (July/August, 2004) - http://industriallogic.com/papers/storytest.pdf
* 2004 : FrameworkForIntegratedTest 1.0-RC1 Released (sometime in 2004)
* 2004 : CodeCompleteTwo by SteveMcConnell declares TDD to be one of the most significant advances in a decade (2004).
* 2004-07 : JoshuaKerievsky's ''RefactoringToPatterns'' published, (July 2004), includes definition and examples of Test-Driven Refactorings.  
* 2004-07-15 : JbRainsberger's  ''JunitRecipes'' (15 July 2004)
* 2004-07-08 : MichaelFeathers' ''WorkingEffectivelyWithLegacyCode'' (July 8th, 2004) 
* MartinFowler's Mocks aren't stubs paper: http://martinfowler.com/articles/mocksArentStubs.html (which has been changed!)  old version: http://web.archive.org/web/20061231171119/http://www.martinfowler.com/articles/mocksArentStubs.html  see http://web.archive.org/web/*/http://martinfowler.com/articles/mocksArentStubs.html

2005:
* 2005-02-24 : JeffLangr's ''AgileJava'' (24 Feb 2005)
* JoeWalnes blogs his "assertThat" technique, using JavaMock's matchers to make assertions.  This is now implemented in JavaUnit.
* 2005 : Microsoft attempts a new definition of TDD: http://weblogs.asp.net/rosherove/archive/2005/11/23/431341.aspx (2005)
* DavidSaff's paper on AutomatedContinuousTesting
* Dave Astels' blog post about BDD: A new look at test driven development (http://techblog.daveastels.com/2005/07/05/a-new-look-at-test-driven-development/)

2006:
* Dan North's blog post: Introducing BDD (http://dannorth.net/introducing-bdd/)

2007:
* 2007-07 : IeeeSoftware Special Issue on TestDrivenDevelopment (July 2007)
* 2007 (late) : Mockito (http://code.google.com/p/mockito/) uses dynamic proxies to implement Testing Spies (vs Mock) (late 2007, I'd guess)
* LasseKoskela's TDD book  [ISBN:1932394850]
* 2007-11 : BehaviorDrivenDevelopment (BDD) (JBehave DanNorth, ChrisMatts) (RSpec  StevenBaker, now DavidChelimsky) (easyb Nov 2007 http://www.easyb.org)

2008:
* 2008 (early) : PhlIp invents AssertYinYang (but if he can't explain it to his colleagues he's probably not going to be able to explain it to the industry...;)
* Gerard Meszaro's classification of mocks, stubs, fakes, etc.
* AcceptanceTestDrivenDevelopment (ATDD) - (StorytestDrivenDevelopment)
* Concordion 1.0 as ATDD framework released (http://concordion.org)
* 2008-03 : FirstPatentAboutTdd (march 2008)
* 2008-08 : Brian Marick declares ATDD to be a failure (aaftt workshop, August 2008) 
* 2008 : ScottAmbler releases a survey showing less than 1/5 of agile teams practicing TDD http://www.ambysoft.com/surveys/modelingDocumentation2008.html

2009:
* 2009-01 : JoshuaKerievsky declares Brian Marick to be misinformed (in bed with his laptop, Jan 2009)
* AlanFrancis shouts at Brian and Josh "You kids play nice!  Don't make me come in there !"


----

All fun aside, what I said was "In sum: compared to doing exploratory testing and TDD right, the testing we’re talking about has modest value. Right now, the cost is more than modest, to the point where I question whether a lot of projects are really getting adequate ROI. I see projects pouring resources into functional testing not because they really value it but more because they know they ''should'' value it." My workshop position paper: http://www.exampler.com/blog/2008/07/09/position-statement-for-functional-testing-tools-workshop/ "Question" is not the same thing as "declares". I'd be happy to see this reverted, Josh. -- BrianMarick

Hi Brian. I'll have to read your report. In my experience, it is as easy to mess up TestDrivenDevelopment (TDD) as it is StorytestDrivenDevelopment (SDD).  Also, I've definitely learned that some work on User Stories proceeds better from straight TDD and some does better from SDD.  In the past year (2008), I've found that SDD is way way better when we use a normal programming language and endeavor to make our automated storytests human-readable, rather than wasting tons of time on fancy tools or languages. 

Also, there are two parts to this stuff -- Storytesting and StorytestDrivenDevelopment.  Storytesting is simply coming up with acceptance criteria for stories -- it can be done on a card, a whiteboard, a document, etc.   SDD is about automating the storytest first, before any other programming begins.  I know that Storytesting hasn't failed -- it is an excellent way to communicate between customers and developers.  I do know that some folks (including myself) have gone down some dead ends with respect to how they practice SDD, yet the value I've seen from it is there and has helped us push further into an efficient practice of SDD.

My only regret is that we haven't adequately articulated the art of SDD.  That's partly because we're still learning quite a bit!   Hopefully we'll produce something on this soon.  --JoshuaKerievsky


If you want all the details on my cost/benefit rough-guess, see http://www.exampler.com/blog/2008/03/23/an-alternative-to-business-facing-tdd/ I mention this because the short blurb I linked to might make it seem I'm down on storytesting, which I most definitely am not. What I question is the value of going from the whiteboard discussion to automated execution. -- BrianMarick

----
CategoryTestDrivenDevelopment JanuaryZeroNine
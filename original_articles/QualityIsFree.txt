''Quality Is Free'' A book by Philip B. Crosby 

http://images.amazon.com/images/P/0451625854.01._PE_PI_SCMZZZZZZZ_.jpg
[ISBN: 0451625854] "Quality is free. It's not a gift, but it is free." In this book, Crosby introduced the concept of a "quality management maturity grid", from which the name "maturity" was to be subsequently lifted by WattsHumphrey (SEI) in his landmark attempt to apply Crosby quality theory to software development through what eventually became known as the CapabilityMaturityModel (CMM).

More than the word "maturity" was lifted, the entire grid (see the appendix of the book) was lifted to become the basis of the CMM 5 step program.

GeraldWeinberg also adapted the "maturity" framework of Crosby, sans the offensive "m" word, to describe software management cultures in QualitySoftwareManagement. It's interesting to contrast the usages to which this initial model was put. Crosby thought in terms of management attitude. Weinberg thought in terms of software culture, closely linked to management attitude as well as global attitudes. SEI departed largely from attitudes and dwelt on organizational behavior.

Few people seem to appreciate that "maturity" in any of these contexts, has nothing to do with people acting "grown up" and entirely to do with a specialized form of statistical process analysis. Maturity implies little more than a range of predictive power, given a process to observe and measure.

The QualityIsFree message resonates in these parts through alternate expressions like DoItRightTheFirstTime, and others.
----
Second (deprecated) definition:

The naive view of quality is that you can sacrifice it as one of the FourVariables to achieve more of one of the others -- time, cost, or scope. In reality, improving quality up to some threshold typically results in less time, less cost, and more scope. Beyond that, it begins costing again. Maybe there is a QualityElbow?

"Quality is Free" stands in contrast to the conventional wisdom that you achieve quality by testing and throwing out or fixing defects. With that model, you achieve quality by testing, fixing and discarding more -- at higher cost. The newer model is to do it right the first time: If you don't put the defects in, then you don't have to pay to find and remove them.

One tactic for achieving this level of quality is to CodeUnitTestFirst.

This is a possibility, but that is assuming you are using testing as the determination that a piece of code or a system meets requirements. For designs, documentation, and code I far prefer the FaganDefectFreeProcess to testing of any kind. -- MartySchrader
----
'''From the XpMailingList - regarding internal quality:'''

I think you pay for quality up front, but it's an investment that pays off -- in the same way that a $50 Estwing hammer is initially more expensive that a $10 K-Mart hammer, but cheaper in the long run. -- bchambless

''I believe that quality, for all practical purposes, '''never''' takes longer or costs more than non-quality. Working without the quality-generating behaviors will hurt us in a matter of weeks or days, not a matter of months. -- RonJeffries''

Generally speaking, I think good code takes longer to "write" (read that literally as "type into the editor"!) than crummy code, but you get that time back quickly because testing goes faster, and there's less debugging. This is more obvious with the continual testing of XP, while in a waterfall scene, it's easy to miss. -- bchambless

''So low quality will in general come back to hurt you before the release. That is, before you get the pay-off from any time saved. -- JohannesBrodwall''

No, I don't believe that is what is meant. It is no more expensive nor time consuming to write high quality code than low quality code. It costs no more to write code of higher quality than absolutely needed than to write marginal code. My observation has been that when someone is having difficulty writing a piece of code and taking a long time to do it, the result is usually low quality code. Unfortunately, the opposite is not always true, writing code quickly is no guarantee of higher quality. -- WayneMack
----
Quality of what? Quality to who?

''Maybe we need a ModelOfQuality to discuss this?''

Which is why Crosby precisely defines "quality" as "conformance to requirements". This avoids the subjectiveness of the word, especially in that abstract "quality of life" sense. -- AnthonPang

Mr. Crosby also made the determination of "conformance to requirements" the responsibility and the authority of the quality department. This determination is no less subjective, Mr. Crosby just objected to the opinion of the quality department being overruled by anyone else.

'''Objection.''' Crosby ''specifically'' tried to rule out all the subjective elements from quality analysis, ''vis-Ã -vis'' WilliamEdwardsDeming, by applying measurements and Go/No Go testing to the act of quality analysis. His plan was to construct a mechanism for determining if a product met the requirements without any subjective thought at all -- a machine could take the measurements and give you the results. This was not his entire school, of course -- the overall analysis of manufacturing systems has a lot more subtlety than just taking measurements at each stage.

''Mr. Crosby was very explicit in making an independent quality department and certainly did not address automated testing to eliminate a quality department. Where does the Go/No Go decision point come from? It is subjective, based on the Quality department's evaluation of a written specification.''

No, the whole idea is to have measurable quanta to determine quality. Any characteristic used to determine if a product meets requirements needs to meet a certain numeric measurement, ''not'' a subjective analysis.

''This would be hard to derive from any of Mr. Crosby's writings as he is surprisingly mute on the subject of how "defects" are to be determined other than to say the determination needs to be the responsibility for the determination needs to be made by the quality department.

As an aside, one would be hard pressed to use Dr. Deming as support for defect measurement. Dr. Deming felt quality was subjective ("Quality is determined by the user") and concentrated the measurement and control of variation without regard to "defects." Dr. Deming was highly critical of the Zero Defects program and Mr. Crosby was quite dismissive of SPC (especially see ''Quality Without Tears'').''

Once again, '''objection'''. Crosby was, in fact, very vocal about the means by which the Quality Department could determine if a product met quality standards -- through measurement. Crosby expounded at great length about determining what parameters of the product must be measured, how those measurements were to be taken, and how the results would compare to a go/no-go standard. Crosby left no stone unturned in describing what a quality system had to do to make it meet the Zero Defect definition.
----
QualityIsNotFree. Cheaper, yes. Free, no.

''Have you read the book or is this an unfounded opinion? If you read the book you might understand what he means by QualityIsFree''

[I know what is meant; read QualityIsNotFree for an explanation of the statement. It's not a fundamental disagreement with Crosby at all; it's instead a complaint about a common management AntiPattern--the belief that quality ought to spring forth from the head of Zeus without any cost or schedule impacts whatsoever.]

Much of ''Quality Is Free'' is dedicated to an accounting system showing that (using Mr. Crosby's definition of quality, adherence to specifications) costs are reduced and reduced in the short term. I find much to disagree with in Mr. Crosby's approaches, but it seems that his basic approach is centered on reducing costs through improved quality.

From the first chapter of ''Quality Is Free'', page 1.

"Quality is free. It's not a gift, but it is free. What costs money are the unquality things - all the actions that involve not doing jobs right the first time."

"Quality is not only free, it is an honest-to-everything profit maker. Every penny you don't spend on doing things wrong, over, or instead becomes half a penny right on the bottom line. In these days of 'who knows what is going to happen to our business tomorrow' there aren't many ways left to make a profit improvement. If you concentrate on making quality certain, you can probably increase your profit by an amount equal to 5 to 10 percent of your sales. That is a lot of money for free."

This should clarify what Mr. Crosby is saying in his book.
----
''This conversation is as stale as the cover of the book. Non-management types, feel free to chime in.''

Sure thing. I undertook training from Crosby Associates back in the late 1980s and came away with a superior understanding of the meaning of quality, how to define it, how to measure it, and how to achieve it. The late Phil Crosby was a practical genius in getting all of this wisdom packaged into a system for creating zero-defect products.

This discussion is not at all stale. It is as timeless as the sun and the sky and as important now as it was then and will be a century from now. If you don't think that clients need to be told this stuff, loudly and at regular intervals, then you need to get out into the workplace and talk to some of these fools. There are just as many managers needing a TwoByFour across the head now as when Crosby first put pen to paper. -- MartySchrader
----
Being a non-management type I'd like to offer some comment on this topic. For anyone who has read Robert M. Persigs illuminating book, ''ZenAndTheArtOfMotorcycleMaintenance'' it offers a very detailed and comprehensive analysis of the question of Quality, not just from an IT perspective but on a much broader scale. I would recommend it to anyone interested in ''what quality is'' and ''how to apply it''. It is very enlightening. -- PaulAtkinson
----
Anyone who doesn't think QualityIsFree should revere Toyota's vaunted design & manufacturing techniques. --PhlIp (pre 2010;)

''What works for making 1 million identical units may not apply to things that are different each time. Plus, the customer doesn't always know what they want in custom software. Thus, making the right thing may be more important than making the wrong thing right.''

Yeah, see, that's ignorance speaking. "Things that are different each time" are not built through a repetitive manufacturing process. "Custom software," however, is still a product, still in need of quality assurance, and still needs to be subject to the thinking behind making each result of an operation defect free. If the operation under scrutiny is creating custom software then there still needs to be some means of assuring that the result of that operation will not contain defects. How you determine that, measure it, guard against it, whatever -- these things are the hard part of applying the defect free thinking to the act of creating software.
----
''Anyone who doesn't think QualityIsFree should revere Toyota's vaunted design & manufacturing techniques.''

Is this why can't they fix their brakes? Or their throttle control?
----
See: FirstLawOfProgramming

CategoryProcess, CategoryBook, CategoryQuality
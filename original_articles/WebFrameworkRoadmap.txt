An attempt to classify features and tools of "web frameworks" to help one navigate this wiki for ideas.

'''RDBMS'''

* ActiveRecord
** Pros:
** Cons: Hiding SQL completely is a "smell" to some
* HelpersInsteadOfWrappers - utilities that help with the tedious aspects of SQL without attempting to completely wrap it away.

'''GUI Interface'''
* Strait HTML
** Pros: Simple if you already know HTML
** Cons: May make switching GUI's more difficult (SeparateDomainFromPresentation)
*** Counter: Happens infrequently in practice
* Mix of strait HTML and custom functions/methods, such as "drawFormRow" (see HelpersInsteadOfWrappers)
* AJAX:
** Pro: More desktop-like interaction capability
** Con: Immature
* Bypass HTML/DOM entirely
** Java:
*** Pro: Can get a more desktop-GUI-like feel
*** Con: Tends to marry your app language choice to Java. Cross-vendor support still a work-in-progress.

----
Perhaps this should be named WebFrameworkPatternRoadmap or perhaps WebFrameworkPatterns  because it is not a list of specific products, but rather a list of techniques. Name needs more pondering.

''If this page is a list of techniques, I don't think the name should contain "Framework." I think of a framework as a big, honkin' downloadable or off-the-shelf dingus into which you plug some code and some templates and ItJustWorks. -- Eliz''

I don't think they are that simple except in the demos, or in the hands of those intimately familiar with it. But I agree that the title needs work.
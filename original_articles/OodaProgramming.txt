Boyd's OodaLoop is obvious and simple. But no OO program does it. 

* Observe
* Orient
* Decide
* Act

Orientation is what's missing. My method ''observes'' its message, compares same with its state in order to ''decide'', and then goes ahead and ''acts'' by messaging other objects. It may, after the fact, attempt to reframe its state by letting an observer know that it's done something. But this is the exception, not the paradigm.

To lift programming to a higher plane it is this missing orientation step that must be addressed. At present its only embodiment is testing. But this is static and disposable; tests are not used at run-time.

----

What would the orientation stage actually be in a programming context?  I've had a quick google for Boyd and it seems to be something to do with military planning.
----
''See:''
* http://www.mindsim.com/MindSim/Corporate/OODA.html
* http://www.fastcompany.com/online/59/pilot.html
* http://en.wikipedia.org/wiki/OODA_Loop

Every idea needs it's supporters.  And support based on
feelings and emotion or simply the credibility of the 
supporter is reasonably called hype.  
But there is good hype and bad hype. 
Here are examples of pattern hype.  
You decide which is which.


-----------


KentBeck and I are well practiced at promotion.  
We took BruceAnderson to dinner after the first
ArchitectureHandbookWorkshop and worked on him for hours.
Finally he had to say enough, enough, I believe already.
-- WardCunningham

It wasn't me, there was a Jewish ventriloquist at the next table!  I must admit though that I said something with that meaning. -- BruceAnderson


-------------
At the D.C. OOPSLA, I asked everyone in the patterns 
workshop to write
''Ask me about patterns'' on their badge.
I know I'm not the only one that did so. 
Several conference goers told me they had already
had interesting conversations with other workshop
attendees before me. -- WardCunningham


-------------


JimCoplien has argued at PLoP and elsewhere that 
too much hype leads to PatternSkepticism.


-------------


I was at a 2 hour seminar last fall where a number of 
people, including me, were first introduced to patterns.
Some of them were involved in a new project.  It would 
take more fingers than I have (10) to count the number of
people who left talking about how patterns were going to 
be their salvation -- their magic methodology.


Most, if not all, now see them as a useful resource, not
as the only "tool" they need. 
-- BobHanmer

Maybe GettingUpToSpeed was  not convincing enough.  -- MartineDevos


----------

Computer Aided Pattern Engineering (CAPE -- vs CASE) or should it be called Pattern Aided Software Engineering?  I have talked to some people who, in earnest, look forward to the day when we can generate software systems by inputing patterns.  There may be  merit to some of these efforts, but the idea can backfire and cause people to become skeptical of the patterns (remember when expert systems were all the rage and '''was''' AI to many people, or when high level management thought that CASE tools would eliminate the need for programmers).  What do you think about PatternAidedSoftwareEngineering?

- ToddCoram

-------------------------------

Technology sometimes overtakes yesterday's patterns,
so they're tomorrow's automatically generated code.
At that point, they cease to be important to me as
patterns.  The literature becomes less important,
because the knowledge can be captured in a tool.

I can think of examples of assembly language patterns I
used 25 years ago, which compilers know how to handle today
(things like register allocation).

However, I can't name many of these patterns that
have become automated.  And I think the very best patterns
can never be automated, because they call on uniquely
human expertise.

My greatest concern isn't automation per se,
but the opportunism that comes from
automation.  That will give rise to an industry of tool
vendors and lots of PhD theses based on pattern automation.
This all ties into PatternHype:
It's easier to make money
selling a tool than it is selling good ideas.
At worst, these efforts will lead people to do bad things,
as is the case with many contemporary CASE tools.
At best, they sidestep the moral imperatives of human
comfort and aesthetics that are the core of what
patterns mean to me.

See my article,
"Coding Patterns," ''C++ Report'' 8(9), October, 1996.

-- JimCoplien

-----

Part of the bad hype stems from a lot of PatternsMisconceptions (which in turn, lead to a lot of "bad hype" and more PatternSkepticism - its a vicious cycle). I've started a separate page for identifying many of these PatternsMisconceptions. Please contribute to it so we may better help others to understand not only what patterns are, but also what patterns are ''not''.

-- BradAppleton

-----

(your story here)
You're keen on adopting XP, or getting it adopted.

If everything is going well with your software development process, you don't need XP. May you live happily ever after. If and only if some specific things demonstrably need to be fixed, you have the equivalent of a test that fails.

'''Therefore,'''

Identify the most damaging mistake your team is making. This - and ''only'' this - is what, as per ExtremeProgrammingExplained, you will attempt to fix as XP recommends.

'''Then,'''

Whether you are a developer or a stakeholder, you will need to know your limitations (As in DelimitYourResponsibility.)

----
'''If'''

* You have oodles of bugs - AutomatedTesting
* Integration is hurting - SingleReleasePoint
* Customers don't know what they want - PostItVote

'''However'''

As DonWells says, "I will warn you that ExtremeProgramming is meant to work as a complete methodology.  The different practices fit together like a jigsaw puzzle.  There is no overlap and each piece is exactly the right size, no larger, no smaller.  When you implement only one practice you will have to work at it.  It will not make you go faster right away.  That is the down side.  But the up side is that if you can solve your biggest headache with a little more effort your management and customers will take notice and they will support you. They might even ask you "what do we do next".

----
My employer had been evaluating commercial ContentManagementSystem''''''s for use in a large project. This was to be a critical subsystem in our "backbone" technical platform - we couldn't afford to choose wrong. The only serious candidates on the shortlist had hefty price tags, too - if we decided to buy such a system, the very extent of the financial commitment meant we would be unable to switch to another in the short term. We couldn't afford to choose wrong. However... none of them were suitable, and a ''very'' near-term deadline for delivering something to a customer was looming. (A spoiler : XP didn't save us. We missed the deadline. But by then we knew enough to know ''why'' we were missing it, and the value of what we ''did'' deliver by then.)

''I don't get it.  How is this an example of CurrentWorstProblem?''

----
'''AntiPattern:''' ChronicComplainer (Don't do this, or you may ''never'' be able to adopt ExtremeProgramming!)

----
See AdoptingXpPatternLanguage, TransitioningToExtremeProgramming
----
CategoryPattern CategoryExtremeProgramming
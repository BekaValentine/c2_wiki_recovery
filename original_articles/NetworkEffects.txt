Economic DeadLock.  When a new technology/product needs support from multiple "suppliers" to become viable; and each supplier is unwilling to spend the resources to support the new technology/product until it already ''is'' viable.

'''Examples'''

* HDTV.  Broadcasters were unwilling to switch to HDTV until a) there was content, and b) there were (reasonably) inexpensive HDTV sets.  Equipment manufacturers (consumer, professional) weren't about to manufacture equipment for which there was no content and no programming.  Content providers were not about to make HD content if nobody could watch it.

* New programming languages don't get used widely in commercial products/projects without an ArmyOfProgrammers.  An ArmyOfProgrammers won't show up until there is significant commercial demand for skill in the language.

* Alternative fuels (hydrogen, whatever) aren't practical until a distribution network is in place.  Nobody will spend the money to build a distribution network until there are zillions of cars on the road needing the new fuel.

* A new OS is unattractive to consumers without a good set of applications.  Application writers won't support an OS that doesn't have a sizeable installed base.

----

'''Overcoming network effects'''

* Provide desirable content, services, or capabilities unavailable from other technologies (aka KillerApplication). 
** Cynical note: if you ''really'' want to get your technology adopted, figure out a way for it to deliver pornography. (PornDrivesNewTech...)
** Entertainment of other sorts (e.g. video games) might also work, but is probably a less reliable than porn.
** Note also that you'll need to ensure the service ''stays'' exclusive for long enough to establish the user base. If it can be ported legally and cheaply to older technology, people will do so rather than make the expensive jump to the new technology.

* If developing SystemsSoftware, be wary of premature success. Your current product can compete with future versions of your product; change is resisted if it breaks backwards compatibility of end-user applications. The smaller the user population, the easier it is to make changes.

* Plan a transition path. E.g. If your OperatingSystem can usefully run as a virtualized application in another OperatingSystem, then consider allowing that option with the choice of pushing it to the bare metal for optimization and reliability.
** Unfortunately, this can result in a public perception of your product as having its niche somewhere along that transition path. Reduced risk of non-adoption will be traded for increased adoption time.
** Related: Plan an upgrade path to minimize the degree to which your product will compete with future versions of your product.

* Heavy marketing is known to achieve results. 
** As with other products, the winner is the technology everybody knows, not the 'best' technology. 

* Lobby for government support. Achieve a mandate. 
** E.g. The "solution" for the HDTV case above was a mandate by UncleSam that all broadcasters would be broadcasting in HD by 2006. Whether this was a good idea or not is still debated. But... it worked.

----
See ChickenAndEggProblem, BootStrap, QwertySyndrome
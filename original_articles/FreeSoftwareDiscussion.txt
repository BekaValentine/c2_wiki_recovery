This discussion was originally at FreeSoftware.

Some of the original discussion has been incorporated into FreeSoftwareVsOpenSource.

----

The people who wrote the software while working for companies or the government did it because it seemed the right way to solve their problems at the time. For example, if I run a web-hosting company it may be a better investment for me to put some time into working with the ApacheGroup than paying money for a non-free web server: the software works better, I have more control over it's development, I have the source to debug and understand it and so on. (Of course, in any particular case it's possible that the developer made the wrong decision, but that's no worse than choosing the wrong non-free option.) Value is generated for the person paying, but in different ways to traditional licensing.''

''Your tax dollars paid for Linux, and they also paid for OS/390, VMS, and NT. This way, you get to use the intellectual property you've paid to have created.''-- MartinPool

It's the product/service conflict - is software a product or a service? Most of the developers of free software have day jobs producing software for companies that provide services. The software they're paid for is needed for that service, but it's not the ''product''. For example, Apache was developed by people who work for companies that provide hosting services. Banks produce a lot of software, but is that their ''business''?

Oh, and please be careful throwing the term "amateur" around. I don't understand how programmers who do volunteer work are "amateurs". If an accountant also keeps the books for his church gratis, does that make him or that work "amateur"?

-- RobCrawford

So, according to Doug Bolling, if enough people give away useful software, then nobody will be able to work full-time as a computer programmer. ''So what?'' That would be the free market in action, driving down the market value of computer programmers' labor. If users realize that the software they're getting for free isn't serving their needs, then they'll be willing to pay for software that does it better, or hire programmers to improve one of the free products, and the market value of programmers' labor will go back up. Doug may discover, in this situation, that his salary isn't as high as it used to be, but why is that ''my'' problem? -- SethGordon

On the one hand you say, "some [of free software] is downright great". Then you say, it is "a product with no value". Which is it?

Most programmers - like myself - do not produce software that is sold as software. We produce software that supports a service provided by our employers - Chrysler doesn't produce accounting packages, but they have the ChryslerComprehensiveCompensation project. FreeSoftware is about the commodity pieces - OS, compiler, GUI, editors - and not about the custom pieces.

People have predicted the end of need for programmers for what, twenty or thirty years now? Either it was this language or that tool, and now it's a licensing style. It's all twaddle, of course - programmers will be needed because someone will always want something a little different or something completely new.
-- RobCrawford

I just re-read Doug Boling's article. DougBolingRebuttal.

----

I'm with you on this one, Sam. In my career I've had the privilege of working on some great software with some great people. Most of those things would never have been undertaken, most of those teams would never have been able to stay together, without big-time monetary support. Once in a while, something good comes out of a university. But the things that really make a difference are, IMO, more likely supported by companies. -- RonJeffries

''If that's true, how come we're communicating via the Wiki (written in Perl and distributed via the Web) rather than via Microsoft Mail over MSN?''

It's a StrawMan argument to say that software can't be created at no cost. Of course there's a cost. Is it necessary that that cost be recouped by end-user license fees? Not at all: collaborative development, service fees, consulting fees and support constracts are amongst many other models. In some cases at least, these are more effective models. http://people.netscape.com/hecker/setting-up-shop.html FreeSoftwareLawAnalogy -- MartinPool
----
Perhaps only RichardStallman sees free software in such a pure ideological way, and because of his missionary zeal he is willing to accept his own compromises, such as utilizing the resources of a private university to advance his cause. It is easy to relate to where he is coming from originally, that software paid for by the people (i.e. software from the ARPA funded MIT AI Lab) should belong to the people. But he has a vision that takes it farther.

Others see it in pragmatic terms that can be pitched to investors (look, all these people will work for you for free). Others see it in scientific or academic terms: distributing source code over the Internet allows for wide-spread collaboration, and facilitates the independent verification of experimental results. The ideology of science says this will lead to great progress, no matter what mystics, philanthropists, or self-interested entrepreneurs fuel the process.

-- ScottJohnston

Another thing to consider about FreeSoftware is it represents a Wiki style of software development, where the same principles of ego-retarded collaboration and joint-ownership apply.

	 :	''Except for the fact that you can't make copies of the Wiki. When you modify ''your'' copy of a program, your changes don't affect ''my'' copy. But there is only one Wiki, so one person's changes affect everybody? -- EdwardKiser'' 
----
The other day I was walking into a grocery store. A little girl walked up to me and said "free kitten". I said, "dear, there is no such thing as a free kitten." -- MichaelFeathers

The term is supposed to mean LibreSoftware, which is not necessarily GratisSoftware. (''That is to say, all kittens are free.'')

The other day I was in a pet store offering "free kittens".
For just $99, you can have a "free kitten".
The $99 is for shots and other such things; the firball itself is free.
Also, they'd be glad to sell you all the other things you need to take care of your "free kitten". ;->
-- JeffGrigg

Of course, for the kitten to be truly Free you'd have to make sure it wasn't neutered.... :P

----

AsciiKitten is quite free.

----

It is true that a lot of FreeSoftware is written by people who are paid to work on projects. However, many of these projects are not software development projects, but the software is needed to achieve the project's goals. Therefore the software is an added cost, and the use of Open Source software or Open Source development reduces that cost. 

An example is the World Wide Web which was invented at CERN to help scientists communicate. CERN's goals are to explore particle physics, not create global hypermedia systems. Yet their free software has enabled them to use a global hypermedia system that they could not have paid for out of their research funding.

So, in many cases, rather than being created at your expense, free software is ''saving'' your tax dollars, and allowing you the benefit of the tax expenditure of other countries (Finland comes to mind).
-- NatPryce

If you read ESR's article on the Cathedral and the Bazaar, some of the issues on free software coding become a bit clearer. "Amateur" means somebody that does something because they love it. Meanwhile, "professional" means somebody that does something because it's what they call their job. Which would you prefer to write your code? (Some people are both.)

----

If my tax money is used to develop software (as it unavoidably will be) should I be happier if the source code were kept locked away? Nasa Tech Briefs (http://www.nasatech.com/) is a monthly journal with abstracts of work that NASA has funded. If you see an abstract that interests you, you can order a paper for free or a nominal cost - they also deal in software. -- TimVoght 

If the software or other valuable innovations produced by such organizations as NASA is worth money, these organizations should be allowed to sell such things and eventually become profitable institutions. If Univeristies and government research facilities and other agencies such as NASA are such a benefit to society, let them prove their worth by being profitable and selling the fruits of their labors, and at the same time, perhaps, allowing people who believe that such institutions will at some point be valuable enough to turn a profit purchase shares in them and eventually make their investment back with interest.
-- EvanCofsky

----

Evan, that way lies madness. The profit motive is completely brain damaged for universities, and using a using a funding stick and IP carrot to 'encourage' universities to adopt this world view will only result in poor universities in the intellectual, if not monetary sense. What makes you think that any benifit to society can be measured by a market? A strange (though somewhat common) idea!
----
Universities already ''are'' allowed to sell the intellectual property their faculty produce. However, sometimes they give it away anyway. My own experience might explain why:

I work as a tech writer for a software company. We use FrameMaker. I have been working on a Perl module to manipulate MIF (Maker Interchange Format, a file format that FrameMaker uses). My employer clearly owns the copyright for the module - I did it on their time - but the company's lawyer gave me permission to distribute this module for free, under the same conditions as Perl itself. Why would he do such a thing?

	1. My company isn't in the business of selling FrameMaker accessories.

	2. The module, in its current state, does so little that nobody would be willing to pay for it.

	3. Other people who use both Perl and FrameMaker might contribute improvements to my module, benefitting all of us.

Now, in a perfectly free and efficient market, my company might be able to license my Perl module for $1 per download, and then you could come along and add some features and fix some bugs, and then the price would go up to $1.50 per download, of which $1 would go to my company and $0.50 would go to you, and so on. And in a perfectly free and efficient market, a city could finance sidewalk repairs by putting a turnstile on every corner and charging a penny to every person who walks through, thus making the people who actually use each segment of sidewalk pay for its repair. -- SethGordon

The difference between your situation and, say, a univeristy giving the results of tax payers' money away for free is that you were working for a private company whose revenue was from, I assume, the voluntary payments of customers who then received something in return, or, in other words, a sale of goods or services for a price agreed upon by both parties involved. However, ShouldUniversitiesBePubliclyFunded? -- EvanCofsky (further discussion on this subthread extracted by DavidSaff)

I just read the Flux article mentioned above. The article includes talk of what would happen if all software were free... Isn't Douglas Boling going to silly extremes there. Some software will never be freely available because it
	1. is bespoke (and of no use to other organizations/people), or
	2. its ''raison d'être'' is competitive advantage, or
	3. is subject to safety critical or other special requirements.

GNU Cruise control and GNU Stock trader - both unlikely stories...

Even if there were huge swathes of good free software, there'd still be a need for programmers to take contractual responsibility and to build bespoke apps. It's not like we'd all starve or worse, become managers ;-) Perhaps the article is written to help keep the Microsoft sheep happy.

----

Actually, software that requires safety or security is usually better as FreeSoftware. Hands-down, having the source code available to all interested programmers is the best way to get the bugs out.

This isn't GNU Stock trader exactly, but check out everything listed at http://freshmeat.net/appindex/x11/financial.html. My personal wish item is GNU tax reporting software.

Also, contractual responsibility very naturally can extend to FreeSoftware. Check out SourceXchange and other OpenSourceProgramContracting methods.

-- JamesStansell

My favourite argument for liberated source is having the freedom to fix or change software as suits your needs. Who needs to wait for the next service pack or get the credit card out for phone support. These things are probably not issues when you're on the inside.

----

Open Source Software is freely available and may appear to be ''free'' but companies and individuals will still pay for support by another person or company who is knowledgeable about that particular program. You are currently funding the ''support'' of proprietary software in the form of upgrades and new releases. OSS is just being more honest about where the real value is.

You should also keep in mind that there are people like myself who do not need employment and are writing OSS software for the enjoyment of it and the chance to create useful, high-quality software.

-- AndrewNicholson

----

In your standard proprietary-software system, investors cough up capital, which is used to pay programmers, who write a program, which is then licensed to users. The proceeds from the license pay for technical support and for developing the next version, but some of that money also has to go towards reimbursing the investors, at interest.

In your standard open-source software system, an individual or a small team makes a program and distributes it. A fraction of the people who download and use the program contribute bug-fixes and add features. These improvements make more people interested in downloading the program, and a certain fraction of the new users also contribute their own fixes and improvements, and so on.

So I have a theory: for any genre of software that has a sufficiently large user base, ''in the long run,'' an open-source competitor will defeat proprietary competitors in that genre. At first, the proprietary competitor has an advantage because of money coming ''from'' investors, but later it is encumbered by having to pay back money ''to'' investors (with compound interest). At first, the free competitor is weak because it can only "afford" a small number of development-hours, but as more people use it, the number of development-hours volunteered to the project grows (exponentially?).

Someday I want to learn enough economics to state and analyze this theory more carefully, and figure out the boundary cases. -- SethGordon

I think Seth's explanation is a very good one. However, I think in the near future it may be easier for investors to see free software as a first preference.

Capital is flooding into free-software-based ventures: not just RedHat and VaLinuxSystems but also hundreds of smaller companies and intraprenuerial efforts within large organizations. Perhaps this is just a fad, an instance of StupidGreedyAmericans. Perhaps not, I like to think that large-scale investors are recognizing that "giving away products creates a markets for services" is a reasonable business model to invest in. We shall see. -- MartinPool

And for the past, present, and future, there's also the business-model independent approach: just hack some free software for fun in what time you can make for it. This can be fun and useful, and is independent of plans for world domination or of millions (perhaps I mean billions these days) of dollars - it's just fun and it can produce useful software. BTW, that flux article brings to mind "ed, man! !man, ed" :-) How patronizing! -- LukeGorrie

One reason I want to do (or see) the aforementioned economic analysis is so that I can abstract away the effects of things like marketing fads. For example:

	* On the one hand, I think that Linux has a good chance of beating Windows NT Server in the marketplace.
	* On the other hand, my employer (Kenan Systems, http://www.kenan.com) makes billing software (and other stuff) for telecommunications companies; I have trouble imagining an open-source product beating it, considering the small market and the high stakes. (If AT&T's programmers discovered a hack to make their billing system run more efficiently, saving AT&T millions per year, I don't think AT&T's management would be eager to share that hack with MCI.)
	* Up for grabs ... what are the odds that PostgreSQL (or another open-source database system) could become a serious competitor to Oracle? How could those odds be affected by...
		* the size of the user base for relational databases?
		* the ''rate of growth'' of that user base?
		* the proportion of people in that user base who actually know enough about programming to submit bug fixes and add features to an open-source product?
		* the amount of interest that CS students and hackers have in database technology?
		* the interest rate on Treasury bills (which indirectly affects how much return investors want on their stock)?

Stuff to ponder... -- SethGordon

Who knows? I do think that database systems are at least as technically interesting as operating systems: in particular, there are great optimization, reliability, and scalability challenges not disimilar to those involved in a kernel.

Being a prospective CS student/hacker myself I think on one hand it's pretty obvious that we'd choose a free database system, but whether that would necessarily help anything is debatable, partly because 'we' aren't the ones who influence companies to adopt them and contribute (financially) to their growth...beyond that, most young (teenage, whether they work for pay or not) programmers I know use MySQL, and while that adds to it popularity, certainly, it's just a thing to be used, a community to hang with, and very very occasionally something to fix if it's not being useful (but more likely something to complain about), not necessarily a cause. I know that my dad learned Oracle because the companies wanted Oracle, and because it was the biggest and baddest we'd heard of. Hackers don't make things big and bad (until we enter the professional world perhaps), demand from companies does. On the Linux (and software that can be used for home computing) battlefield, however, we're the infantry. We're the ones who incorporate it into homes and suggest it to friends we're helping out. The Spread Firefox [MozillaFirefox] initiative pretty explosively harnessed that power. My $.02 -- MoirinTierce

----

I have some ideas about promoting FreeSoftware/OpenSource software as a server platform in local government, and why we'd be better off with such a setup. (I use the word "we" here to mean the electorate here.)

http://www.halfbakery.com/idea/Public%20OpenSource%20Group BrokenLink


----

Folks interested in the business aspect of OpenSource might want to check out the section "The Open-Sourcing of AOLserver", about a third of the way down in this article:

http://photo.net/wtr/aolserver/introduction-1.html

It's about AolServer, the Web-server program used by (surprise!) AmericaOnline. AolServer was originally Navi-Server, published by Navi-Soft and licensed for $5K per machine; AOL liked the server so much that they literally bought the company. After the purchase, AOL didn't want to be in the software-sales business, and they didn't want to annoy Navi-Soft's other customers, so they just gave away the binary. Then PhilipGreenspun convinced one of AOL's executives that making the program open-source would be in the company's best interest.

His main argument was that more people - for example, students at MIT, where Greenspun taught - would be interested in learning how to use AOL-server (rather than, say, Apache) if it were open-source. This would not only lead to more improvements on the program from outside developers, but it would also make it easier for AOL to recruit qualified people for its technical staff.
----
''Moved from M''''''ustDisplayCopyright''

A clause in many software licenses that requires you to prominently display the authors name and copyright in your software, if you use it.

The problem is that in a large system keeping track of all the attributions becomes unmanageable. The NetBSD OS had 97 such attributions prominently displayed a few years ago - probably more now.

Some of these clauses even say that you must display these attributions in your advertising! 
----
See TheDownloadCulture
----
Is there a relationship between commoditization of software and open source? High volume and standardization of expectations as a wedge. -- TomRossen

----
CategoryDiscussion CategorySoftwareDevelopment
There seems to be a constant theme with regard to quality and perfection. The time and resources allocated to you will in the longer run average out, allowing you to only perform given tasks at a B- level. If you do most projects at an "A" level, you will be given more tasks or promoted until the point that you can only perform B- again.

Software vendors have found that release dates and feature quantity appear more profitable than quality, and this is largely why most software is buggy. Yes, there are exceptions and special niches, but in general the B- rule holds, whether you want it to be that way or not. '''I'm not condoning mediocrity here'''; I'm just the messenger.

--top
-----
Isn't this the PeterPrinciple restated?


''Roughly. This is more about workload than rank. Though, but both can play a part. It's a '''three-way interaction between quantity, quality, and rank'''. PeterPrinciple generally focuses on just rank, whereas this principle also considers production quality and quantity. The "equilibrium point" of these 3 factors will generally settle at B- in terms of production quality. -t''

SO... if I perform at the C+ level I will be given fewer tasks so I can do them at the A+ level but only if I chose to, and only if no one finds out. So A+ can only be performed on projects that are not made public, but as soon as they are made public everyone will assume that they are only B- level so I should add bugs until the metric is met and then I will be in clover. Or maybe I should  not release the software at all. Or if I keep a few extra bugs on hand I can add them in as needed . Or I could offer a reduced rate base on the  number of bugs I should reintroduce. Its harder to remove bugs than to add them so it would make sense to offer a license based on users, cpu and number of bugs added. 

A 10% discount for every 100 non critical bugs/ 1000 kloc  30% per 100 critical bugs / kloc and a full 50% for all full outages not to exceed 4 working hours.


You know top you may be onto something.  This maybe the first empirically verifiable law  of inverse quality control, and may yet lead to  market solution by pricing the lack of software quality. I am so proud to have been here at its birth --- bottom 

''I have no idea what you mean by "not made public". To whom? Typically your boss(es) will expect a certain level of productivity and quality. If you do neither well you will eventually be canned or demoted. If you do both well then they will probably give you more to do until quality falls to B- for each task. A similar bug-count analogy can be found in WorseIsBetter, by the way.''

''Let me try describing it with another approach:''

  g/v = K

Here g is "goodness" (quality) and v is "volume" (quantity), while K is the constant (B-minus). If your g goes up, you are typically given more v until g goes back down such that K is still the same. (The increase in v may result in a promotion or more pay, or you leaving to find a place that rewards your productivity better {g*v}.)

Suppose you have a boss that values g more than v. There will be pressure from above (your boss's boss) to return to K because K is the typical expectation. If your boss ignores K, he/she may eventually be demoted or removed. Deviations from K can exist on the short term or small spots or in rare circumstances, but the pressure from above and customers tends to push everyone below them toward K. Deviations from K go against the grain. 

Sometimes "excess" quality or "polish" is considered a signal that you have too much time, at least relative to the alternative staff, as assignments are being doled out. -t

  // rough algorithm
  while true
    if g/v > K then
      give employee more tasks (v goes up)
    end if
    if g/v < K then
      give employee less tasks (v goes down)
    end if
    if g * v < average or expectations then
      demote or fire employee
    end if
    if g * v > average or expectations then
      promote employee, or emp. leaves for greener pastures.
    end if
  end while

The employee will gradually "bubble" up or down the ladder until K is reached. -t
----

What does "B-", above, mean?

''Two grades above you ;-P'' 

----
This can be assumed if the destination on the road is determined by the one paying the fare. Negotiation may be possible if you are part of a LearningOrganization. If not, you will have to go with the flow.

----
All roads lead to where you are...

http://www.youtube.com/watch?v=p2Re5fiSY8Y
-----
See also WorseIsBetter, PeterPrinciple
------
OctoberTen

CategoryIdealism, CategoryQuality, CategoryProductivity

''Warning:'' this is entirely speculative.

Lots of coders in our business just aren't interested in learning. OK, we cross them off the list for certain types of job unless you ''know'' your environment isn't going to change.

The next largest category is people who want to keep up with the latest AlphabetSoup from MicroSoft or J''''''avaSoft. They're interested in technology and in being up to date, and will reliably reproduce what they've seen other people do.

More interesting (to me), the next category is people who are actually interested in the ideas behind what they do. They are interested in things like weird languages and applications, not necessarily to use them but to expand their intellectual vocabulary. They see the AlphabetSoup as a means to an end, getting a particular job done, rather than an end in itself. 

(Of course, there's another category of the people who actually write those weird languages, but that's vanishingly small).

The best people I've worked with have all fallen into the third category, I want to hire more of them. '''So''', while you're doing your PairProgrammingTestDrive, spin up a copy of SelfLanguage, SmalltalkLanguage, HaskellLanguage, or ''anything'' unusual that they haven't used and see how they react. 

Why do I care? Because I believe in the Orwellian notion that ideas are limited by language, so the larger your technical vocabulary, the more solutions you have to draw on when you're trying to get the job done. That's why Patterns are talked about in terms of PatternLanguage. I'm also interested to find out how flexible they might be when a significant change comes through.

PaulGraham believes you can get a smarter staff by using an EsotericProgrammingLanguage, because people who learn such languages are interested in programming, not just trying to make more than by WorkingAtCircuitCity.
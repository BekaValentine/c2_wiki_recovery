Java isn't going away: if JavaIsTheNewCobol we can expect developers to be maintaining systems written in JavaLanguage forty years from now. But what will Java look like by then?

There's a terrible chance that it will look pretty much like it does now.

A high-up from SunMicrosystems, a senior Java guy, once pitched up at a conference and joined in with a session on language design. It was a pretty distressing spectacle. Not only did this language designer (who works on the definition of a very widely used language) seem not to know much about languages in general, but he also seemed to be ''enormously'' invested in the idea that the core JavaLanguage embodied some unchallengeable set of preferences in language design.

Worse yet, the model of language development that he seemed to have in mind was that Sun will determine what language features the "average developer" is able to cope with this year, then drip a watered-down version of those features into Java in its own sweet time. So long as Java remains.

What brought this back to mind was reading DavidThomasOnTheBenefitsOfDynamicTyping. Part of Java's unchallengeable core, apparently, is StaticTyping. "LucaCardelli says, blah blah blah," was the line. Static typing is crucial for this that and the other, but of course Java's version of static typing provides almost none of the benefits of that technology. And so on. Java 1.5 gains a crippled form of genericity, and blah blah.

The best case is that in forty years Java is dead and gone, because for so long as it remains with us with this model behind its development, it will remain a brake on the imagination and capability of generations of programmers.

----
CategoryRant, you betcha, and CategoryJava
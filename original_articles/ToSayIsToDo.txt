I just had a disturbing thought.

Suppose you lived in a world where magic incantations really worked. If you say the right magic words, lightning can come down from the sky and kill whomever you say. What would happen to freedom of speech in such a world? Doubtful, if words could kill, that you could still say what you wanted.

Today we can build such a world. Computers can use voice recognition to listen to what you say, and they can then get on the Internet and do what you said. All over the world. SpokenProgramming. Programs are the magic incantations. We use them to get our work done, but they can also be used to wreak mayhem. You could utter a few "magic words" and thereby create and execute a virus that would bring the Internet to its knees.

Think of that. Think of the exploits!

Think of the "Digital Millennium Copyright Act."

Your physical house is protected by a lock. No doubt there is somebody who knows how to pick that lock. No doubt that there is a bulldozer that could just plow right over it. But you don't have to depend on the lock to keep your property safe. You depend on the law.

Intellectual property is increasingly protected by copy-control programs which are analogous to locks. It is provable that none of these can ever be secure. Just as no physical lock can keep out every possible attack. Build a door six feet think and somebody can build a drill bit six-and-a-half feet long. All a physical lock does is buy you time. Build an electronic lock -- a decrypting player and encrypted content --and somebody can take apart the player and duplicate its decryption capabilities. It's only a matter of time. The people who own intellectual property cannot depend on copy-control programs to protect it from copying.

So, it's only natural that since the law protects physical property, it should protect intellectual property. Now intellectual property owners don't have to depend on their provably-fallible locks. They can depend on the law.

But intellectual property is different. If someone has a lock pick they can still only pick one lock at a time. But intellectual property is copied lock and all. Really, there is only one of it. It is protected with one lock and one key.

When you describe how to crack one of these locks, you describe how to crack ''all'' the locks of that specific kind, and everything behind those locks is suddenly out on the street for anybody to pick up.

Somebody can translate the description of a lock-picker into a language such as C and the computer will become a device to pick one. And they can post that code on the Internet and everybody's computer will be able to become that device. We don't have computers that can build programs straight from English descriptions yet. But they could build them from a spoken computer language. Or someone could translate manually.

Describing how to crack a software lock isn't like describing how to break into a physical lock. It's like speaking a magic incantation that will cause all software locks of that type to ''vanish!''

Freedom of speech? Freedom of speech used to always be safe, because speech and action were two different things. Not any more! Now, ToSayIsToDo. Speak the magic words and it shall be.

Better watch what you say.

----

I get the idea that OrsonScottCard wrote a story that indirectly dealt with this question... but maybe I'm wrong.

----

Suppose you lived in a world where magic incantations really worked. If you say the right magic words, lightning can come down from the sky and kill whomever you say. What would happen to freedom of speech in such a world? 

''That sounds like a wiki to me.  Everyone can kill a page, but I can restore it...''

----

Of course, what's ''really'' fun is when you can create a SpokenProgramming language in which the command to wipe out the internet is "Mr. Speaker, the President of the United States!"

Then you just sit around until the next State of the Union address...

----

This all misses the point of there being a distinction
between description and execution.
Really the distinction is the same as that between data and code;
a largely arbitrary distinction
(as discussed in CodingIsJustDataEntry),
but incredibly useful nonetheless.

For our own safety, we must preserve the explicitness of
at least one of the key steps of
compilation,
linking/preparation,
or invocation...
the steps of turning data into running code.
(For those who point at interpreted languages
as not having a compilation step,
I'd just say that interpreters put compilation _after_ invocation,
instead of before.)

Which step(s) we choose to leave explicit
will have great effects on how people use the spoken systems.
If we leave compilation explicit,
people will probably make fewer (but more generic) programs,
which they then use without really thinking about it.
If we leave preparation (marking a program executable or whatnot) explicit,
it'll probably have similar effects as leaving compilation explicit.
If we leave invocation explicit,
people will probably run fewer programs.
----
This exposes a flaw in the modern distinction between thought and action.  We in the US like to say we're free to think or say anything we like, but not to act on those thoughts or words.  The truth is that thinking and speaking are actions just as much as trigger pulling or bomb dropping.  The mechanics of thought have only recently been exposed, so the mistake is understandable.

''A book has been written about the relationship between Thought and Action, Interestingly called ''The Mechanics of Thought''''
'' http://www.innerself.com/Lifestyle_Changes/Mechanic_Of_Thoughts.htm''

It looks like a book by a motivational speaker called "The Mechanic of Thoughts".
----
See also SpokenProgramming, LoglanLanguage, LojbanLanguage, (maybe) HowToTalkToYourselfWhenReadingSmalltalk
I dunno who created this for me - thanks.  I'll now continue below  -- Nick Bishop
-----

I'm a C++ programmer with a wicked sense of humour who wants to get into Oracle development one day.  I work for a company called Open Telecommunications (was
Open Technology) in Sydney, Australia.  JamesCrawford also works there.

I can be emailed at: mailto:nick4mony@bigfoot.com (changed January 2001)

I am an Ex-Kiwi (a New Zealander) who moved to Australia in December 1994.

Resume:
	* Bachelor of Engineering (Electrical & Electronic)
	* Seven years in Telecom New Zealand, mostly switching planning and design, Wellington NZ
	* Bachelor of Information Technology for two years in Brisbane, Australia
	* Three years C++ on unix development in two jobs in Sydney, Australia.

Thoughts on C++ development
	* I call an 'int' an 'int' and a 'double' a 'double'.  That means if it's a number use 'int', and if it's got a decimal point, use 'double'
	* I'm impressed by the material in ''C++ Report''
	* I'm a proponent of Resource Management - not just for memory, but for all resources in a program - even opendir(3) & closedir(3)
	* Garbage Collection is garbage - most garbage collectors only handle memory, leaving you to handle resources like thread locking and opendir(3) & closedir(3), and possibly making life ''harder'' in garbage collected languages that don't have destructors.
	* Memory leak detection software is also garbage, for similar reasons.  I would only spend time and money on this software if it was ''convenient'', and only to check that my reference counting was working properly, and that no-one was subverting ref-counting somehow.
	* I'm interested in a large scale version of '''lint++''' - that will check for issues of significance in a large scale C++ project - such as levelisation at file & package level, component organisation, and other stuff from Lakos, Meyers, etc.
	* I'm concerned about the flood of Job Unready Graduates.  Please let the Universities know what employers really need: those who can read and write English, and those who can read and write good code, and those who will unit test.
-----
CategoryHomePage
-----
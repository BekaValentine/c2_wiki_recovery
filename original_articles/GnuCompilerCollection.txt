The GnuCompilerCollection (gcc) is the crown jewel of the GnuTools. '''http://gcc.gnu.org/'''

* Gcc provides a collection of front ends for various languages (CeeLanguage, CeePlusPlus, ObjectiveCee, ObjectiveCeePlusPlus, JavaLanguage, FortranLanguage, PascalLanguage etc.)
* Gcc provides back ends for various OperatingSystem''''''s and architectures (UnixOs, WindowsOperatingSystems, MacOsx, PalmOs, etc.; Intel, PowerPc, MicroController''''''s, etc.).  
* Gcc is portable to a variety of host environments (GnuLinux, MacOsx, CygWin, etc.).  
* For the full list of combinations, see http://gcc.gnu.org/ . 
* There is a wiki at http://gcc.gnu.org/wiki .
* OpenMultiProcessing(OpenMP) is available using GOMP (see http://gcc.gnu.org/projects/gomp/ )
----
''Any reasons for time starved inhouse developers to be concerned about GnuCompilerCollection? What useful things can be developed for deployment under WindowsOperatingSystems?''
* There exist Windows tools distributed under GnuGeneralPublicLicense. An example being CygWin derived products. 
** See http://mingw.org/history.shtml ''BrokenLink 20090426''
* MinimalistGnuForWindows (MinGW, http://www.mingw.org) is a GCC variant which is targeted at Windows - you can use it to build native Windows apps.
** TwilightDragon who provide a more recent GNU compiler version for MinGW.
* CppIde is an IDE that uses g++ as its default compiler.
* CodeBlocks is another IDE which will integrate with mingw or other compilers.
* EclipseIde is another IDE which will integrate with mingw or other compilers.
----
It provides facilities for any ol' developer to write their own front-end to it, thus providing whatever-language with the full power of the back-end.  In practice, unless you're already intimately familiar with the system... this will take a while.  Documentation is a bit of a problem, up-to-date documentation more so, and the code isn't often written for clarity.
----
'''Pages for particular languages'''

* '''C''' GnuCee
* '''C++''' GnuCpp
* See ColorGcc for coloured error messages for C and C++.
* Pascal see GnuPascal
----
There is also the DataDisplayDebugger (ddd).
----
I have no doubt that this subject has been beaten to death in the past, but I'd like to dredge it up Yet One More Time: Why can't the FSF people join the blessed 21st Century and '''create a GCC that runs native under MS-Windows?!?''' Ignoring this source of development potential is like pretending the sun does not rise in the east. All of the workarounds, fake Linux environments, pseudo-tools, and other kaka is just that -- craprodica. Can't FSF create a tool set (well, a C/C++ compiler, at least) that runs in the single most prolific desktop environment on Planet Earth?

They did. It's called mingw. 

See the references above. I think this is a ParkingTicket comment not looking for a reply. -- JohnFletcher

''Have you looked at the way TwilightDragon have packaged the tools? When it is combined with CodeBlocks it provides a project environment for program development.''
----
It is worth adding that there is an alternative set of tools in Clang (CeeLanguageFamilyFrontEnd) and LLVM (LowLevelVirtualMachine) to be looked at as well.
----
CategoryLanguageImplementation
These are the stories describing how a reader should be able to behave after reading the XP book. Please add a story, spawn a thread to discuss a story, annotate the stories by some criteria of your choosing, comment on using this process to describe a book, or add value some other way of your choosing.

Also, please add situations that baffle you, or that you would like to handle differently.

----

Joe is heard to make sounds of growing frustration. Another developer asks Joe for help.

----

It is half an hour before the end of the business day. A pair is working to finish some code. It isn't going well and there is no obvious fix. They discard the code and resolve to start over tomorrow.

''This might be best written as a koan:''

	 :	Pat and Chris come to the XP master Ron (-: with their problem. "Master, we have spent all day working on this half-day engineering task, and we will have to work on it more tomorrow. Can you help us?"

	 :	The master says, "Throw the code away, grasshoppers."

	 :	"But master, you do not understand," say Pat and Chris. "We have worked all day on this code."

	 :	"You have worked all day on this task. Do you understand?"

	 :	The pair throws away the code.

''-- BillTrost''

I really think the koan idea is good. For a similar one, how about:
	 :	"The task which is estimated at more than 5 days is not the real task" (with apologies to LaoTse)
-- JosephPelrine

----

It is late in the schedule. The team determines through the usual estimation process that they cannot complete all the remaining stories on time. The customer defers some stories to future releases or reduces the scope of some of the stories.

----

I have been thinking about how to expand XP at Chrysler. While we have support from SueUnger, we need to expand to other projects. A way to do that would be to assume a great desire in other groups for XP (my education in economics allows me to assume the hard stuff is done and go directly to the interesting bits) and tackle how we could go about starting other projects. I believe the simple solution is to write and teach an XpCourse. My previous assumption yields two interesting side effects:
	1) it allows us to build a solution that can be used in other places at once. This does not violate YouAintGonnaNeedIt, because we have already seen the need.
	2) going back to economics, it fits nicely with SupplySideEconomics (do we need a link to MiltonFriedman here?) Teaching people how to do XP will create a demand for XP.

-- ChetHendrickson

----

It is much easier to reproduce a living thing than to create life. Train new people by having them work on an XP project for a month or so. Make sure that several core people on the new project have been doing XP for some time. In this way, you can avoid having to bring XP to life in a dead project. Resurrection is more spectacular, but reproduction is less risky.

Avoid courses.

----

That's OK but there must be some efficient way for PromotingXp. -- HelmutMerz

----

One for the XP book on OO design: after reading the book I will know how ''not'' to write code. I will have a slightly more comprehensive set of guidelines (as compared to the holy trinity YouAintGonnaNeedIt, DoTheSimplestThingThatCouldPossiblyWork, & RefactorMercilessly) to tell me "YouThinkThatsCodeYourWriting".

----

WhosWritingAboutXp? asks FrankWestphal

----
CategoryStories CategoryExtremeProgramming
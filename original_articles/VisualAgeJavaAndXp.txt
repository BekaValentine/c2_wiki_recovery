An IBM description of how to use VisualAge for Java can be found here:
**** www.developer.ibm.com/devcon/aprcc01.htm

Tips include:
* Set up one userid for all developers -- To aid CollectiveOwnership.
* Understand VisualAge source control -- Know the "Check-out", Edit, Test, "Check-in" cycle.
* Keep an eye out for version branching -- Work around VisualAge's handling of concurrent editing of a file.
* Designate an integration coordinator -- "Pick someone encourage ContinuousIntegration" ''(is this an oversimplification?)''
* Use VisualAge's code format utility -- Builtin temptation to follow the CodingStandard''''''s.

-----

I've done lots of xp using VisualAge and there is no need (whatsoever) for an integration coordinator.  Pairs integrate.  For small teams (2-16), it works fine to have one integration machine.  

When an iteration begins, it is best to create one open-edition of your project.  Let all programmers load that one open-edition of the project into their workspaces.  After that, programmers work only at the package level for versioning.  If you have to work in package x, make it an open-edition, do your work, version it (without releasing!) and then go integrate it into the integration machine.  When that is done, go back to your machine and "relace the project with released contents."  At the end of the iteration, version the project and then create a new open-edition of the project for the next iteration. I have more vaj-xp advice, but I'd like to document all of this in a short paper.  --JoshuaKerievsky

In my experience, an "integration coordinator" is useful in two situations:
* You've got a large number of VaJ novices, so someone needs to keep an eye on them.
* You've got a large amount of non-Java stuff in your repository. This is due to the generally weak support for non-Java data in the VisualAgeJava version of Envy.

The integration rythym in VisualAge takes a bit of practise, but moves well once it's in place. It's no harder, really, than integrating with a more conventional tool such as CVS, but it is a bit different. -- RobertWatkins.
------
In xp, we watch novices by pairing them with experienced folks.  If the novices outnumber the experienced, I'd suggest training 'em in VAJ and Envy so you didn't have to watch 'em too closely.  They also must pair-integrate.  

In our eXtreme Programming Workshop, we regularly take complete VAJ novices and get every one of them up to speed in VAJ and how to use ENVY in 1 day.  A group of these folks pair-program a sample project and pair-integrate continuously. I find that the pairing really helps them learn VAJ/ENVY and greatly reduces problems when they integrate.  I guess this is why pairing is at the heart of xp.  --JoshuaKerievsky


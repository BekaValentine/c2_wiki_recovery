How software gets developed. 

An operational definition tends to include the entire "culture" of the organization.  People who use this fancy term normally have a written set of rules for what and when things will be done.  The larger the project, the more such a formal definition is needed.  Various published methodologies exist: see CategoryMethodology. They tend to be supersets of what a single project needs: choosing an explicit methodology to follow can be a good TeamBuilding exercise.   Projects using methodologies well supported by automated tools (e.g. ShlaerMellorMethod ) typically adhere more closely than others. --MarkSwanson

----
'''Software methodology parallels science methodology'''

[moved from TheFeyerabendProject]

There are strong parallels between what is happening now in SoftwareMethodology and what has already taken place some years ago in ScientificMethodology.  Feyerabend represents the AgileMethodologist of scientific philosophy.  With a stretch of the imagination you can even see KarlPopper as the ExtremeProgrammer of science.  He showed that previous attempts at defining a ScientificMethod (WaterfallModel like attempts) were error prone and unworkable. The replacement he offered was to continuously try and falsify theories under construction (rather than verify them).  The extra insight that Feyerabend offers is that even this advice is highly dependent on context (at which point he throws his hands in the air and says AnythingGoes).

Feyerabend and Popper got philosophers and scientists (and each other) foaming at the mouth.  I think it's fair to say that we software developers are handling our methodological battles slightly better. Slighty. --ChrisSteinbach

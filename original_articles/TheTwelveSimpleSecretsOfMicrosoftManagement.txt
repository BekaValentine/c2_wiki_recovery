The 12 Simple Secrets of Microsoft Management, by David Thielen. ISBN: 0-07-134248-6

http://images.amazon.com/images/P/0071342486.01._PE_PI_SCMZZZZZZZ_.jpg

"How to Think and Act Like a Microsoft Manager and Take Your Company to the Top."
-----
Quite readable. And I like the motivational aspect:

	 :	"If you don't do these things, Microsoft, or a company managed like Microsoft, is going to come in and put you out of business. Once they've started, if you haven't changed already, it's too late."
-- JeffGrigg

If part of this book doesn't make you angry, you aren't paying attention. Kind of extreme, but very thought-provoking. I'm going to read it again this weekend and if I still like it, get lots of copies to hand to some people I know. -- RonJeffries
----
''Anybody count to twelve?''

Heh, I thought this was a joke. I was expecting something like...
	* First, try to buy the competing software product.
	* If you can't buy it, steal the best ideas from it, develop your own version of it, give it away for free or cheap, wait until you put the competing product out of business, then stop improving your version, but start charging for it.
	* If the competing software product is a standard with broad industry support, pretend to join the rest of the industry in supporting it, then develop a subtly incompatible or slightly-ever-changing version of it and watch the standard and the industry splinter.
	* Alternately, announce your own "open standard" technology (borrowing the best ideas from the existing standard, of course), and use your monopoly position with your operating system to push your "standard".
* Don't clearly document subtleties in your newly created "standard" so that it cannot be used well or implemented the same by other vendors.
* Add tempting, showy proprietary extensions to the standard so that customers gradually end up locking themselves into a Microsoft format anyhow.
	* Completely rework your various technologies, libraries, frameworks, methodologies, etc. every few years so that people spend so much time playing catch-up that they don't have time to think about what makes sense or look at competing technologies.
	* Coerce any and all players in the market (hardware and software, OEMs, retailers, etc.) to use your products and technologies over competitors, using fee structures, license agreements, and any other technical, legal, and marketing tools at your command.
	* Hide important parts of the framework or API behind incomplete or confusing documentation, so that no-one except your own programmers and possibly people who pay you lots of money can understand or use them properly.
	* No matter the outcome of actual comparisons (if ever performed): Claim in every ad that your product is at least 3 times more reliable, 8 times more stable, 12 times more user-friendly and 6.3 times faster than your competitors product (adding decimals improves credibility, at least with your target audience: management).
	* If there is no (longer) a competitor, or if it will be too obvious that you are lying, state the above claims against former versions of your own product. (No manager ever seems to draw the conclusion that you've been selling him/her a pretty bad version so far.
* Get the customer to create all their documents and data in a Microsoft-controlled standard (which may be disguised as an open standard using the above tricks), and this will make them dependent on you if they want to continue to use these documents or data in the future.
* Make the licensing terms confusing and convoluted such that it's cheaper to buy extra "in case" than it is to hire a license lawyer.
* Create annoying warning prompts or configuration steps to use old files or products such that you are "encouraged" to upgrade.

	* etc... (somebody please add any I missed)
* Related from a more technical side: ControversialMicrosoftPhilosophies
----
I think it goes like this:

	1. Do not depend on any foreign technology. Compilers and OperatingSystems are ours.
	2. Make others depend on our software to be able to crush them (make them incompatible).
	3. Create products for the office market: Big companies can pay. Our products must be cheaper, and run on the smaller hardware.
	4. Imitate successful products. Either sell bunch of products or give them away for free. Get the market first. Less than 50% means you lose.
	5. Avoid Linux and OpenSource. We can't buy them, but we must destroy them ... somehow.
----
Really, the secret of Microsoft is simpler and less evil than all that: it's "Own DOS." Microsoft has made plenty of mistakes of exactly the sort that sank lots of other software companies - WinWord 1.0, Bob, LanMan 2.0, Windows 1.0 and 2.0, etc. However, the steady revenue stream from DOS meant that none of these failures could send the corporation into bankruptcy. They even managed to screw up DOS itself once, in 4.00 (EuropeanMsDosFour), and continuing sales of 3.31 to OEMs let them sail right on through.

There's a strong temptation to look for some complicated Reason For It. You want it to be their management style, or the field they're in, or their people must be the best in the world, or something. You want there to be some Secret, something that you can learn and use for yourself. However, there's just nothing like that happening at Microsoft. Microsoft is a trust-fund baby.

-- MichaelGates

''Well put, the trust fund baby aspect also touches on the fact that billg's dada gave him money (2million USD IIRC) to start a company, no questions asked. Very few start ups have that luxury. your comment also touches on CargoCultManagement--pjl''
----
Microsoft's owners did OneAmazingThing. They negotiated a contract with IBM that didn't destroy Microsoft. The non-exclusive license of MS-DOS is the key to the whole thing, ensuring the cash cow that made almost unlimited mistakes possible. The closest analogy that comes to mind is the General Motors in the period 1945-1970. Their market share and margins where such that they could survive any mistake and remain profitable.
----
''"Hide important parts of the framework or API behind incomplete or confusing documentation"''

Blankety-blank Microsoft's DirectShow, a component of DirectX, had documentation that for nearly a decade was marked as "Preliminary." Then, one magical day -- several months into a nasty video capture project -- I checked back to find that all this documentation was now marked, "Obsolete."

Nuke Redmond off the map and I will shed not one tear.
----
See: SunTseBingFa, MicrosoftCorporation

CategoryMicrosoft, CategoryBook
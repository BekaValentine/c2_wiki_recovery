(Based on issues in ValueExistenceProofTwo)

Software is not really about hardware ("computer architecture"). In fact, I'd say programaming languages are more about communication with and between humans than machines. Their comparative lack of ambiguity is what allows them to be processed by machines, but also improves inter-human communication. Their clarity is dual purpose. If our languages are primarily shaped by machine concerns, then we are doing it wrong, because machines can be improved if they turn out to be the bottleneck. Ambiguity is the biggest shaper of programming languages, not machines. Math notation was invented long before machines that could process it, and that notation heavily influenced our current programming languages, I would note (starting largely with Fortran-like languages and a sprinkle of Lisp).

Sure, we have to worry about speed and RAM and network latency etc., but these should be secondary (at least for typical business applications).

(I vaguely remember a similar topic, but cannot find it.)

--top

---------
See also: AreCurrentLanguagesShapedByHardware
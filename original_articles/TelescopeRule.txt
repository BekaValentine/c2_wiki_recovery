Thomson's Rule for First-Time Telescope Makers: "It is faster to make a four-inch mirror then a six-inch mirror than to make a six-inch mirror."

-- Programming Pearls, Communications of the ACM, September 1985

''Why?''

Because the skills and knowledge required to make a six-inch mirror are considerable, and practicing the skills and acquiring the knowledge on a small, practice piece gives the necessary base for completing the larger task.

The overwhelming majority of people on this wiki are intelligent and knowledgeable, so I'm curious as to the source of your question. I thought the answer was obvious, but clearly you felt it wasn't, otherwise you wouldn't have asked. Would you care to explain why you feel the answer is neither self-evident nor obvious?

''I know nothing about telescope manufacturing. The rule suggests skills and knowledge only in its title; it says that manufacturing a small thing ''and'' a large thing is faster than manufacturing a large thing by itself, which is counter-intuitive to me. Call me over-literal if you like, but I'm like that.''

I've "pushed glass," as the saying is. The critical difference between the sphere and the paraboloid gets harder and harder to test, and to control, as the glass gets bigger; all the same, I'd say a six-inch is easier to do than a four, the latter being so small as to be fiddly to handle. Past six, difficulty increases as some large, and possibly variable, power of the diameter: deeper curve, more zones to act up during figuring.

Isn't this just an instance of building a prototype to acquire the needed skills before building the desired object?

Well yes, the bit about first-time makers is important - clearly an expert mirror maker will make a 6-inch mirror quicker than a 4-inch and a 6-inch; it is when there is a learning curve that iteration helps - there is always a learning curve for any interesting computational problem, so this is a good rule for programmers.

----
There is a related argument / suggestion about LearningForeignLanguages. It's claimed by some that, to a first approximation, it takes four years to learn your first adult acquired language, and then two years per language after. It is also suggested that it only takes one year to learn LojbanLanguage (or EsperantoLanguage) to a high standard, so learning LojbanLanguage first and then another language, say RussianLanguage, would mean learning your first adult acquired language in only three years.

Of course, you might then go on to prove that BlackIsWhite and get yourself killed on the next ZebraCrossing, but then again, there may be a GrainOfTruth in it.

''Not to start the Esperanto versus Lojban holy war - both have their merits and problems - but I think lojban is the better example here because it is so significantly different (designedly so) from indo-european languages. Its design purpose was to make you think differently, and hence '''for this purpose''' would seem to be the better choice of the two.''

The problem with Lojban for this purpose is that it's not actually very easy to learn at all (I say this from experience, having spent a considerable amount of time with both Lojban and Esperanto). Using Lojban correctly takes incredible effort to think about the logical structure of what you're saying, making distinction that no natural language makes; using Lojban incorrectly is much easier, but then it's just an elaborate cipher for English. Also, Lojban has a complex and irregular derivational system for compound words, whereas Esperanto is completely regular in that respect. The vast majority of the speed benefit for subsequent languages that you get from learning a foreign language is just getting out of the habits of your native language. Esperanto is less useful for learning Chinese than for learning French, but the added difficulty in learning Lojban well is very unlikely to be made up for by enough additional speed in learning Chinese.

----
There's a similar claim on FreshmansFirstLanguage:

"... it may be faster to first teach beginners Python and then Java, rather than Java as a first OOPL."
--
http://web.archive.org/web/20050210024551/http://www.arielpartners.com/arielpartners/content/public/topics/technology/technologyReviews/javaVsPython

----
CategoryQuote
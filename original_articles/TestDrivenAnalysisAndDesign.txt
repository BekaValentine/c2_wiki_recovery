What if you could bring the same focus and rigour that TestDrivenDevelopment brings to programming to OOA/D? You would only then model what you needed to pass tests, neatly bridging the gap between agile and model-driven approaches. TDAD works best when you do it at the whiteboard, and then treat your code as the final model - which you draw upon in subsequent analysis and design sessions (ignoring any extraneous detail). TDAD borrows ideas about specification from Catalysis and slots them into a simple process.

[This link is invalid ->] http://www.parlezuml.com/tutorials/tdad/index_files/frame.htm - an overview of the approach
[Anyone know of another example/overview?  I couldn't find any on the specified site.  Please replace the bad link and comment here with a valid link.  Thanks.]

----
see also AgileModeling, ExtremeCatalysis
----
CategoryTesting
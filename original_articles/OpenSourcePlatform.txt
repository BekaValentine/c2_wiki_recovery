OpenSource is about ''licensing'', ''internet-scale loose-fit development'', and FreeSoftware. I want people to see these three aspects separately. I don't think you need to adopt all or none.

Some people I've seen that are responsible for IT and software development seem to equate open source with a "chaotic" software process. These are the sorts of things I hear:

	* "But nobody's in charge!", 
	* "But nobody plans anything!",
	* "What? Just let people do their own thing??"

I'd like people to see open source software(a la Linux/FreeBSD) as a kind of platform. Bring your own methodology. I don't think you have to adopt a Raymond-Cox approach to open source. I see no reason why traditional OO methodologies and processes won't work with open source projects. (If you have only 5 developers in the same office, you don't need to organize the work as though its a world-scale open source project.)

--

What distinction are you drawing between "licensing" and "FreeSoftware"?

It's a good point that licensing need not drive development style, but they're not completely independent. FreeSoftware can more easily run massive field tests and can get really good feedback (e.g. patches) from beta users, so your process should take advantage of that. Similarly, the code should be understandable enough to encourage people to get in and improve it. 

-- MartinPool

Something maybe similar to what some guy is talking about came up at OT this year. I don't know if this is true or not. The inference was invited that some companies are doing this and making money at it.

Suppose that a commercial development organization used open source tools, and open source products to build a system for a paying customer, to that customer's requirements. That customer would of course, as well as receiving a binary deliverable, be able to obtain and modify the source of the product, it being open source too. And if they redistributed the product (or a derivative work), they'd have to make the source available to whomever it was distributed to. So far, so orthodox. 

The punchline is that the software house paid by the customer to develop this open source product is under no obligation to distribute the source to anyone who has not received a distribution of the binary. And it is under no obligation to give a distribution of the binary to anyone who hasn't paid for it. 

Some open/free licences might stop this sort of thing going on, but not all, or even most, I'll bet.

So, maybe this related to some guy's distinction. It would seem that you can use open source materials, and distribute your product under an open source licence irrespective of whether that product is built by miscellaneous world-wide folks in their spare time, or 9-5 regular employees right here. And if it is employees right here they can be doing XP or RUP or anything else. And furthermore, you can use open source materials to make an open source product distributed as code and binaries irrespective of whether you make that source publicly available or not.
----
See also: CategoryMethodology, OpenSource, FreeSoftware, LicensingTerms, CopyLeftArgument, FreeBsd
'''Engine-Collection-Class, a Design Pattern for Building Reusable Enterprise Components'''

http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndevgen/html/desipat.asp

Summary: ''Details an approach to designing reusable enterprise components. This article focuses on the Engine-Collection-Class (ECC) design pattern, a flexible model for creating reusable enterprise components for distributed/tiered applications that work with both traditional "rich" clients and scripting clients. (36 printed pages)''

Engine-Collection-Class belongs to the CategoryStructuralPatterns.

Another Microsoft article that takes standard OO practice, butchers it just a bit, renames a few things and claims it as a pattern.  Written by some procedural VB programmers, at least, the sample code seems to indicate this.  It certainly isn't a design pattern, nor very good code.

''And the engine isn't an engine, it's a factory.''

This seems to represent more of a meta-pattern than a pattern on its own.  The engine is, indeed, a perfect example of a factory. This is evidenced by the quote in the article: '...the Engine implements a design pattern known as the Object Factory.'  Rather than a butchering of OO practice, it is more a noble attempt to hammer the square peg of COM programming into the round hole of OO design. 

That said, this approach (and I think it is better termed an approach than a pattern) is specifically designed to overcome the shortcomings of VB COM+ programming and to attempt to apply it to modern object-oriented languages would be a mistake.  This limits its usefulness as a general design pattern.  
A dialect of C++, proposed by many embedded systems tools vendors in the early 90's, seeking to "scale" C++ so that it was appropriate for embedded systems.  This was to be done by deleting several features that were ConsideredHarmful due to (alleged) code bloat and compiler implementation difficulties.

Things which EC++ lacked:

* Templates
* Exceptions
* MultipleInheritance

Fortunately (IMHO), this went nowhere.  This was due to several things:

* The AnsiCeePlusPlus standard was approved, allowing implementations of the above to stabilize.

* Compilers got better -- templates don't add tons of code bloat with a good toolchain.  (Efficient template implementation when all you have is a dumb Unix linker is difficult; but most such linkers have been replaced with ones that understand C++).  

* Embedded processors have gotten more powerful; memory has gotten cheaper.  Excluding the 8-bit variety where you wouldn't consider C++ regardless, removing the above seldom makes a difference.  (MI and exceptions, in particular, don't contribute much to code bloat).

Nowadays, you seldom hear of Embedded C++ any more, other than on Wiki pages like this one.

----

CategoryProgrammingLanguage CategoryCpp

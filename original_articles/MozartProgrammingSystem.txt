The Mozart Programming System is an advanced development platform for intelligent, distributed applications. 

Mozart is based on the OzLanguage, which supports DeclarativeProgramming, ObjectOrientedProgramming, ConstraintProgramming, and concurrency as part of a coherent whole. And TransparentDistribution. Should the MilosProject succeed, the Oz-E variant of Oz will also be an ObjectCapabilityLanguage.

* http://www.mozart-oz.org/

For the distribution sub system see

* http://www.mozart-oz.org/download/mozart-ftp/store/1.3.2-2006-06-15-print/other/DistributionSubsystem.ps.gz

Version 1.3.0 of Mozart/Oz was released on April 15, 2004. TheOzBook was designed to be accompanied by this version. Even if you're not interested in OzLanguage, go read TheOzBook.  It's a great companion to TheWizardBook.

Version 1.3.2 was released on 2006/06/15.

Version 1.4.0 was released on 2008/07/03.  This version has a complete redesign of the network-transparent distribution support, based on Raphael Collet's Ph.D. dissertation:

* http://www.info.ucl.ac.be/~pvr/raphthesis.pdf

''Is the language still under active development, or is it effectively dead?''

Distributed Oz was released as 1.4.0 in July, 2008.

One exciting development is the work done on QHTML as a declarative web interfaces alternative to QTk.

Perhaps some of the momentum has transferred over to AliceLanguage, which to me seems not quite as interesting a language (it's SML with extra goodies) though its interactive interpreter is far less cumbersome to use.

Alice is a functional programming language based on Standard ML [SmlLanguage], extended with support for concurrent, distributed, and constraint programming. Alice extends Standard ML with several new features. 

AliceLanguage builds on the experience gained through developing the Mozart system. Previous versions of Alice were based on the Mozart VirtualMachine -- it now uses the SeamVirtualMachine.
* http://www.ps.uni-sb.de/alice/
----
CategoryLanguageImplementation
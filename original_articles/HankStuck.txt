My current programming viewpoint is "If 'it' doesn't solve a problem of current interest, then defer ''detailed'' study on 'it'".

The programming envelope seems to be n-dimensional with both edges and niches that can act as a tremendous TimeSink.  Perhaps this viewpoint is an extension to YouArentGonnaNeedIt not just for coding but also but for knowledge we've added to the brain software.

How do you know you won't need it (a particular programming discipline/skill/paradigm) if you don't know about it?    You need to get things you don't know out of the GingerFactor area.

Strong proponent of the CodeUnitTestFirst. A lot easier to do on new code then to do on legacy/procedural code.

Some recent programming ParadigmShift''''''s I GrokInFullness (for example RefactoringImprovingTheDesignOfExistingCode), others I can ManagementSpeak, and others seem to be solutions for problems I don't have.  Or don't recognize I have.

Eclectic reader.  For non-fiction with ideas of interest are  by ShigeoShingo and by EliyahuGoldratt.   Also Zen Guitar.  Many others.  For fiction, main path is ScienceFiction (space opera and military SF).  Lately have gotten back into mysteries, and even some Victorian ones.

----
CategoryHomePage

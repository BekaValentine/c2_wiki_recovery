WhatYouSeeIsWhatYouGet (WYSIWYG) is sometimes seen as flawed. Proponents of this view will sometimes counter that it is really WYSIAYG, that is 'What You See Is All You Get'.

What we see is symbols. What we get is symbols. But symbols represent other things. And, in WYSIWYG, we're tailoring the environment towards people who are unwilling to deal with the symbolic, or meta-symbolic aspects of media. In other words: WYSIWYG is an attempt at providing media to the illiterate. Not a bad thing, but neither can it be the panacea which some marketing experts have painted it as.

WYSIWYG editors sometimes hide important meta-information. Many MicrosoftWord users have a very hard time getting page breaks, paragraphs, or changes in style to display as desired. This is because the application's internal model of the document is not easily viewable or editable, and can only be viewed or manipulated by indirect means (such as displaying all formatting marks, and even then, not ''all'' are displayed).

Editing in a WYSIWYG editor confuses the work flow; since content and layout are often orthogonal (think writing a book, not desktop publishing) they should be done that way. WYSIWYG tends to emphasize presentation over content, whereas most serious authors would rather emphasize content over presentation, and most publishers would prefer to have professionals take care of the presentation rather than leaving it to the author.

''Thank you for making this point. Just yesterday, discoursing on tech_docs, I reminded my friend that we weren't writing a novel ... *!lightbulbs!* ... at which point I started thinking ExtensibleMarkupLanguage and hierarchical presentation of concepts. I have long missed "Thinking Cap", a thought-liner by Broderbund for C64. -- BenTremblay'' You can get Thinking Cap from http://www.oldsoftware.com/Commodore.html , if you've still got a CommodoreSixtyFour to run it on.

Although the WordProcessor''''''s are getting better, they are still not as good at typesetting as markup tools. Whipping up a quick letter or memo in MicrosoftWord is probably at least as easy as doing it in LaTex. On the other hand, writing a technical book in Word is difficult, will take you much longer than it would with EmacsEditor + TeX, and the result will be inferior (assuming the typesetting is not redone).
----
Many users of MicrosoftWord do not understand 'styles' and instead apply large font size and 'bold' formatting each place where they need it. What they see is the same as what someone who is using styles sees, and on paper they get the same result. Here it's not so much that WYSIWYG doesn't work, it's that 'what you see' is not the whole story.

''While I agree with some of the above, I think the topic title is a great overstatement, and that the WYSIWYG does not have a FatalFlaw. The availability of WYSIWYG editors is a great improvement over the days when you couldn't see how documents would turn out until after you printed them. For casual users, or people who don't want to learn the intricacies of something like LaTex, WYSIWYG is an empowering technology, and not a crutch for the "illiterate". WYSIWYG does work: it serves the needs of a ''lot'' of users. It should not be damned just because it doesn't serve the needs of the most-sophisticated document creators.'' -- KrisJohnson

True. Within a limited scope, a WYSIWYG editor is the best choice. That they are often used outside this scope does not diminish that - and a little education about the best tool for a given job would go a long way to address some of the prejudice of folk who have been bitten by using the wrong editor.

''I think that this page is not arguing against software in which you couldn't see how documents would turn out until after you printed them. That's a limitation in older software, not a problem with the WYSIWYG paradigm. Also note that this page isn't damning WYSIWYG or suggesting that WYSIWYG never works; simply that it doesn't always work. IOW, it's not a panacea; we shouldn't replace all non-WYSIWYG editors with WYSIWYG ones.'' -- BrentNewhall
----
WhatYouSeeIsAllThereIs (cf AntiMacInterface) -- AluoNowu
----
I am not sure the Wysiwyg editor concept is necessary flawed; it depends on the way the editor works and the styles it gives to the user. If there is only bold, italic and font styles, you have to mark your titles as 'bold, size=18', and you don't add any meaning to your text. But if the editor gives you title, citation, comment, address, etc. styles, you can mark your titles with a 'title' style, your citations with 'citation' style, and add meaning to your text. MicrosoftWord can do both, as HyperTextMarkupLanguage. Wikis should do too. The Wysiwyg interface is just here to make it easier. -- es

Perhaps the question of WYSIWYG should be approached at a higher level. A nice analogy is the difference between GraphicalUserInterface and CommandLineInterface''''''s: each kind of interface has its merits, but, as it has been said often enough, a CLI interface represents a linguistic entity and a good CLI interface will be much more powerful than a GUI interface can be. There is a reason we humans prefer talking to each other instead of waving.

But signs and symbols can have all forms. Today, one expects a GUI in EmacsEditor and one wants at least coloured syntax highlighting for visual representation of syntactical meaning of the commands. In similar a vein, one would probably not want a Wiki page to be rendered as its ASCII input in the browser.

What you get (the output) should therefore be a meaningful representation of the structure/symbolic values/meaning (meta-information) of your input, but the input should clearly mark the symbols and structures as such. This is the principle of MarkupLanguage''''''s, XML and other human-readable interchange formats; this is also the idea from which the whole WWW sprung.

The remaining consideration is the simplicity of input (or noise-to-data ratio, if you want), the reason why PerlLanguage programmers prefer to write documentation in ""perlpod"" format as opposed to ""nroff"". Wiki syntax is simple, straightforward and intuitive, so it quite fulfills the requirements.

Doubtless, its syntax could be extended to provide more meta-information tags, but then it would get more complicated: that is a matter of taste and good judgment, as in any language design. The current set apparently suffices for very broad application, so any additions should be considered with care.

So while Wiki does not support WYSIWYG, it supports WYMIWYG (What You '''Mean''' Is What You Get), and in a very simple and intuitive way. And that is much better and quite enough for any kind of linguistic communication in the broadest sense.

-- Kvorg (Disclaimer: my first Wiki edit!)

This tradeoff becomes nothing when you have different editing modes. MacromediaDreamweaver is a good example of this. It lets you edit raw HTML or the graphical representation of a web page.

There's nothing inherent in WYSIWYG that makes it bad, but most editors work in fairly unstructured ways. They don't let the user define the structure of the document and then edit that. Many programs are moving towards more structure, though. Graphics programs have things like layers and groups.

-- Edwin Zacharias

'''Concur.''' Alphatype Corporation had a product back in the late '80s to early '90s called Multiview. This was an editing system that used Alphatype's proprietary markup for editing a document in both content and structure, then it would display the result WYSIWYG. In fact, the monitor for the Multiview workstation was actually calibrated to the size of the image on the film produced by the typesetting printer. I used to use a Multiview terminal to create overhead projector transparencies by holding a transparency frame up to the screen to see what it would look like. This is the best of both worlds; a high-end typesetting composition environment combined with a WYSIWYG display.

Now: who wants to pony up $10,000 for a Multiview terminal, editing software, and font licenses? Oh, and what about the $80,000 typesetting printer? Anybody? Anybody? Okay, then - let's stop comparing Apples to Sinclairs and talk about what the real issue is here. What exactly is the problem?

'''"WYSIWYG is an attempt at providing media to the illiterate."'''

Where did this come from?!? I have a one-man consultancy that can't afford $100,000 in phototypesetting equipment, software, licenses, and training to use all this junk. I use MicrosoftWord 2000 to produce every document I need to use for my clients and their customers. So far, no complaints. If I am a publishing house trying to put TomClancy's next novel into print then my needs are a little different. Can we set some limits here, please?

'''"Editing in a WYSIWYG editor confuses the work flow"'''

What does this mean? Composing with a WYSIWYG editor has nothing to do with the "flow" of the work; I'm interested in getting my ideas and expressions committed to media first, layout and appearances a distant second. It is convenient to have the editor also apply rough formatting to the work in process to help me organize and structure my documents visually. This still has nothing to do with content; it is just a crutch that I don't mind using.

'''"writing a technical book in MicrosoftWord is difficult, will take you much longer than it would with EmacsEditor + TeX, and the result will be inferior"'''

Why is TeX superior to common WYSIWYG editors? What are the technical advantages it has? Does it do kerning better? Leading? Justification? Does it control rivers? Does it track text color to keep the page at 50% gray? Somebody please explain this. Oh, and as far as Emacs goes, WhyNotUseEmacs contains quite a bit on the subject. That whole thing is a little off track here, though.

''Yes, TeX has superior kerning, hyphenation, layout, and leading than MicrosoftWord, or any other general purpose WordProcessor that I know of. Or at least it did when I last evaluted them seriously, just before Word 2000 I think. Unless there have been large improvements in the basic layout engine of Word, this will still be true (I haven't heard anything to suggest that this is a priority for MicroSoft). The TeX output is damn near professional typsetting. It is does a good job with weight (i.e., 50% gray) without considering embedded figures (it doesn't understand figures, just the bounding boxes). Furthermore, with a decent editor (yes, emacs is one) it is vastly more suited to large documents when compared to Word. The last time I tried a big doc in Word (this was 98, not 2000), it managed to get the file into a state it could no longer load without crashing. That was fun. For about a month prior to that, it had been almost unusably slow (this on a fast machine with 512MB memory), and was carrying around about 50Mb of extra content that had been deleted from drafts. Frame was much better for this size doc, but had its own problems. The real killer app for TeX/LaTex is technical content though, especially mathematics, figures, and citations ... probably in that order. When compared to TeX, the mathematical content achievable with Word has improved from totally pathetic (prior to about Office 95) to merely annoyingly limited with poor layout (current). Sure, the math content of equation editor is probably fine for the vast majority of Word users, but there is a good reason why it is hardly on the radar with mathematicians. Support for floating figures etc. is great, and BibTex is great citation tool. Not perfect, but great, especially when used with an editor that understands it. I find this combination much more powerful than reference manager or any of the add-ons I have seen. Much the same can be said of TeX; it has warts, but where its strengths lie it is miles and miles ahead of any competition (not counting the $$$ professional typesetting systems as competition).''

''If you are writing a large document, such as a book, with or without technical content, I don't believe that MicrosoftWord's 'rough formatting' is a crutch: I believe it is a hindrance. Layout and content are orthogonal. Rough layout is better handled by a combination of LaTex and a good editor. For example, the RefTeX mode of EmacsEditor allows global TOC-style views of the entire document, navigation through this view, expand or collapse sections, label or refer back to labels, citation or indexing, across multiple files if need be (auctex) all essentially instantaneously with a current PC, and one or two keystrokes. Roughing out the layout is as simple a few "\section" commands, with global or local changes later quite trivial. There are some annoying built-in limitiations to the TeX processing engine when you hit full book-lengths, sometimes, but these are not hard to work around.''

Excellent analysis, thanks. I don't do mass publishing ''per se'', and almost all my published writing has been processed through typesetters anyway. It's nice to see that there are high quality alternatives to Microsoft products for the low-end publishing world.

However, this ''still'' does not address the issues involved in what WYSIWYG pseudo-publishing is meant for: low volume production of quickly produced documents by non-professionals who lack typesetting and layout skills. MicrosoftWord and its equivalents are impossible to beat in the bang for buck comparison under these conditions. I stand by this assessment and need to be shown proof positive that there is a reason to give up conformance to a ''de facto'' worldwide standard in desktop publishing before I will make a change. -- MartySchrader

P.S. -- MicrosoftOffice 2000 is a ''vastly'' improved product over Office 97 and earlier. Microsoft claims that the later products are even better, although I have no need to test that claim yet. Perhaps they are better; there is certainly room for improvement.
----
To give a concrete example of where a WYSWIYG editor like MicrosoftWord falls down compared to something like Tex, imagine that you're translating some text from one language to another. You want to show the translation a sentence or phrase at a time, and keep them right near each other. Your only tool is the hammer called Word, and this looks like a nail, so you set up a little table that has the original language text down the left side, and the translations down the right side.

Well, you finish your translation, and show it to the person commissioning the work. Their reaction is "yuck, side by side, make the original text block quotations, and your translations below each bit of quotation." With something like Word, that means going back through the '''entire''' document and changing the format of each row in the table. 

On the other hand, if you used an editor that lets you discuss the '''structure''' of the text instead of its format, you could just change how the structure is formatted. In TeX, you might have written something like
  \translation{''some original text''}{''its translation''}
  \translation{''more text''}{''more translation''}
  ...
Then, when the patron wants to change the way you've formatted the article, all you have to do is redefine the "\translation" macro.

This isn't a hypothetical example: I've run into exactly this problem doing patent infringement analyses with a client who '''insists''' on using the latest dreck from MicroSoft.

-- BillTrost

''Sorry, Bill, but this is another RedHerring. If you wanted to structure your document so that the text could be arranged differently on the fly you would have applied Styles to the original and translated text. That way the appearance of the text could be changed after the fact and its content left alone. This is a basic premise of markup. Word, etc., offer Styles so that this can be done.''

Hold on. That seems like a red herring of a red herring. Styles can do a few things, but organizing layout in a TuringComplete manner is almost certainly not one of them. Furthermore, styles apply to individual blobs of text, not the tuples that TeX macros can work with. What's going on above is that BillTrost wants to establish a semantic connection between the segments of one language's text and the corresponding translations. You can't do that with any mere styling engine. Certainly, the one in MicrosoftWord 97 will not do this for you. -- IanKjos

''Could be. I've never tried doing this with a MicroSoft product, so I don't know if it's possible or not. Of course, Microsoft would say that the connections you refer to could be done with embedded VisualBasic or some other aspect of their DOM, so ''that'' kettle of fish gets spilled into the discussion. Hmph.''

Perhaps we might remind ourselves of KentBeck's old aphorism "Talk about what you've done, not what you're gonna do." - particularly when talking about various TeX macros versus MicrosoftWord stylesheets. I ''know'' that Word isn't up to it, and I'm not sure I heard BillTrost say that he'd actually done the document that way. The ideal of separating "content" from "form" is filled with practical problems, as most of us who've tried to solve them have come to realize.
----
''"Editing in a WYSIWYG editor confuses the work flow"''

'''Concur.''' When I have needed in the past (few years - in university) to compose, layout and print some formatted text, I have invariably typed the first draft (and maybe second) in a text editor, and ''then'' pasted that whole bit of text into a WordProcessor to do styling and editing. It spares me from waiting for the word processor's huge overhead (my experience suggests that modern word processors really can find use for modern quantities of processing power, incredible as it sounds, though it's probably just poor programming in a lot of cases) while I'm typing. But more importantly, I feel almost as though I can't ''think about what I want to type'' when there's a huge toolbar with little B/I/U icons and so forth hovering above my input window. (I can revise and edit in this mode, but I actually catch myself turning away from the monitor to think about how to reword sentences, for example.) -- KarlKnechtel

''Have you ever tried LaTex? It is designed for this type of workflow.''

''In my opinion, LaTex is good for math and for typesetting. For anything more complex and with actual language like say, a letter, it is lame. Flat. Out. Lame. Its a complete irritation trying to get anything done with all the typesetting commands; I feel like it is a command prompt. Yuck.''

If your document will fit on few enough pages that you can staple them together with a normal hand operated stapler, a WYSIWYG editor is probably fine. There are a number of large companies that misuse MicrosoftWord for 100 page formal documents, and it isn't up to the job. 

----
Note that O''''''penOffice 2.0 (http://www.openoffice.org) is a pretty-close-to-direct replacement for Microsoft Office, so maybe you guys will stop hassling us non-typesetters about using WYSIWYG editors.
----
I think WYSIWYG is simply obsolete; it has outlived its original definition. WYSIWYG was coined to differentiate systems like MacWrite, Interleaf, and MSWord from an earlier generation of things like NROFF, TROFF, and SCRIBE. Before WYSIWYG, '''all''' presentation was done through arcane embedded markup that was scattered liberally throughout whatever text was being produced. We worked on alphanumeric terminals like the VT100 or even hard-copy terminals. The workflow, therefore, was VERY MUCH one of gathering "copy" and then preparing that copy for whatever presentation it would have on a page. We processed the result through whatever package we were using, printed it, and looked at the output. In that era, the very concept of displaying the rendered, type-set output on the SAME SCREEN, even in the SAME TOOL that was creating it, was revolutionary. Those revolutionary (in their day) tools were called WYSIWYG systems. I don't think the term was ever meant to be taken as literally as it is in this discussion. -- TomStambaugh
----
When one friend and I were writing our end-of-study work, we decided to go for LaTex (the document had somewhat complicated mathematical sections, and was 150 pages long). At the end of the writing, everything was done using Word. In the middle, we discovered that:
* MicrosoftWord (here the 2000 version) had no difficulty handling documents of several hundreds of pages.
* Performing peer review, reconciling changes etc... was just impossible to do using Tex. Change tracking was available using MicrosoftWord.
* All the figures had to be edited in another software and imported into our Tex document, which was destroying flow.
* The Tex compiler was crashing due to some bug somewhere we were never able to identify.
* Formatting the text was just too complicated: we had lots of technical terms we wanted to have their own style, but writing the special code for it was time-consuming and once again the flow was dead. Of course, we started using a dedicated Tex editor that let us select the text and click on our style, but heh, this is exactly what MicrosoftWord does...
* Spelling and grammar-checking is just non-existent, or you have to use another tool, which breaks flow once again.
* Etc, etc...

For me, Tex is to document editing what Vi is to CeePlusPlus: an old-fashioned way of doing things that could be done four times faster if some were willing to take the time to learn new tools. Of course you can do stupid and horrible things using MicrosoftWord. But once you know how to use the tool to its full extent (ok, my mother doesn't, but YOU are supposed to be professionals, aren't you?), comparing LaTex and MicrosoftWord is comparing Notepad and EclipseEditor. -- PhilippeDetournay

Comparing Vi to C++? That comparison makes no sense at all - VI is an editor, C++ is a programming language! Yes, Word is a pretty good word processor for many things, but claiming the the difference between LaTeX and Word is like that between Notepad and the Eclipse Editor exposes a great steaming mound of ignorance the like of which I have never before seen and hope to never see again. It makes me think that your whole comment was written by a TeX partisan trying to discredit the other side. With regard to the issue though, I use both LaTeX (usually but not always though LyX (LyEks) ) and WYSIWYG text editors, and it to be a "use the right tool for the job" situation. WYSIWYG editors are preferable for "one off" type things, like letters, memos, etc. I prefer LaTeX for larger technical documents, where the ability to create very flexible macros and not have to worry about the presentation as the document is edited over and over again is more advantageous. (Yes, some of these things can be done by WYSIWYG programs too, but not as well, at least presently.)

----
See: CoordinateVersusNestedGui, EssentialComplexity
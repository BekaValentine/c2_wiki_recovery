What it sounds like; a patent on some technique or algorithm which is (primarily) implemented in software, running on a general purpose computer. 

There is a significant debate in the programming community on this topic. 

Many feel that SoftwarePatents are bad because: 

ProgrammingIsMath; it has long been held that mathematical formulae are not patentable. 
SoftwarePatents are incompatible with FreeSoftware. 
Many software patents are for trivial things; i.e. the infamous XorCursor? patent. 
Even moreso than patents on other systems (which can often be worked around), patents on software tend to become InterfacePatent?s; greatly extending the potential monopoly held by the patent-holder. 

----

In the USA (and also other parts of the world), it's possible to patent software.  Some nice examples, which you can find using the number on http://patft.uspto.gov/netahtml/srchnum.htm, are:
		* '''The amazon one-click patent (5,960,411)'''  You can buy something with just one click.
		* '''Cadtrak's XOR Patent (4,197,590)'''  Draw the cursor on a screen using XOR, allowing for simple removal again.

More examples on 
http://www.base.com/software-patents/software-patents.html, or directly:
http://www.base.com/software-patents/examples.html,

See Union for the Public Domain discussion archives for a copy of reporter Sabra Chartrand's New York Times article "Patent Seems Designed for Debate". http://lists.essential.org/pipermail/upd-discuss/2001q3/000184.html

----

Examples of dying companies as result of software patents:

	* http://www.knoppix.com/

''Um, I don't think the fact that they've put up that page means that they're dying. There was an organized anti-software-patent protest, where lots of websites dedicated to free software put up pages like that in order to raise awareness of the trouble software patents could potentially cause.''

----

The US patent law isn't defined in terms of concepts or their expression. Patents can be issued for the invention or discovery of a new and useful process, machine, manufacture, composition of matter or "improvement thereof"; consequently turning software into IntellectualProperty.

----

As much as I wish that software was not patentable, under the current regime, they are.  The law, as similar as it may be to programming, is ultimately interpreted by a system which is not deterministic, and therefore is not as predictable as it should be.  This is an area RichardStallman has spoken at lengths about, I invite you to take a listen or read [http://www.gnu.org/philosophy/philosophy.html#Speeches or email me for a downloaded copy if the site is down].  -- WilliamUnderwood

----

My biggest beef with software patents (and patents in general) is that patents are being granted for the obvious, absurd, and its-been-done-before.  Both of the above fall into the "obvious" category, as do many other silly patents that have been granted.  If something is truly novel, inventive, and advances the state of the art--I have far less objections to it being patented, including software.

One improvement the USPTO recently made was going from a seventeen-years-from-issue rule to a twenty-years-from-filing rule.  This reduced the scope of obnoxious SubmarinePatent''''''s, but does not eliminate them completely.

-- ScottJohnson

-----

It seems that "good" software patents do not make up for the bad and silly ones. Thus, perhaps we should toss out the whole idea. More money for better filtering only increases the costs beyond what the little guy can afford, giving large companies too much leverage.

Can anybody name a software patent which is truly novel, resulted in better products, and rewarded such that it encouraged further innovation? Can you find say five?

-----
See HowToImprovePatents, PatentsAreEvil, IbmDoubleDispatchPatent

----
CategorySoftwarePolitics CategoryLegal
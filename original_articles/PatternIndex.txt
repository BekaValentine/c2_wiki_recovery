The book ''PatternLanguagesOfProgramDesign'' http://hillside.net/patterns/books/Details/070.htm is an eclectic collection of patterns. Many of them are accessible on line.

See CategoryPattern index.

----

The GangOfFour wrote up 23 DesignPatterns. These patterns elaborate on their work:

* ExtensionObjects
* HiddenManagers


They are also interested in UsesOfGofPatterns.

----

Some pattern languages that are useful for large business applications.
* CrossingChasms
* RelationalDatabaseAccessLayer
* ErrorHandling
* DecouplingObjects (DecouplingOfObjectOrientedSystems)
* FrameworkConstruction
----

Other sets of patterns (often pattern languages).

* UserInterfacePatterns
* MessagingPattern
* SystemOfNames
* TransactionsAndAccounts
* DebuggingPatternLanguage
* TestingPatterns
* OrganizationalPatterns
* FunctionalPatternSystemForObjectOrientedDesign
* A pattern language for ObjectBasedProgramming in a procedural language.
* PatternsForEffectiveMeetings
* ComponentDesignPatterns
* GraphicsPatterns
* WebsitePatterns
* JavaIdioms
* SonificationDesignPatterns
* Messaging Patterns
----

Individual patterns
* DoubleDispatch
* PromptingStatement
* CircularBuffer
* DoubleBuffer
* ResultObject
* HandsInView to improve skiing (but not sex).
* MakeFearFuel applies to skiing as well but has other uses too
* RecycleBin addresses resource usage
* BuildForTodayDesignForTomorrow addresses system architecture
* ModelViewController
* ModelRendererView
* CustomizerPattern
* UserInterfaceValidator
* CreateWithImmediateEdit
* ClockLock
* CommanderPattern
* Private Class Data Pattern
* AbstractFactory

----

Curios and Relics
* ManagedTables
* Managed Tables revived: SpaceManager

----

We're starting to talk about AntiPattern.

* ProcessAntiPatterns

CorrectiveAction is a proposed classification for those patterns that are used to keep a system stable. There's a big overlap between CorrectiveAction patterns and AntiPattern''''''s.

----

Not a pattern - Not yet UsedThreeTimes
* RoleModels
* OakTreeDiagram
* ProtoPattern
* PersonalPattern
* SpeculationInPatternFormat
* SuccessStory

----

Here are some examples of emergent patterns:

ProducerAndRetail
* AnalysisPatterns - NOT a Part of Kai Bender's PhD-thesis (this description probably applies to something different than what the link points to). By the way, they're all in German. The English versions are still to come. I'm working on it. You will find a pattern that illustrates the communication and negotiation process of a production facility and a retail company as well as the necessary organizational structures. The pattern is very high-level, however, it is a proven scenario that several companies use.
* http://www-emw.inf.tu-dresden.de/~kb/Trading.html - A nice dead link.
EventNotifier - Pattern for Web Event Notification
* http://www.old.netobjectdays.org/pdf/02/papers/ws-rsd/1210.pdf
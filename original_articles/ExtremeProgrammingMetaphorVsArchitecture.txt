There's a lot of discussion on whether the System Metaphor is a valid substitute for a System Architecture. Non-functional requirements (scalability, reliability, etc) are taken into consideration when defining System Architecture. Where do they fall in with XP?

System Architecture helps to maintain ConceptualIntegrity. With XP is this lost, or collectively shared across the team?

Related Wiki Pages:
* ExtremeProgramming
* ExtremeUnifiedProcess
* CollectiveCodeOwnership
* ArchitecturalStylesAndXp
* SystemMetaphor
* InterviewWithKent
* ConceptualIntegrity
* NonFunctionalRequirements
* ArchitecturalStyle
* SoftwareArchitecture
* ArchitectsDontCode

Related Articles:
* XPlorations - July 2000 - Where's the architecture? - http://users.vnet.net/wwake/xp/xp0007b.shtml
Egroups:
* Digest 663/6
----
And indeed, the XP system metaphor may be a suitable replacement for architecture in some cases, but usually in small systems. For many, if not most, software systems, you need more than a simple shared story. How much more you need depends upon many factors.

Taken from The Rational Edge, April 2001, RUP and XP Part II Valuing Differences
http://www.therationaledge.com/content/apr_01/f_xp2_gp.html
----
For more XP implementation issues, see ExtremeProgrammingImplementationIssues
----
CategoryComparisons
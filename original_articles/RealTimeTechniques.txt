There are certain techniques associated with RealTime programming.
Often these are described as "Don't do X", where X is some commonly-used non-real-time technique.
	* pre-emptive multitasking ("Don't finish one thing before you start another -- don't even wait for a "reasonable stopping point". ")
	* keep everything in RAM ("Don't use hard disks")
	* make sure everything takes a bounded, predictable amount of time
	* don't use mark-and-sweep garbage collection
	* Use a RealTime task scheduler, as described in ScheduledTask.
----
Jean J. Labrosse's book, "MicroC/OS-II: The Real-Time Kernel" (from R&D Books, ISBN: 0-87930-543-6) is arguably the best book on the topic. Chapter 2, "Real-Time Systems Concepts" is the clearest explanation of RTOS primitives I've ever seen. (I teach embedded and RTOS programming and have programmed embedded and RTOS systems for 30 years.)
----
someone on the news:comp.realtime 2003-10-10 see also http://ucos-ii.com/

http://www.concentric.net/~Tics/ has several articles on real-time-programming topics.

"Realtime Mantra highlights the key issues in real-time system design. It also cover real-time design patterns and issues in complex software design." http://www.eventhelix.com/RealtimeMantra/

http://surreal-time.com has an online "training course." Kinda fluffy, but useful if you know absolutely nothing.
----
Is there anything useful at the Embedded Systems Academy http://esacademy.com/ ?

Or http://micro.filetap.com/ ? ''[BrokenLink as of 27 Nov 10]''
----
Many EmbeddedSystem''''''s use RealTimeTechniques.
----
EditHint: Should I just move all this info to CategoryRealTimePatterns and then delete this page ?

''Or at least think about layout ...''
----
See: RealTime, RealTimeOperatingSystem, NearRealTime, CategoryRealTimePatterns

CategoryRealTime, CategoryTime
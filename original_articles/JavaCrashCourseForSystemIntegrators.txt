JavaCrashCourseForSystemIntegrators is a JavaTwoEnterpriseEdition centric page, aimed at educating developers who have awareness of products and capabilities of MicrosoftWay, BigIron''''''Way, etc., but with limited or no awareness of:
* CeeLanguage
* UnixCulturalAssumption
* JavaScript is not JavaLanguage
* JavaLanguage skills is not comparable to JavaTwoEnterpriseEdition skills
** analogous to comparing VbClassic to VbDotNet, language is only a tiny percent of the total domain
* ComponentDesignPatterns, in particular EjbDesignPatterns
* MigratingToJtwoee 
* Significance and applicability of the JavaLinks in real-life situations

What is needed is AshortCupofJava type of LearningJava without having to wade through SyntacticSugar meant for the JavaProgrammer.

'''HELP!!!'''

----
'''Technology vs products'''

To an uninitiated developer, it is hard to tell the difference between a feature (spec?) of J2EE, vs a product offering (by a vendor like Sun) to complement their J2EE product line, which may not be compliant to existing specs.

''So how do we get educated quickly?''

----
'''Technology comparison with MS'''

Looking for how the various Java building blocks are mapped to equivalent technology and products from MS. For example, is JiniTechnology comparable to DotNetRemoting?

----
'''Interoperability amongst various J2EE products'''

Sometimes there were stories floating around that two J2EE compliant implementations cannot communicate, possibly a result of using different low level implementation protocols (or other reasons). Are there serious integration problems in a mixed vendor J2EE shop?

''Where do we go get briefed on BestPractice''''''s?''

----
Other questions:

HowToUseEjb. What are various types of JavaBeans and why should I care?

How is J2EE different from the standard edition?

How are the key Java related server technologies / terminologies (e.g. JAXP, JSP, JNI, JINI/RMI, JMS, JDBC, servlets, JCA) fit together?

Besides the use of SoapProtocol based WebServices, how does the Java world allow Microsoft (or BigIron) code to invoke its classes and get results?

How does a Java environment access existing MS ComponentObjectModel based functionality? And what links exist to DotNet ServicedComponents?

Are there resources that summarize and compare implementation features of key Java product offerings?

Are there resources that warn users about interoperability issues, through the use of implementation options that are not commonly used?

----
'''Reading Material'''

* ''MS comparing MTS to EJB (around 2000?)'' http://www.microsoft.com/com/wpaper/mts-ejb.asp
* ''Sun 2002 view on DotNet'' http://java.sun.com/jsp_utils/PrintPage.jsp?url=http%3A%2F%2Fjava.sun.com%2Ffeatures%2F2002%2F07%2Frimapatel.html

WikiPage''''''s
* EjbVsComPlus

----
CategoryEnterpriseComputingConcerns
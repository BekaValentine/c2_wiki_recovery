CodeCoverageTools = tools that enable you measure the CodeCoverage of your tests.

----

'''for Java:'''
* EMMA @ http://emma.sourceforge.net/ - OpenSource, instrumenting ClassLoader as well as offline instrumentor, ANT, fractional line coverage, block coverage
* Hansel @ http://hansel.sourceforge.net/ - OpenSource, instruments classes in ClassLoader, integrates with JavaUnit
* jcoverage @ http://www.jcoverage.com/ - OpenSource and ClosedSource versions, Ant task, line and branch coverage
* Cobertura @ http://cobertura.sourceforge.net/ - OpenSource, free, instruments class files, Ant tasks
* Clover @ http://www.atlassian.com/software/clover/ - ClosedSource (but free for use on OpenSource projects), integrates well with common Java IDEs
* GroboUtils @ http://groboutils.sourceforge.net - OpenSource, instruments class files, Ant tasks
* NoUnit @ http://nounit.sourceforge.net/ - OpenSource (GNU)
* Quilt @ http://quilt.sourceforge.net/ - OpenSource, JavaUnit, Ant, instrumenting ClassLoader
* Gretel @ http://sourceforge.net/projects/gretel - [old version of Hansel?]
* The "Java Test Coverage Tool" @ http://www.semanticdesigns.com/Products/TestCoverage/JavaTestCoverage.html - ClosedSource, Instruments Source, displays results superimposed on browsable source. US$200 as of 8/1/2004.
* JBlanket (Software Information) @ http://csdl.ics.hawaii.edu/Tools/JBlanket/ - a tool for assessing and improving method coverage of unit test cases. It is integrated with JUnit and Ant.

MutationTesting: ''(which isn't really CodeCoverage, but it's related)''
* JesTer @ http://jester.sourceforge.net/ - changes your code, and then runs your tests. (If arbitrary changes to the code don't break the tests, then is your code sufficiently tested?)

'''for .NET (DotNet):'''
* OpenCover @ https://github.com/sawilde/opencover - OpenSource (MIT licence) A code coverage tool for .NET 2 and above, support for 32 and 64 processes with both branch and sequence points
* Clover.NET @ http://www.cenqua.com/clover.net/ - ClosedSource (but free for use on OpenSource projects), C# and VB.NET, statement, method and branch coverage, from command line, Visual Studio, and NAnt (preliminary mono support)
* NCover @ http://ncover.sourceforge.net/ - OpenSource, path coverage, NUnit, NAnt
* CoverageEye.NET @ http://www.gotdotnet.com/Community/UserSamples/Details.aspx?SampleGuid=881a36c6-6f45-4485-a94e-060130687151 - uses a COM component to leverage the .NET profiling API
* "DevPartner Studio Professional Edition" @ http://www.compuware.com/products/devpartner/1563_ENG_HTML.htm - $$$
* "Perform Code Coverage Analysis with .NET to Ensure Thorough Application Testing", an MSDN article on building "A custom code coverage tool" @ http://msdn.microsoft.com/msdnmag/issues/04/04/CodeCoverageAnalysis/default.aspx
* "C# Test Coverage Tool" @ http://www.semanticdesigns.com/Products/TestCoverage/CSharpTestCoverage.html - ClosedSource. Instruments Source, displays results superimposed on browsable source. US$250 as of 8/1/2004.
* "dotCover" http://www.jetbrains.com/dotcover/ Closed source, free license for OSS projects
* "Squish Coco" http://www.froglogic.com/squish/coco/ Commercial, free license for non-commercial use

'''C/C++:'''
* tcov = Sun Unix C profiler.  See "tcov(1)" man page.  It annotates (mangles) your source code to add instrumentation.
* gcov = GNU C/C++ equivalent of "tcov".
* Dynamic Code Coverage for Sun Solaris, Linux, and HP UX @ http://www.dynamic-memory.com/
* "C Test Coverage Tool" @ http://www.semanticdesigns.com/Products/TestCoverage/CTestCoverage.html - ClosedSource. Instruments Source, displays results superimposed on browsable source. US$400 as of 8/1/2004. ANSI, Microsoft Visual6 C, and GNU C dialects all supported.
* "C++ Test Coverage Tool" @ http://www.semanticdesigns.com/Products/TestCoverage/CppTestCoverage.html - ClosedSource. Instruments Source, displays results superimposed on browsable source. US$500 as of 8/1/2004. ANSI and Microsoft Visual6 C++ dialects all supported.
* "Squish Coco" http://www.froglogic.com/squish/coco/ Commercial, free license for non-commercial use
* "C++ Coverage Validator" http://www.softwareverify.com/cpp-coverage.php Visual, interactive code coverage and also unattended command line code coverage. Instruments compiled application. Results displayed as code coloured source code. Languages: C, C++, Delphi, Fortran 95 (any native language for which debug information is available). Visual Studio 6 through 2014.

'''Perl:'''
* Devel::Cover @ http://search.cpan.org/dist/Devel-Cover/ - Statement, branch, path, expression and documentation coverage. 
* Pod::Coverage @ http://search.cpan.org/dist/Pod-Coverage / - Documentation coverage (used by Devel::Cover)
* Test::Pod::Coverage @ http://search.cpan.org/dist/Test-Pod-Coverage - Testing framework wrapped around Pod::Coverage
* Devel::Coverage - older coverage module superseded by Devel::Cover

'''for Python:'''
* coverage.py @ http://www.ravenbrook.com/project/p4dti/master/test/coverage.py - Provides statement coverage data. Part of a larger project: OpenSource-style license is at bottom of source file.
* pylid - http://www.nullcube.com/software/pylid.html
* trace.py (part of Python's standard library)

'''for PHP:'''
* "PHP Test Coverage Tool" @ http://www.semanticdesigns.com/Products/TestCoverage/PHPTestCoverage.html - ClosedSource. Instruments Source, displays results superimposed on browsable source. PHP4 and PHP5 versions.

'''for Tcl:'''
* "Squish Coco" http://www.froglogic.com/squish/coco/ Commercial, free license for non-commercial use

----
----

I have started to use Hansel, http://hansel.sourceforge.net/, an open source CodeCoverage tool which integrates seamlessly with JavaUnit. Hansel is a TestDecorator for JavaUnit. I add test classes incrementally to a coverage test suite with Hansel. We were already quite thorough on unit testing, but actually measuring coverage enabled us to remove more production code, add some tests, and ReFactor code. -- WillemVanDenEnde

----

I have started using jcoverage, http://www.jcoverage.com/, which is also an open-source CodeCoverage tool. It integrates with Ant using its own custom tasks and can report on both line and branch coverage. I have been quite impressed with it so far. -- CraigPardey

----

I have started using Clover, http://www.thecortex.net/clover/, which isn't open source, but is free for open source developers and not that expensive for commercial use. Unlike Hansel, you don't need any magic in your test-suites to make it work, ItJustWorks. Clover can generate HTML/PDF/XML reports and it integrates with EclipseIde, IntellijIdea and NetBeans. After just couple of days, I'm very impressed. -- JuhaKomulainen

"The Clover tool's integration with IntelliJ makes it *very* easy to click on modules with low coverage and see what was covered and what was not." -- a comment by RobertMartin on news:comp.software.extreme-programming

----

Just came across a slew of tools/utilities from the GroboUtils project @ sourceforge. The intentions are certainly impressive. Anybody had a chance to check it out? http://groboutils.sourceforge.net/ -- RaghuHavaldar

----

A good comparison on CodeCoverage tools integrating with Ant can be found at http://www.javaranch.com/newsletter/200401/IntroToCodeCoverage.html
-- MattAlbrecht

----

A list of java open source coverage tools can be found at: http://java-source.net/open-source/code-coverage.
----
A good evaluation of about ten different CodeCoverage Tools is at http://europetravelogue.com/blog/pivot/entry.php?id=41. The reviewer found Emma and Clover to be the best for his needs.
----
Common Lisp has Waters' COVER package: http://www-cgi.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/lang/lisp/code/testing/cover/0.html
It's rather compact compared to some of the other tools described on this Wiki page. -- PaulDietz
----
CategorySoftwareTool
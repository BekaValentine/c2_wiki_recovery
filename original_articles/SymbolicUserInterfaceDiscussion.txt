<SymbolicUserInterface

''"Fundamental unit" may actually be a misnomer - UnitGranularity is certain to be in flux, as terms that may be pairs or triplets, etc., may later become single units. Some claim that the 'fundamental unit' in Chinese, for example, is the sentence, not the character - just as an example of how things go. -- KuniShiro''

Not in this context. In a SymbolicUserInterface, all objects are composed from glyphs. I.e. there is no referenceable unit smaller than a glyph, and everything is built from glyphs(in a sequential way). So "fundamental unit" is by design, it's not incidental. -- LayneThomas

''OK - the notion of sub-granularity messes with the basics of discrete and finite instructions for computing. So just like the discussion on HieraticLanguage - there is a debate as to whether the approach meets the terms of TCL. What would be the advantage of this (perhaps dynamic) kind of system, if it must in the end conform to the TCL requirements?'' -- StevenCooney

Are you using TCL to refer to the programming language or a terminal control language? I don't see how either is related to this discussion. -- LayneThomas

Turing complete - start/finish. IE finite and concise values contradict notions of symbolic placeholders. Unless those placeholders were static and agreed upon, they wouldn't work (as I understand it) in computing situations. If they are static, then they can't really be "symbolic." Isn't this the basic argument? -- StevenCooney (SymBols)

Ah. My example is not turing complete (it's not meant to be) It is a language for users to interact with the system, not a language for algorithmic calculation - any need for turing completeness would be at the function/event level, and would exist as code elsewhere. The symbolic nature is for human understanding, not a "symbol" in the traditional compiled sense. The glyphs act as interfaces to the gui/model, and as new composites built from atomic units (or other glyphs). So you are correct in saying it would not be turing complete in the traditional sense - but that is similar to SQL, a SymbolicUserInterface is just a domain-specific language (user interfaces). I should add that "complex glyphs" have referenceable sub-glyphs, but atomic glyphs do not. Does that help clarify? -- LayneThomas

So it's essentially a kind of pseudocode, which will be mostly parseable - but where conflicts arise, these will have some system by which they are noted, fixed, and reinput to influence/improve some fuzzy logic truth state matrix... Is this sort of on target? -- StevenCooney
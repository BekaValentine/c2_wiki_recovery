Like UseCases, but with more overhead.

A STD contains the following fields:

	* A unique identifier
	* A brief description of its purpose
	* The set of external actors
	* The set of possible triggering events
	* A precondition that must be true before the scenario begins
	* A postcondition that must be true after the scenario ends
	* A sequence of actions/events
	* A set of possible resulting events

And optionally:

	* A set of alternative scenarios
	* A set of nonfunctional requirements
	* A free-format comment section

Placed in a UseCaseMap, they form a FiniteStateMachine of the system.

A group of them can define a ScenarioCluster.

Designed to provide a high level view of the system in English. Consequently, they look much like PDL but for event-driven systems.

As with UseCases, you can construct them from UserStories, or at least individual requirements, by stringing them together in temporal order. In this way, they are useful to give you a higher-dimensionality view of the system than just UserStories, but are consequently subject to higher maintenance costs.

We use them in CarletonUniversitySoftwareSystemsDesign.

----

CarletonUniversitySoftwareSystemsDesign's bouncing link tour takes us to UseCaseMap.
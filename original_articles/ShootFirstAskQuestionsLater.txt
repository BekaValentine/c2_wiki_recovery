The ShootFirstAskQuestionsLater AntiPattern is practiced during CowboyCoding in order to get a working prototype done before DesignByCommittee bureaucrats can bloat the code with all their stupid features.
----
I have often encountered the situation where our business analysts say we need a veeblefetzer.
OK, tell me what this veeblefetzer look like?
Umm, we don't know, we never had one before.
So how am I supposed to write one?
Well, you're the programmer.
How about I make one up, and you tell me what's wrong with it?
Yeah, let's do that.

How is this common combined coding and analysis prototyping pattern different from ShootFirstAskQuestionsLater?

''The above example is not ShootFirstAskQuestionsLater because you asked them the question first, or you communicated assertively.  If you had just seen veeblefetzer on a document and said, "Oh, he doesn't know what he wants anyway, I'll just code it up and see what he thinks," then you are practicing ShootFirstAskQuestionsLater.  You might get it correct or you might shoot the good guy.  --TimBurns''

*Sometimes that's a good pattern (AntiAntiPattern?).  If I don't understand something, I'll implement what I think it is and compare with what the other person thinks it should be.  This only works for small things, though.  --JimmyCerra

----

See: CategoryAntiPattern.
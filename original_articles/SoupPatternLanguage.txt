I have actually seen a collection of patterns (which
look suspiciously like they were inspired by ChristopherAlexander)
in a cookbook devoted to soups (can't remember the name...).  They did not take the
form of a language.  I am interested in developing a
language which can lead me to successfully develop a soup
in constrained situations (such as not enough time or
missing ingredients, utensils or spices).

If I can follow a recipe exactly, then a PatternLanguage
is less useful.  However, any ambiguities in the recipe can be
addressed by the application of patterns.

As always, talking about cooking leads me back to software
development:  How about software development pattern
languages that takes into account constraints such as time
limitations or lack of resources?

For example, JimCoplien's Mercenary Analyst[1]  (Pattern 23 in
Chapter 13 of
PatternLanguagesOfProgramDesign) instructs me to hire a
technical writer.  A great idea, but what if I can't do
that? Can I continue to cook without that ingredient?

-- ToddCoram
Wiki has many pages that explore new, creative, maybe crazy new analogies for software: 
* InformationAsCurrentAnalogy
* Journalism and drama in DisciplineEnvy
* The journalistic scoop in SuccessStatement
* MartialArtsAsSoftwareDevelopmentMetaphor
* AnalogiesFromMusic
* AnalogiesFromCookery
* JazzProgrammer
* FreeSoftwareMusicAnalogy
* SoftwareMastersOfFineArts
* FreeSoftwareLawAnalogy
* SoftwareAsRockClimbing
* CreepingObesity
* ZenConcepts 
* AnalysisAsStorytelling
* SoftwareDevelopmentAsCommunityPoetryWriting
* SoftwareDevelopmentAsaCooperativeGame 
* LowChurch
* SexPatterns
* The mock physics of WikiUncertaintyPrinciple
* TheCathedralAndTheBazaar 
* BioAnalogies
* SoftwarePuzzleAnalogy
* ProducingCodeAsExcretingProduct

Wiki also contains critical discussion of more traditional analogies:
	* ReadsLikeProse still describes an analogy for instructions to a VonNeumannArchitecture machine, forty years after Cobol 
	* SoftwareAndWriting
	* ProgrammingAsEngineering
	* SoftwareEngineering 
	* The very helpful fresh analysis of the engineering analogy in TheSourceCodeIsTheDesign 
	* AnalogyBetweenProgrammingAndManufacturing
	* EngineeringEnvy
	* ChiefArchitect
	* ArchitectAsKeeperOfTheFlame
	* SoftwareIsArt
	* ProgrammingAsArt
	* SoftwareDevelopmentAsCraft

In pages primarily about XP there are some great new analogies, many applying to psychological and social issues:
	* The key salt water aquarium analogy in NonlinearityOfXp
	* The juggler metaphor for XP adoption in NonlinearityOfXp
	* TheAthleticSkier
	* XpTeamCoachAnalogy
	* DrivingMetaphor
	* OneHandOnTheYoke
	* SteerWithYourEyes
	* StBenedictsRule
	* ExtremeIconoclasm
	* ExtremeProgrammingOnIce

Then there is some deeper reflection on metaphor and references to books dealing with it:
	* SoftwareCannotBeModeled
	* ConceptualMetaphor
	* MetaphorsWeLiveBy
	* MetaphorAndOrganizations
	* FluidConceptsAndCreativeAnalogies

With all this analogy building going on, it seems worth asking WhyNewAnalogiesForSoftware.
--------

Here's a try: It is like building a video game where you can choose any scenario and characters you want. But, it has two catches: the characters have to ultimately produce something of value to the external world, and other video-game developers have to be able to efficiently change the game to fit new external requirements. Related: SoftwareGivesUsGodLikePowers. --top
------------
CategorySubjectivityAndRelativism
Sigh.  Let's try this from a different angle.

There is a lifecycle model called "Evolutionary Prototyping".  It has been around since the 80s (at least), and is common in the Smalltalk community.

Researchers who have studied the EP model have found benefits.  The book "Wicked Problems, Righteous Solutions", for example, published in 1990(!) talks about those benefits.  The Construx Software web site lists EP as a Best Practice.

Both texts also talk about drawbacks and risks of EP.  WPRS mentions "less documentation", "less coherent design", and "lower in extensibility" as drawbacks, but feels that EP with real documentation would be "an authentic paradigm".

Beck et al. attempted to fix these problems during the C3 project by requiring other activities during the lifecycle, including refactoring and tests for design and extensibility; user stories, pair programming and refactoring for documentation.  (It is interesting to list the WPRS's bullet points for needed EP documentation: cleaned-up code, adequate commenting, explicit data structure, large routines decomposed, adequate user and maintenance manuals.) 

Today, with programmers, vendors and the press working to make Extreme Programming great, it'll soon be so diluted as to be meaningless.  We'll be seeing a backlash within a couple of years.
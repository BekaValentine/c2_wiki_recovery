AlgolSixty was (and is) widely known as an elegant and concise language; a trait which its creators (TonyHoare and others - TonyHoareOnAlgolSixty) were rightly proud of.

However, it had a fundamental flaw which limited its use; the language proper provided no I/O facilities. I/O was deemed to be an implementation-defined feature; and many implementations defined it - but it was impossible to write a program in AlgolSixty which was both ''portable'' (avoiding any feature not guaranteed to work in all implementations) and ''useful'' (in this case, capable of interfacing to the outside world).

In short, the language was ''too'' minimalistic.

Today, AlgolSixty is pretty much a historical footnote; however numerous other languages have taken a minimalist approach (though not to the extent of AlgolSixty) - resulting in criticism that such languages, though elegant and pretty, are not suitable for "real" work. Much real work does get done in these languages, but the results often don't port between implementations.

* PascalLanguage.  Provided I/O, and some basic (though severely crippled) collection types; but not much else. Coupled with very rigorous typechecking (the variant record hole notwithstanding), this gives Pascal a reputation as a BondageAndDisciplineLanguage. Didn't provide lots of things needed for production code (especially considering the time):  bitwise arithmetic (making systems programming difficult; Pascal is otherwise a good systems programming language, with quite a few advantages over C); any portable way of writing libraries and the like. The paper WhyPascalIsNotMyFavoriteProgrammingLanguage contains much spicy criticism.  In fairness to Pascal; it was being used for things it wasn't designed for, and Pascal has spawned many derivatives. PascalSyntax is arguably one of the most-often-reused syntaxes of any programming language.

* SchemeLanguage.  In many ways, the spiritual successor to AlgolSixty.  A wonderfully concise Lisp dialect, widely regarded as elegant.  Also has a reputation for being unsuitable for "real-world" programming (though Scheme is nowhere near as limiting as Pascal is).  Perhaps that's true in the days of GUIs and networking; OTOH SchemeLanguage's standard library isn't any less comprehensive than that of CeeLanguage.  (Of course, C is regarded as a low-level language for systems tasks, so portability isn't an issue; plus many de-facto standard extension libraries (Berkeley sockets, POSIX, Win32) exist for C - and it's the native language for the two most important OperatingSystem''''''s these days.  Scheme doesn't have this amount of infrastructure and inertia...)  SchemeLanguage also seems to elicit much derision from the CommonLisp community, which is unfortunate.

* ForthLanguage. The language is small, and in fact many Forthers have a try at implementing their own Forth. As the joke goes: if you've seen one Forth, then you've seen one Forth.

A LanguageBridge allows code or script written in one language to execute or be executed by code or script written in another language. Made easy (possible? not sure) by the existence of things like dynamic typing, dynamic binding, etc.

Examples:

* Apple/NeXT's JavaBridge - JavaLanguage--ObjectiveCee bridge.
* RubyCocoa - RubyLanguage--ObjectiveCee bridge

... and many others...

Also, many distributed object technologies have the same effect

* MicroSoft ComponentObjectModel, DotNet
* CommonObjectRequestBrokerArchitecture
* RemoteProcedureCall (mainly for procedural languages)
* XmlRpc and SoapProtocol

(OpenSwordGroup is working on a generic one extensible by writing subclasses of a parser class)

''How is this different from a ForeignFuntionInterface? What about language bindings? Well, language bindings are usually only to a specific api or library.''

[A ForeignFunctionInterface is something embedded within a language to allow it to call another language, usually something low-level (and usually CeeLanguage), perhaps?  Whereas a LanguageBridge is a third-party product?]

----

See AlternateHardAndSoftLayers
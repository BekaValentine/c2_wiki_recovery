An Ode to having to toss favorite tools

''Note - please WikiLink anything you can here!''

----
(Ramblings from another discussion board that I plan to clean up later)

CeeLanguage is hardly the pinnacle of ProceduralLanguages or tools in general. As a HardLanguage, it is designed for *hardware* performance and providing predictable RunTime resource constraints, NOT SoftwareEngineering convenience. It is the "new assembler", with some of the same headaches that AssemblyLanguage had.

It's like comparing a Honda Civic to a Toyota RAV for off-road use. That the RAV beat the Civic for off-roading is not surprising.

If you wrote your PayrollExample in CeeLanguage without using the features of the DataBase much, even I would prefer your CeePlusPlus or CeeSharp version over it.

The lesson is that if you want software-engineering-friendly tools, then you have to get software-engineering-friendly tools.

You seem to be focusing too much on YOUR past when you do mental comparing. It's interesting to note that I grew up on ExBase (dBASE clones). Although the language was a bit clunky, it taught me the power of and productivity of DynamicLanguage''''''s combined with nimble-and-ready DataBase engines. I ran circles around the CobolLanguage, CeeLanguage, and PascalLanguage guys.

ObjectOrientedProgramming was 2 steps backward, with its stiff, hardwired taxonomies and difficult-to-navigate-sift-and-study navigational ObjectPointer pasta. Shifting most of the BusinessLogic to tables just plain made it easier to manage. Code was more or less a low-IQ foot soldier that simply carried out the features requested by the tables. The tables were the dinner menus and order slips, and the program code was the back-room cooks. Nimble tables are addicting and now I had to suffer withdrawal symptoms as the fad pendulum [TechnologicalPendulum] shifted back to ugly, tangled, static, code-centric paradigms. (I know, SmalltalkLanguage and PythonLanguage are more dynamic, but they are still essentially navigational in structure. DrCodd was smart to "fix" navigational. He is the genius, not me. I merely stumbled into his genius.)

I hear that LispLanguage fans suffer similar withdrawal symptoms when forced to use more restricting languages. Once you've been with Tabitha, Ol' Bertha just doesn't cut it.

----
See also FavoriteToolsAndProductivity, NavigationalVsRelational
----
CategoryOldSoftware
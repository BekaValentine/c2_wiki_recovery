JohnSechrest recently asked an email list here in Portland what a course on web design should include. Some readers of the list protested that John (a university professor and ISP founder) might be taking advantage of the list to do his job (curriculum design). I wonder if the real problem isn't just that email isn't the best way to collaborativly do such design. So I ask wiki, what should a student learn in an introductory web design class? -- WardCunningham

''Web design, as in content, or as in programming infrastructure?''
-------
''I know "web designers" that don't even do content.  They're graphic designers that happen to have a clue about the web.  I've also seen "web developers" that can't even write HTML.  The worst of course is the term "webmaster" which can't be relied upon to mean much more than someone who's seen a web server.  The terms are used very flexibly.''
-------

'''Technology.''' How the web works. Browsers, servers, protocols, standards. NetScape, because the standards don't mean anything to them. Unix. Unix. vi. Unix. (Windows.)

	 :	 BuzzwordBingo: Top of the list are HTML 4, JavaScript, cascading style sheets (http://usemod.com/cgi-bin/mb.pl?CascadingStyleSheets), CGI, and Perl. You could also learn Java, C, POSIX programming, Apache, the various browser's versions of HTML hacked tags, one or more of { PHP, ZopeApplicationServer, ASP, JSP }. You could also benefit from learning how to interface with various databases. ActiveX, ADO, and all that Microsoft fun stuff might be useful. If you're into streaming media, RealPlayer, QuickTime and/or WindowsMediaPlayer (and their respective servers) are additional headaches that require much more technical skill to administrate. If you're really interested, ExtensibleMarkupLanguage (XML), although that isn't as necessary just yet (soon, though).

'''Politics.''' Who's who and how they work. IETF, W3C, ITU, cybersquating, jurisdiction, privacy. At least brush up on the law in your country and the law in the U.S.

'''Content.''' How to draw. How to write. How to balance. How to unify. Learning how to use the "hyper" in "hypermedia" is a challenging skill as it's (kind of) new to the world. Marketing.

'''Culture.''' "BTW, IMNSHO, RTFM, esp. RFCs." 

'''Usability.''' Ergonomics and accessibility. See LarryConstantine advice at http://www.foruse.com/articles/details.pdf

'''Promotion.''' If no one can find your site, is it really there?

----

I added "Content" above. Quite often, a "web designer" is one of two things, but not both: either it is a graphic designer who decided to play with Shockwave or it is a programmer who decided to play with JavaScript. It's not possible to be a "web designer" without both content ''and'' technical skills. It is possible to be a graphic designer with graphic designing skills and a programmer with programming skills and a system admin with system admin skills. 

It's just like a sculptor who works with welded iron. The sculptor needs to know how to shape metal before any of the artistry comes into play. -- SunirShah

P.S. Speaking of marketing: of course, we deal with all the above on MeatballWiki.

-----

I can't even evaluate any of the suggestions on this list without knowing whether John is interested in the content side of web design or the programming side.  The above list is straddling the area between them, rather than hitting the sweet spot of either.  --AlistairCockburn

-----

I'd be tempted to say that the best web designer would be a person with knowledge of graphic design, programming, content structuring and basic systems administration. A curriculum that'd teach all that would be wonderful, if not too difficult for most people.

-----

I've been recently hired as a "Web Communications Designer" but after two months on the job, I still haven't much of an inkling of a clue what that might be. Web is so interesting because it combines synchronous, async, linear, dislinear, graphical, programmed, algorithmic, even Wikian. But somewhere in there I think they got something right when they came up with my job title, because communications is really central to Web design, imho. --DwightOwens

-----

An introductory web design class should teach the student what the Web is, how it works, and why and how it is unique in computer software application space.  It should demonstrate application development using HTTP and an example application in which clients can create and modify and destroy Web resources.  It should demonstrate how good web design takes advantage of HTTP caching and security intermediaries.  It should cover the conceptual nature of web resources and some of the principles of URI and hyperlink.

A class like that might come as a bit of a surprise to those who were expecting a MacromediaDreamweaver tutorial, but the design of a web of resources goes deeper than the presentation layer.

----

What webdesigners should know:
	* how to write clean markup (e.g. logical, semantic tags only, simple structure, ...)
	* how to separate content from style by using CascadingStyleSheets
	* how to write accessible pages
	* they should be able to talk with the other people in the team, so they should have a basic understanding of 
		* server scripting
		* databases
		* XML
		* Corporate Identitiy / Corporate Design
		* Marketing
		* Communities

	* disadvantages of frames and table-based-layouts
	* disadvantages of proprietary tags
	* disadvantages of frontend-scripting
	* what searchengines do

----
CategoryWebDesign
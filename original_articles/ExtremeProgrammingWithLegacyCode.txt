Are there any considerations to take when implementing XP on projects already underway? What about systems already running in a production environment? Should test-code-refactor be done any different?

Egroups:
* Thread: RelentlessTesting ContinuousIntegration & legacy C++ code 
*** http://groups.yahoo.com/group/extremeprogramming/message/15109
* Thread: Adding Features To Legacy Code 
*** http://groups.yahoo.com/group/extremeprogramming/message/15560
* Thread: What would you do? 
*** http://groups.yahoo.com/group/extremeprogramming/message/18187
* Thread: Test-first even works for legacy code 
*** http://groups.yahoo.com/group/extremeprogramming/message/18358
* Digest: 552/6, 553/2, 553/7, 567/2, 568/8, 570/3, 571/13, 571/20, 572/11, 700/19, 700/22, 705/9

Articles:
* http://www.objectmentor.com/resources/articles/WorkingEffectivelyWithLegacyCode.pdf by MichaelFeathers

Books:
* WorkingEffectivelyWithLegacyCode by MichaelFeathers
----
My PhD thesis was primarily about legacy systems: what they are, how they got that way, how to deal with them, and how to stop them from happening again. The main thrust of it combines a lot of the lessons from XP and other agile methodologies (particularly Scrum and Crystal).

Although it was awarded by a university, in large part it is actually based on work on some real systems in industry (with an industrial partner company).

I have just got around to putting it on the Web (it was awarded in August 2001, so I have been a bit slow!):

''[broken links removed]''

If you do read it, I would be very interested in your thoughts.

-- AnthonyLauder
----
See: ExtremeProgrammingImplementationIssues, UnitTestingLegacyCode, UnitTest, RefactoringLegacyCode, AddingFeaturesToLegacyCode, LegacyCode

CategoryExtremeProgramming
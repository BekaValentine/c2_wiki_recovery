This is pretty obsolete. I last updated it in 2007 or so.

Since someone else created this page for me, I might as well fill it in. I'm going to run off at the mouth a bit, and, of course, talk mostly about things that I am interested in and therefore do well.

In 2005, I gave a talk at XPDX in January on "C++ and XP. It works well." I also gave a talk with DianaLarsen in April, on "XP from a Teambuilding Perspective," and then I gave a talk on Courage.

Since then I've taken over as XPDX organizer. I haven't given many talks; I'm trying to get others to give them. If you want to give a talk, email me.

I've both been a member and a coach of a couple of successful XP teams. I've done XP both in C++ and in Python, quite successfully. I have shipped products, many times, using XP, with only one late release out of around 15 total (the feature set was determined to be more important, so we missed the release date by 3 weeks).

I have recently accepted a job at Blue Volt. This is an impressive group of people writing useful software. Most importantly, to me, we are also a group of people with the drive to build an excellent team. Every person on the team is constantly pushing themselves and each other to make a better team, better processes, and better software. This will become a top-notch XP team. They're already damn good.

I believe, very strongly, that the reason that XP works is because it encompasses many of the aspects required to build high performance teams. Every team that I have done XP with has been a high performance team (eventually). Much of that is because XP does a good job at focusing the team (and its management) on the things that are important to build trust and team play. Although I do not consider myself an expert teambuilder (my old manager was better than I), I am good at it.

I'm a big fan of C++ templates. I'm not quite a template metaprogrammer, but I do create metaprograms as needed to ease the rest of development. I find templates to be a clunky syntax that is useful for extending the types of solutions expressible using C++. With effort, the interfaces can be cleaned up and all of the ugliness hidden, so that a template library is just as easy to use as any other - and is capable of doing things that C++ is not. Check out http://www.boost.org/ for some good template libraries.

I find Python dictionary programming to be an interesting type of indirection, as well. It handles a very similar set of problems to templates (allowing programmatic manipulation of the binding between syntax and semantics or even type of semantics). However, Python's dictionary stuff also allows a number of interesting indirections which templates do not, and has a much better syntax. One of my current projects is an attempt to translate many Python dictionary programming techniques into template metaprograms. If done properly, this should allow performance improvements for compiled Python code in all cases where the needed information is known at compile time, without any change in the code path for runtime dictionary techniques.

Finally, I'm a natural born designer. I often need someone else to bounce ideas off of, and to help keep things simple. However, I have rarely run into a problem that I couldn't find a good solution for within a few minutes (almost two hours on the longest, so far). Sorry for the braggadocio, but there it is.

I'd enjoy problem solving with people, or just discussing programming and swapping stories. If you want to get in contact, reach out on LinkedIn or send me an email.

----
Does amazing things with C++

Best hair in XPDX

--Rik

''Thanks, Rik.  --ArloBelshee''

----
Where is some info about the AgileToolkit (the meta-installer) that you mention in your PodCast: (http://agiletoolkit.libsyn.com/) -- FrankGerhardt.
----
CategoryHomePage
A guide to relational patterns or models

''Note that most, but not all of these are primarily RelationalDatabase patterns.''

--------------

* AccountingModeling
* AccessControlList
* EntityRelationshipDiagram
* CampusExample
* ConstantTable
* ObjectsAreDictionaries ''- somebody deleted schema there''
* PartyPattern (issues of addresses and contact info - ContactAndAddressModels)
* AttributeTable
* TestDatabase
* DataDictionary
* StarSchema
* PartitionedGraph
* GraphAlgorithmsWithTables
* GenericDataModel
* SeparationAndGroupingAreArchaicConceptsDiscussion - Source-code aspect management

----

Are they really patterns? (or maybe a better name would be model examples?).  Certainly CampusExample, PartyPattern,  AccountingModeling and
AccessControlList look more like examples or instance than like patterns. (By comparision, in the OO world, Singleton, Strategy or are patterns, but Array, Stack or HashMap are not... or are they? (IMO they are examples of Collection management classes))

''They may be "patterns" within a given industry. It's a matter of perspective. Generally there are "computing space" patterns, such as AccessControlList and ConstantTable, and domain patterns such as CampusExample and AccountingModeling. I find it difficult to say that one is "more patterny" than another. We don't really want a LaynesLaw battle over "pattern" do we :-) --top''

-----
CategoryPattern
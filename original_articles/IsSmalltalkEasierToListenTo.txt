Is it easier to ListenToTheCode in Smalltalk than in C++ or Java?

----

From CouldExtremeProgrammingHaveArisenWithoutSmalltalk:

I have no trouble listening to C++. It took a few years before I could hear it clearly, and it talks slower than an interpretive language, but if you you're a little patient you'll hear it. 

----

C++ is intrinsicly noisier than Smalltalk. All those type declarations, all that syntax, all that superfluous detail. It is harder to hear the signal against all that noise, and you can't shut the noise up.

''So it has a broad accent.  You tune into it after enough exposure.''

It's not so much an accent as a series of bizarre verbal tics.

''Sometimes, type annotations are signal and not noise.  (In particular, a type annotation which specifies some part of the requirements, '''is''' signal--if nothing else, it's a built in UnitTest of sorts; one which the compiler will happily check for you).  Other times, of course, it's noise--especially when you want the type of some term to match the type of some other term.  As far as other syntactical issues--a lot of that is personal preference.  I have a hard time arguing that "anObject send:message" is inherently quieter (or inherently noisier, for that matter) than "anObject.send(message)".''  

----

Which do you find it easier to listen to - ''really'' listen, not just nod from time to time - an obviously bright but not very talkative person who is given to expressing things in an abstract but always precise manner; or someone who just loves chattering about all kinds of things, regardless of how much they relate to the subject at hand ?

Code is probably like that, too.


Here are some suggestions for new features to add to ASP Wiki. If any feature gets incorporated into the standard version at AspWiki, please delete it from here.
----

AspWiki is by far the easiest wiki I have installed to date!  Thanks for the automatic .mdb file creation!

Unfortunately, AspWiki is very WEAK in features and presentation.  The Perl systems seem to have a lot more maturity as a product.

	 :	''See below for recent changes and enhancements.''

Things I would like to see:
	* Support for embedded html!  I want to put some tables in some pages.
	* Templates to clean up presentation
	* Logo support

I would LOVE to see a full featured Asp''''''Wiki!!!!  I would even pay a reaonable fee for it!

''Rob, what's a reasonable price?  I'd be interested in doing this development.  I suppose Ward would need a cut! -- ChrisBaugh''

I think that DolphinWikiWeb is a very good baseline for a target feature set.

RobertShurtleff
----
I'd love SourceSafe integration to track changes.

CadeRoux
----
Search has been added.  Splitting the Topic names has been added.  Master Index has been added.  Top Page has been added.  Image tags.  Get the latest source.  Right click here:	http://home.adelphia.net/~dinoch/wiki.asp . 

Embedded HTML doesn't feel very wiki to me.  Add it if you want it, I guess. 

Template support -not sure what you mean here.  Can you give me an example or working illustration? 

--DinoChiesa, 31 may 2001

----

Hi Dino, here are some ideas I'd like to work on with you.  (I've been a contract ASP developer since ASP was introduced.)

Store the pages as files inside the directory pointed to by the virtual root.  Write the pages as html, but don't include an extension because that just adds a needless complication for users (was that .html or .htm or .asp they were supposed to add after the topic name?).  Surf to http:''''''//server.com/wikiVRoot/Title to browse the page without invoking ANY asp code (except triggering global.asa's Application_On''''''Start if it hasn't been triggered yet).

The top of the body section has:
 <h1><a href='Home''''''Page'>
  <img src='<%= Logo''''''URL %>'>
 </a>
 <a href='wiki.asp?Action=Search&Title=<%= Topic''''''Title %>'>
  <%= Topic''''''Title %>
 </a>
Click on the logo to return to the home page for the wiki site.
Click on the page title to do a full text search for the topic's title string.

The bottom of the body section has:
 <a href='wiki.asp?Action=Edit&Title=<%= Topic''''''Title %>'>
	Edit text
 </a> of this page 
 ( Last edited <a href='wiki.asp?Action=Diff&Title=<%= Topic''''''Title %>'>
  <%= Modify''''''Date %>
 </a>
 <br>
 <a href='wiki.asp?Action=Find&Title=<%= Topic''''''Title %>'>
  Find''''''Page
 </a> by searching
 (or browse 
 <a href='wiki.asp?Action=Like&Title=<%= Topic''''''Title %>'>
  Like''''''Pages
 </a> or take a 
 <a href='wiki.asp?Action=Tour&Title=<%= Topic''''''Title %>'>
  Virtual''''''Tour
 </a>)

Actually, instead of using <%= ... %> for the script to generate the HTML every time the page is accessed, use the Scripting.File''''''System''''''Object to generate the page as a static HTML file when a Post event is received.

wiki.asp has a simple structure:
 select case (server.request''''''Variables("Action"))
  case Search : Handle''''''Search 
  case Edit : Handle''''''Edit 
  case Diff : Handle''''''Diff
  case Find : Handle''''''Find 
  case Like : Handle''''''Like 
  case Tour : Handle''''''Tour 
  case Post : Handle''''''Post 
  case Copy : Handle''''''Copy 
  case else : Show''''''Polite''''''Message
 end select

The edit page refers back to wiki.asp with action set to Post or Copy.

-- ChrisBaugh
----
Chris: I am not sure if the static HTML approachs works. Remember, WikiName''''''s are displayed in different ways depending of if the WikiName refers to an existing page or not. You would have to check for existing WikiName''''''s at every page access. That can be implemented, though. -- HasseOrava

----

The idea of pre-rendering the pages as HTML and storing them is intriguing and of course would yield some nice perf improvements.  But... I am thinking #1, that high-perf AspWiki is not yet in use, anywhere. and #2, what if someone wants to render a page as XML?  or some other non-HTML format?  So rendering at request time feels right to me. 

Also, re-architecting the app is attractive, but moving to multiple separate files breaks the current simplicity of AspWiki.  To install it you need to copy only a single file. This is a feature.  So I have resisted breaking out into modules. 

--DC

----

New Features I would like to see: 
* Authenticated access (using NT Authentication) 
* Administrative rights - setting page colors and properties, deleting pages, etc.  
* Support for locking - to prevent inadvertent over-writing by concurrent editors. 

Anyone want to sign up? 

----

How about revisions?
''Revisions are now stored, get AspWiki 1.47.  But still, no diff. ''

----
I would like to be able to add attachments. Is this possible? The admin rights and support for tables would also be great.

----

A wiki based on AspWiki is now running at http://lambda.vze.com/wiki.asp. This variation is code-named WikiAsp 

----

Templates can be done in CSS.  ASP Wiki is XHTML compatible so it should be easy enough to implement with minimal changes to the actual source code.
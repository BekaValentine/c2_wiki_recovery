RdbmsFriendlyAppLanguage

(Based on comments in ReinventingTheDatabaseInApplication)

Suppose you are an application developer who is also a RelationalWeenie. The current techniques for integrating RDBMS and databases are not very convenient. Here are some initial suggestions to ponder:

* Oracle's PL/SQL and similar offerings from other vendors may serve as examples of a strong-typed language that integrates fairly well with a RDBMS. However, it is not for those who like dynamic typing, and the syntax style is perhaps a bit archaic and/or verbose. Then again, it may match the archaic SQL better because of that.

* Use dollar signs or some other marker for non-column variables and non-dollared names for columns. This would be both outside and inside of a query.

* Extend declarative query conventions to cursor-oriented constructs, similar to ExBase. This way if one has to use the cursor (loop) approach, the transition effort and syntax/convention difference will be minor. For example, loop and function conditions with WHERE clauses. Example:
    loop in myQuery where amount > $minprice order by store_id
       myFunction(amount, $minprice) where store_id <> $storeX
       myFunction2(columnY) where closedate > $targetDate
       ....
    end loop

* Make quoting SQL text not necessary.

* Toss SQL for a modernized, programmer-friendly relational QueryLanguage. ''Like TopsQueryLanguage or TutorialDee?'' ''Or Linq (MicrosoftLinq) + DotNet''?

* Internal or local re-querying of "external" queries. For example, you may query a record set from Oracle, and then query it again with-in the app's built-in or default local database engine.
-------
See Also: ExBase
----
CategoryQueryLanguage
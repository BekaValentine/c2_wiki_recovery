StateOfTheArt is where we are now - practice as opposed to theory, WhatIs as opposed to W''''''hatOughtBe.

For the topics covered in WikiWiki, StateOfTheArt is probably best measured in terms of the available and commonly used SystemsSoftware application platforms of the year and the features embedded therein.  This includes programming languages, paradigms, operating systems, middleware, standard protocols (TCP, IP, HTTP 1.1, SSL), standard data transport formats (e.g. ASCII, UTF-8, HTML 4.01, YAML 1.2, XML), standard data persistence systems (RDBMS, FileSystem''''''s), etc. 

Some ComputerScientist''''''s put a lot of effort into advancing StateOfTheArt. They look for the KillerOperatingSystem, the NewOsFeatures, aim to KillMutableState or perhaps make SoftwareTransactionalMemory and ResumableException''''''s available to everyone, hope to embed more KeyLanguageFeature''''''s and examine FileSystemAlternatives. And so on.

Other programmers are more professionals in a craft and use today's StateOfTheArt to produce useful and competitive software products. One shouldn't confuse advanced features, even those proven experimentally, with StateOfTheArt. It's these craftsmen, masters and otherwise, who ''define'' StateOfTheArt in any given year.

See StateOfTheArtLanguages, http://en.wikipedia.org/wiki/State_of_the_art
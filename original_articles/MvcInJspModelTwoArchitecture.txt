On ModelModelViewController I said:

"As a point of general principle, people who talk about MVC architecture (such as people in the J2EE and JSP communities) should take it upon themselves to understand the historical meaning and implications of the terms they use, so as to eliminate confusion about WhatsaControllerAnyway, and to be aware that ModelViewController often means ModelModelViewController in the original Smalltalk implementation of the paradigm."

Perhaps as a more practical consequence, we in the J2EE / JSP communities should draw upon the original meanings [of the terms DomainModel, ApplicationModel, View, and Controller] to establish consensus on a SystemOfNames for JSP Model 2 architectures and the abstractions therein.  For example, the JavaBeans used by JSP pages in usebean tags are really like ApplicationModel''''''s.  Let the debate begin...

--RandyStafford

----

What I found works is to use a Servlet as a controller that will delegate to a JSP(view) and let a simple JavaBean be the model that only lives through the request. That's it. I've also used XML as the model and XSLT for creating the views. But what I have yet to see, is a really nice example of MVC in a webbased world because the webbased world is much different to a normal application. Since webbased systems is carried by the HTTP protocol which is stateless I have some problem mapping this architectural pattern more than to what I'm currently using it as. Regarding PetStore they are trying to do just too much with MVC in a web architecture and it becomes some unuseful garbage. 
--PeterAxelsson

----
MMVC isn't MVC. MVC is just a basic pattern. It doesn't cover the problem of reuse of MVC to do composite MVC. It doesn't cover the problem of MMVC. And so on.

Then Jsp and JavaBean views are the view. Actions are the Controller and JavaBean Models are the models. And you have a MVC pattern.

-- BernardDevaux
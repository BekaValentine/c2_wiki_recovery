Many developers have argued about building automatic pattern software (i.e. a PatternsTool or PatternSolver)
* Those for it argue that it can serve as a general template the developers can tweak as necessary (see PatternSolver).
* Those against it argue that it misses the point (see KoansMetaphorsAndParables).

Both sides might reference the PatternHaltingProblem.

Suppose:
* We have a prototype PatternSolver program.
* Under certain circumstances, it can solve the problem properly, guiding the developer to the optimal solution.
* Under other circumstances, it cannot solve the problem properly, needing to defer to the developer the burden of finding a good solution.
* The PatternSolver needs a formal way to determine when it needs to defer to the developer.

''The question is if a PatternSolver can know when defer to the developer.''

Note: a PatternSolver is also limited by the GeneralHaltingProblem limitation for TuringMachine''''''s. That is, a PatternSolver would not be capable of solving for itself completely.
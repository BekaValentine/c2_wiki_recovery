IoGame is a game I wrote as an entry in the IoLanguage game programming contest. It is a multi-player web based card game loosely modeled on Target. If you play IoGame, consider posting your high score here. You can run up points forever so we are looking for high points per card averages too. -- WardCunningham

For information on the contest see http://www.iolanguage.com/blog/blog.cgi?do=item&id=43 ; to read a review of Target see http://www.enginuity.com/target-review.htm ; for a write up of my experience and the source code see http://c2.com/~ward/io/IoGame.

----
Marathon (highest point count ever)

* 1568 points averaging 2.453 points per card -- WardCunningham

----
Sprints (best per card average after at least 100 points)

* 115 points averaging 3.108 points per card -- WardCunningham


----
Tournament (best average against competition)

* no tournaments yet

----
Hosts (and best times to play)

* No hosts available yet 


----
'''Q:''' But where can we play it?  Are you going to host it on the c2 server?

'''A:''' I'd like to, but I ran into dependencies when I tried to install Io there and I've yet to figure them out.

'''Q:''' And when can we see the source?  I get nostalgic for NewtonScript every time I read some IoLanguage source... -- IanOsgood

'''A:''' The source, 1000 lines of Io, is available under BSD license from the ~ward link above.

'''Q:''' I am trying to host IoGame by myself with IoServer20051017. But IoGame does not start with error, 'Sequence: does not respond to html'. Is there a patch?

'''A:''' Yes. http://ruseel.cafe24.com/iogame/iogame.diff (broken link)

---------------

I cooked up a new kind of unit testing while writing this game and wrote this report about it ...

* http://c2.com/~ward/io/IoGamesUnitTests.pdf

''from the paper ...''

This report classifies the various forms of unit tests present in a single application developed using an experimental unit-testing 
framework for test-driven development. We find that there are 17 different kinds of asserts that fall into 6 broad categories. We 
consider this diverse for a 1000 line application and consider it a confirmation of the utility of embedded unit tests. 

''Do you do this for fun?'' -- ArlenCuss
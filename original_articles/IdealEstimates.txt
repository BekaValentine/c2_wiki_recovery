From LoadFactorArithmetic about the C3 project: <<Developers consistently report ideal estimates and ideal actuals>>

This is an interesting assertion or statistic. I have never been on a project where the people's estimate after the fact was anywhere close to their estimate before the fact. Usually, if I show them their estimate from before the fact, they just laugh hysterically that they could have produced such a ridiculously low number.

I am guessing the close correlation on the C3 project is due to lots and lots of 3-week cycles. Anyone else have experience on pre- and post-estimates of IdealProgrammingTime for a task?

-- AlistairCockburn

----
Recall that we are estimating ''ideal'' time, which makes the problem easier since overhead is factored out by the LoadFactor (or so I claim).

I can think of two explanations for the fact that they do in fact generally show a good correspondence among incremental estimates on the same task:

	1. Learning effect due to repeatedly estimating: they get to do it a number of times every week. In the IterationPlanning meeting, they estimate the task the first time, then a time or two every week they are asked, How many ideal days do you have in so far, and, How many ideal days do you have to go.
	2. They could be remembering what their original estimate was, then saying to themselves, I'm about half done, therefore I have one day in and one day to go.

I believe the former more than the latter because often they will report one day in on a three day project and only one day to go (because they got a break or a good idea, or one day in on a two day project and three to go (because they got something wrong). If they were using method 2, errors would show up in load factor rather than done / to go numbers. -- RonJeffries

----
CategoryExtremeProgramming
P''''''hatWare has UserInterface features that someone on the dev team, ProductManager or developer, thought would be a cool (i.e., the product is in a fashion show) deviance from usability. The term derives from the word "Phat" which means "cool", and that Phat sounds like fat, the opposite of lean, and therfore the opposite of LeanProgramming (the application of LeanThinking to programming, which basically means agile program).

Example phatware:
* Quicken has a feature where every time you enter a transaction, a loud cash register noise emits from the PC, annoying everyone within earshot. Not all that easy to turn off either.
* Many companies make WebBrowser apps that only run in InternetExplorer. It's cool because it's in a browser, yet it gives up all the benefits of being MicrosoftWindows only. The worst of both worlds. Sometimes to make it phat they do all sorts of crazy stuff - JavaScript controls that are hard to use.
* Media players are a typical offender. Instead of making the program easy to use for those familiar with the OperatingSystem windowing paradigm, it looks like a phat stereo console.
* VisualStudio (all versions up to and including DotNet). Those docking windows are sure phat. Who cares that while I am editing a text file I don't need huge real estate taken up by the stack/debug windows or that it takes 100 clicks to move my window choices around? It's phat!

----
You're wrong about VisualStudio. I use VS every day, and the docking windows are extremely useful, configurable, etc. The environment conforms to my needs, not the other way around. And if I want my TextEditor to take up most of my screen area - and I often do - it's trivial to do so. Comparing this work environment to the hideous, bloated, unusable interfaces for media players (which I generally hate) is simply wrong. -- ArlieDavis

''When you undock a window to get rid of it, you don't find it takes several minutes to get it back?''

----
I HATE docking. How much time has been wasted when you accidentally undock/dock something? WHY WASN'T IT ADDED TO THE UNDO LIST? This should be its own DesignPattern. Never design something dockable that can't be Undo-ed.

''Do you really want your undo button to undo BOTH changes to a document and changes to the user interface? Personally, my expectation is that when I hit the undo button, it undoes what I last changed to the document. When I don't see my change revert back, I inevitably start spamming the undo button.''
----
man i hate having to dock/undock, one time at work, after having to dock for what felt like the thousandth time, i was fed up of it, and so, just started crying, banging my desk shouting AAAAAAARRRRRGHHH!!! WHY MUST YOU TORMENT ME!?. true story, i am now nicknamed "docker" for my many tantrums over docking. 

CategoryDevelopmentAntiPattern
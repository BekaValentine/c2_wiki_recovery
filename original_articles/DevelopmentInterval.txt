It is extremely important to think of your development efforts as discrete, incremental efforts.

On a short project, you need to clearly define the start and stop points so you can drive for completion and success.

On a long project, you need to define incremental, interim deliveries that are implementations of real working software. By forcing implementation, you learn a lot about the team, about the tools, about your design, and about your users. You give yourself a nice, clean, formal opportunity to change personnel, change tools, change approach, etc. You feed this learning into the planning and execution of your next interval.

This idea is at the core of WardCunningham's EpisodesPatternLanguage, and a key part of the timeboxing that is important to XP.

A standard DoIt DevelopmentInterval is 4 people, 8 weeks.

I believe it significantly helps in estimating projects to have a "standard unit" like this to work from.

The best graphical illustration I've seen for why this is important is AlistairCockburn's ValidationVee. -- BillBarnett

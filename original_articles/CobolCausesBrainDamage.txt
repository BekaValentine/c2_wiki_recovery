Back in the summer of '58, the US government, emboldened by its continuing success on the world stage, decided to define a computer language. It gathered all the luminaries that Captain GraceHopper could locate and invited all the computer companies to a massive confab in Washington DC.

Their plan was straightforward: the computer industry would standardize on one language. All the greatest language theorists were gathered into one group that would produce a spec for this ultimate language within 3 years. All the application experts and what passed for software engineers in those days were gathered into a second group that would concentrate on a universal data model or "data-base". 

As an afterthought, a bunch of file clerks and administrative assistants were tasked to survey then-current languages in order to produce a bureaucratic structure for managing the language long term.

It was a good plan, a far-sighted initiative. It might even have worked. But three months later the Honeywell company, experimenting with a marketing strategy perfected by MicroSoft three decades later, tossed a grenade into the process. It championed a new language of its own: ComTran.

ComTran was a nice little language. By today's standards it may not hold up very well, but the US government was worried. ComTran seemed likely to gain broad acceptance, and then there would be no single standard language. Confusion would reign as vendors and researchers fought political wars over dialect and idiom in a PatternOfBabel that would seriously hinder national productivity. This is just what CobolLanguage was intended to prevent.

A decision had to be made, and it had to be made fast. The language definition group were a bunch of long-hairs who would never be able to move quickly enough. The "data-base" guys, CODASYL, were so deeply entrenched in inscrutable but obviously important definition work - later released in the form of enough woodpulp to denude Nebraska - they could never switch gears in time. So it was the short-term committee, that noble band of file clerks and administrative assistants, to whom befell the task of saving the free world from chaos.

These guys might not have understood languages, but they knew paperwork, deadlines, and politics. They were given six months. They took just four. And so COBOL-59 was born. The government immediately announced it would accept no other language in its contracts. The industry rallied around. The long-hairs, now tasked with producing a language backward-compatible with drivel, presented a tombstone to their leader and disbanded. ComTran was last seen slumped over a shotglass in a bar in Jersey. 

So you see, not only does COBOL cause brain damage; brain damage causes COBOL.

-- a true story of our chequered past from PeterMerel.

------

I heard the "clerks" largely borrowed from Grace's earlier compilers/assemblers such that COBOL generally resembled those earlier works. They copied what was proven to at least work.

----
See also HadToUseCobol, BrainDamage, WhyWeHateCobol, SmugCobolWeenie
----
I'm not entirely convinced by this...makes for a good story but ComTran was invented by Bob Bemer while he worked for IBM and was a straight-assembly precursor to COBOL at best.  Also, reportedly, the long-range committee for COBOL was never even formed and the "data-base" guys were never given a go-ahead.  There doesn't seem to be much record of any "scandalous coup" by Honeywell or even evidence of the possibility.

But Who Knows.
----
CategoryStory
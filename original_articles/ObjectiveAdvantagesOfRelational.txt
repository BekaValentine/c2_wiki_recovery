Proponents of the RelationalModel often assert that the Relational Calculus, and the more recent Relational ALgebra, are the most effecitve means for managing large databases. However, detractors assert that it is insufficently abstract, that it contradicts the principle of InformationHiding, and that it lacks general applicablity outside of database administration.

This page is set up so that RelationalModel partisans can assert any ''objective'' and preferably quantitative reasons why RDBMS methos are superior, either in a specific problem domain or in general, as well as for any counterarguments by RelationalModel detractors.

----

As a relational fan, I don't necessarily claim it is objectively better (if done right). I just personally enjoy it. It maps well to the way I think (although I would like to see SQL replaced with a better RelationalLanguage). However, I will point out some areas to focus on if you are looking to investigate possible advantages. The first is related to consistency. Because of relational normalization rules and relational algebra rules, there are fewer variations per different developer or shop due to the rules reigning in the variations compared to OOP. For more on this, see OoLacksConsistencyDiscussion.

The second area to focus on is the joys of CollectionOrientedProgramming (COP). Many collection-oriented operations are both conceptually simpler and code-wise simpler under COP (however, "conceptually simpler" can be subjective).  Many of the code contests on this wiki such as DotProductInManyProgrammingLanguages will demonstrate how well COP's can do for certain kinds of problems. COPs tend to be popular in the financial sector, and not just RDBMS, where patterns and statistics are often needed from larger data sets.

As far as complaints about "information hiding" see DatabaseNotMoreGlobalThanClasses and GateKeeper. Keep in mind the question, "hiding what from who?"

--top

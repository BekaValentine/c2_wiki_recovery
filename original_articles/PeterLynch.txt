I am a programmer who has written a few successful commercial applications in payroll/HR, ConfigurationManagement and Manufacturing.

I come up as INTP on MyersBriggs, and Idealist (NF) on http://www.advisorteam.com/temperament_sorter/.

I am interested in the techniques of system's development generally.

I was described once as an iconoclast who considers IBM ante-deluvian. I like that.

----

 I like Revelation. (1)
 I like Open Insight. (1)
 I like Pick. (1)(conceptually)
 I like Adabas DB (1)
 I like Natural 
 I like CobolLanguage
 I like Primos CPL. (1)
 I like FortranLanguage
 I like NEAT/3 (AssemblerLanguage)
 I like RSTS Basic Plus. (1)
 I like ISPF/2 and CLIST and PDFs. TSO and its services. (1)(Believe it or not)
 I like DelphiLanguage
 I like TotalDataBase (1)
 I like SupraDataBase (1)
 I like IDMS
 I like VSAM
 I like VMS, RSTS, DOS, CP/M, MASTER, NOS, MVS, UNIX et al,
 I like RebolLanguage (1)
 I like RubyLanguage (1)
 I like WebSphere (1)

 There are distinguishing points about each of these.

 These are all solutions to the same problem - communicating effectively with a computer.
 They are all quite different.
 They must have something in common.

   (1) These have the JoyfulSoftwareEthic IMHO
----

Saw your remarks in KaiZen page some time ago and wonder whether you have more to add there, like whether it is a fad that passed away at the sites you know of? Or better, some success stories that last.

'' I could not write a good summary of the book. What it did for me was cement a belief I held for a while, and this belief was at the time the reason I was succeeding technically. This idea of stopping the entire production line when an exception occurs - effectively, whatever is started will succeed, or all bets are off.''

'' I believed that there should be no error paths in application code. This is the same philosophy - if a process is triggered, it either succeeds in doing what it is supposed to do, or the entire process tree halts - drops into an error state. I had written code to do this in the applications I was building at the time.''

'' Doing this makes a process invocation an assertion - any exception generated within can be handled by an external error processor''

'' (I like the refactoring of this page above - thankyou)'' -- me

----
Wiki at http://sites.google.com/site/argnosis/

----
CategoryHomePage
What's the best way to ReFactor XML? Are there RefactoringBrowser''''''s for XML? How are we ever going to reconcile all these competing standards? We need some kind of adequate tools and repositories so we don't keep reinventing the wheel - where are they?

----

Not quite the same thing, but in RefactoringClassIntoXml I talk about a recent experience where I converted from a classical C++ class, with data members, accessors, etc., into an XML structure.

''I'm very interested in this, please say more.''

----

What does it *mean* to refactor XML, in the abstract?  

XML is just data, conforming to a schema, which then gets processed by something that understands the schema in order to make something useful happen. If we're talking about refactoring a schema, then maybe we're really talking about something more like DatabaseNormalization?

''Refactoring is not the same as DatabaseNormalization, which is a process applied to a schema.  Refactoring is a process applied to an ''existing'' repository of data (be it of code, XML, Prolog facts, or Relational).  Because of this, refactoring always requires a transformation function: it is necessary to transform the existing repository of data into its new form.  DatabaseNormalization if applied to an existing database will require a refactoring step - the actual task of performing the transformation.''

''Based upon the original author's focus on RefactoringBrowser and tools, I'm certain that he or she did, indeed, intend transformation - in particular, automated transformation - in order to help unify XML data itself (including the associated schema, I'm sure).  ("The nice thing about standards is that there are so many of them to choose from." - Andrew S. Tanenbaum)''
----
CategoryXml

'''Flexible - Allowing for what one might need'''

The idea of dynamic, extensible data handling, using flexible data structures and data instructions as companions of more rigid, fixed structures and methods is appealing and perhaps also necessary in these times of rapid change. 

The assumption is that future scenarios might make it necessary for extension of capabilities without requiring modification in the current component. 

The extensible structure should utilize built-in methods to extend the usefulness of the current structure. 

The relationship is dynamically defined within the extending structure. including whatever interface, processes, input/output and displays, forms and reports the extension would require.

Related
* Pluggable Adapter Pattern
** http://www.google.com/search?q=pluggable+adapter+pattern&
*** http://msdn.microsoft.com/en-us/library/orm-9780596527730-01-04.aspx
*** http://www.primos.com.au/primos/Default.aspx?PageContentID=22&tabid=65
----
'''Extensible - Allowing for what may be impossible, given today's environment'''

''See: "The Ant and the Grasshopper" in LazyInitialization''

The idea here is that in a current scenario the "way we've always done it", or the "way we're doing it now", doesn't and can't work anymore. Things beyond the control of a process may have either changed, or other factors and elements may have appeared to make something that was easy using tools designed to handle it, so they don't work, or work in such an inappropriate manner as to make them unacceptable. 

With flexible and extensible architecture and processes, one is able to adapt to environment, and survive without requiring a complete reworking. One simply gets or makes the adaptor, and plugs it in!

----
Related:
* Y''''''ouDontHaveToBuildEverything you need before you need it - NotBuiltInOneDay
** http://c2.com/cgi/wiki?search=NeedIt
* SufficientlyFlexibleAppsResembleInterpreters
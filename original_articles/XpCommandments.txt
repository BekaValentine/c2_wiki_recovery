	* Thou shalt not code without a test.
	* Thou shalt not test without a pair.
	* Thou shalt covet thy neighbor's pair.
	* Thou shalt not check in cruft.
	* Honor thy SystemMetaphor.
	* Thou shalt not sandbox >45 minutes.
	* Thou shalt not code in a private office.
	* Thou shalt not gold-plate.
	* Thou shalt not work when you are tired.
	* Thou shalt not own thy code.
	* Thou shalt not clone thy code.
	* Thou shalt not pervert the style guide.
	* Thou shalt not fly documentation kites.

----

''This has been NAILED to a few places ... Just one remark :''

''For non-native speakers the latest, with "kites" is a bit hard to grasp.''

Well, "Thou shalt not document" isn't really accurate.

"Thou shalt not document speculatively, or about gold-plating." Now we are
stretching the grammar just to put the "Thou shalt not" at the beginning.

Those into epistemological numerology may note without this last line there
were 12 Commandments.

"Thou shalt reduce documentation burden" is closest to the (alleged) ExtremeProgrammingCorePractices
goal.

So if we take the English phrase "go fly a kite" to mean "please don't try
to be productive and go take a vacation; it's okay, we'll get along without
you", and "check kiting" as "passing speculative paper", we get (deep
breath):

	* Thou shalt not replace productivity with standing around holding a string attached to a kite of speculative documentation borne aloft by hot air.

But that throws the metre off from the others...

--M''''''artinLuther

----
The only XP commandment I know of is "Thou shalt not blindly follow commandments, especially those purported to be about XP." -- BillCaputo

Some newbie (I think it was RonJeffries) tried to say "I have great respect for GradyBooch and the others. However, it certainly appears to me that much of what is behind the RationalUnifiedProcess is, 'we must get these developers under control,' and much of what is behind ExtremeProgramming is, 'we must let these developers do what they know how to do.'"

This is all mystification. RUP provides no ground rules for the catherds. XP provides a set of very distinct, easily applied low-level rules that condition behavior. So the behavior within that conditioning is safe and productive.

----

''Thou shalt not clone thy code.''

This implies ''Thou shalt not fork thy code base''. see CodeFork.

----

So ... what if I clone my code, and then pervert the cloned code so badly I need to write documentation for it that then falls utterly and hopelessly out of date with the perverted cloned code?

Am I then guilty of the sin of making an obscene clone fall? '';-) ;-)''

--BradAppleton


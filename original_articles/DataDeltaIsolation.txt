Isolation of changes (deltas) to a view of data, usually intended to minimize bandwidth and/or processing costs. Examples in common practice include identifying RefreshRectangles, RSS feeds, 'RecentChanges', and so on. DataDeltaIsolation is both a powerful optimization technique and is also useful for end-users who wish to know "what's changed" in the world. 

DataDeltaIsolation is especially useful in combination with ReactiveProgramming and the PublishSubscribeModel. 

DataDeltaIsolation in an RDBMS would consist of providing a minimal set of updates, inserts, and deletes to get from a previous query result to a new query result. Combined with PublishSubscribeModel or ReactiveProgramming, one could see these updates, inserts, and deletes with a minimum of latency and re-calculation (i.e. no polling, no need to examine the entire view for changes). This is technically feasible, albeit at no small challenge. Its implementation would allow for real-time multi-user CRUD screens. 

Extension to HyperText would allow for seeing updates to forums and WikiWiki in RealTime, and would reduce edit-conflicts.

Very few programming languages are designed to support DataDeltaIsolation, especially not in combination with PublishSubscribeModel. In terms of support, the ReactiveProgramming paradigm is at or near the top of the pack. Given the power and utility of this combination, and the fact that implementing it efficiently without language support pretty much requires writing a whole framework, DataDeltaIsolation is a candidate KeyLanguageFeature.
------
See Also: DeltaIsolation, ChangeLog

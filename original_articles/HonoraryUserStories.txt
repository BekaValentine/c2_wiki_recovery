Some people like to reserve the term UserStory for positive-going requirements that are amenable to FunctionalTest''''''s. They suggest, in LimitsOfUserStories and elsewhere, that there are UserAntiStories that are somehow different from UserStories.

In addition to statements like "This program must be done in Java", or "The system must be secure", or "Don't crash", there are also statements like "The system reports all variances to the general ledger", which may be backed up by a large number of detailed stories at some future date.

It is desirable, wherever possible, to handle such requirements with the same ''mechanisms'' as UserStories. In XP, they are handled by writing them on cards and processing them in various ways during ReleasePlan, IterationPlan, FunctionalTest''''''ing, coding, and so on.

We call these HonoraryUserStories. They are conceptually polymorphic with UserStories, and are processed adaptively by the humans who process UserStories. The guideline is to keep them in the normal flow of planning and implementation as much as possible, and no more.

-- RonJeffries

-----

A lead-in to UseYourCommonSense.

----

These sorts of stories remind me of the weaving of aspects into code in AspectOrientedProgramming. Just my 2p worth. -- DavidMcNicol

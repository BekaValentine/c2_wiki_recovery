I am interested in patterns in requirements (in areas other than software). ChristopherAlexander's work in architecture and town planning inspired the GangOfFour's work in software - why assume it should stop there?

Software engineers include some fairly bright people - and in eliciting software requirements, you have to acquire a passing acquaintance with other domains of expertise. Each time you do that, you bring a fresh perspective to a new domain. Your naive questions can revolutionise the way your customers do their business ''because you lack their preconceptions about what's impossible''. What I'm proposing may be a bit far-fetched, but it ''might'' just work. And TRIZ (TheoryOfInventiveProblemSolving) is a bag of tools that are fun to learn and might just help you make that breakthrough.

I am also interested in OOP: first in C++, now in Java.

----

...And all I recall was the last boat leaving/
My brother on board, waving and calling to me...

----
CategoryHomePage
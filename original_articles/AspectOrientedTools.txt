Tools for AspectOrientedProgramming

[EditHint: does the WikiNamePluralProblem apply here?  Should it be singular?]

* AspectJay is a Java-based language which lets you write one or more aspects of your program as a separate unit which is ''woven'' with your ''base'' code by the compiler. You can download it and try it out! It's worth a look, if just to see how down-to-earth it is (no mention of MetaObjectProtocol''''''s).

* AspectWerkz.  http://aspectwerkz.codehaus.org/.  A lighter, more accessible alternative to AspectJ.  Thought by some to be better than AspectJ because it doesn't change Java syntax.  This means it doesn't require special support from the IDE and allows it to take advantage of code completion, etc.

* http://nanning.codehaus.org/. Another lightweight alternative to AspectJ.  

* Using CGLIB directly for creating runtime Proxy classes (before/after hooks) might be viable alternative for a full blown AOP engine: http://www.kgionline.com/articles/aop_1/aop1.jsp

* The MozartProgrammingSystem may be a valid DevelopmentTool to implement AspectOrientedProgramming.

* http://aspectj.org/servlets/AJSite

* One of the components of the Spring Framework (http://www.springframework.org/docs/wiki/Spring_AOP_Framework.html) is yet another lightweight alternative to AspectJ.

Contributors: MarkSkipper, KenLiu, DerekKaczmarczyk, KonstantinIgnatyev, AnonymousDonor

----

I really like the main sequence statistics I get from JDepend. What is AspectJ going to do to that metric? Also, I'm a little concerned as to how this might impact my use of a debugger. I really like the idea, but some of the details worry me at the moment. -- Keith Thomas
----
CategoryCodingIssues CategoryAspectOrientation
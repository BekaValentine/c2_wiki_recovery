I come from NewZealand and I'm now back there again, after living for the best part of five years in SydneyCity. I've been programming in the SelfLanguage (working on ProgramVisualization) and I've been interested in PatternLanguages for quite a while now. I'm quite catholic in my interests (most would say irredeemably unfocused) as I try to keep up with topics as varied as the philosophical bases of programming and software design, patterns, ownership types and aliasing, user interface design, middleweight and lightweight methodologies (including EssentialUseCases and ExtremeProgramming), and lots more really.

I'm the southern-hemisphere half of CharlesAndJames; we wrote a book together about SmallMemorySoftware - http://www.smallmemory.com.

I can be reached through email [mailto:kjx@mcs.vuw.ac.nz] and have a homepage [http://www.mcs.vuw.ac.nz/~kjx].

My name is JamesNoble, but my usercode is kjx. The SelfGroup mentioned me as James "kjx" Noble, which is fine by me. Having a (globally?) unique usercode like kjx makes it easy to find references to oneself using the web search tools. Try this AltaVista search ...

* http://www.altavista.com/web/results?q=kjx+-bridge

----
''" Having a (globally?) unique usercode like kjx..." Sure it's unique now, but for how long?''
----
AcceleratorButtons

	* ElvisSoftwareDesignResearchGroup -- where I work now
	* ElvisBrain -- our wiki
	* NotesOnPostmodernProgramming
	* SmallMemorySoftware
	* PatternsAsSigns

----
JamesNoble wrote one of my favorite patterns papers: ''Arguments and Results.'' [http://citeseer.nj.nec.com/cache/papers/cs/1429/http:zSzzSzwww.mri.mq.edu.auzSz~kjxzSzP53.v2.pdf/arguments-and-results.pdf]
It is on his website. It is a great read for anyone who is learning about refactoring. -- MichaelFeathers

''Arguments and Results'' describes a very powerful pattern, and is highly recommended -- Gerhard Kessell-Haak

Better URL: http://citeseer.ist.psu.edu/107777.html Abstract: "If an object oriented program is a collection of communicating objects, then the objects' protocols define the languages the program speaks. Unfortunately, protocols are difficult to design in isolation, so many programs' protocols are not as well designed as they could be. This paper presents six patterns which describe how objects protocols can be designed or redesigned. By using these patterns, programs and designs can be made more simple, more general, and more easy to change."

Also: ''Found Objects: A Pattern Language for Finding Objects from within Designs'' (1996) http://citeseer.ist.psu.edu/noble96found.html Abstract: "To design a program, first find your objects. Unfortunately, the right objects are not easy to find, and as a result most programs are not as well designed as they could be. The patterns in this language describe how objects can found within existing programs. By using these patterns, programs and designs can be made more simple, more general, and more easy to change."
----
CategoryHomePage
Programmers who believe that ObjectOrientedProgramming is the best of the various programming paradigms out there, and will tell anyone who is willing to listen (and quite a few who aren't).  Simply being an OO programmer, or even an OO-fan, isn't enough; the true ObjectWeenie wields ObjectOrientedProgramming like a hammer.  Consequently, every programming problem out there, is a nail...

Generally, most SmugSmalltalkWeenie''''''s are also ObjectWeenie''''''s, though the reverse is not true.  (Many SmugSmalltalkWeenie''''''s might beg to differ, it is a common article of faith among the Smalltalk community that out of all of the DefinitionsForOo, the one offered by AlanKay is the only correct one--and thus C++ and Java weenies are thereby excluded from the community of ObjectWeenie''''''s.)  See also RealObjectOrientedProgrammers

Another subset of the ObjectWeenie''''''s are the johnny-come-latelies to OO technology; who hype and blather about objects and object technologies, without the redeeming feature of knowing what they are talking about.  The C++ and Java communities (both of which have a large contingent of MoneyOrientedProgrammers) seem to suffer lots of these.

I feel I must remind the reader that not all members of these language communities are ObjectWeenie''''''s, or weenies of any sort.

Attributes of the ObjectWeenie:

* Think that everything ''must'' be an "object" (for some definition of "object").  Some ObjectWeenie''''''s object to languages where this is not the case.

* Think that the inverted flow control of Smalltalk--i.e.
 
 <expression> ifTrue: <doThis> ifFalse: <doThat>
which requires a polymorphic method call (message send ''ifTrue and ifFalse'') on the result of <expression>, a boolean object, rather than

 if (<expression>) { <doThis> } else { <doThat> }
is a tremendously ''good'' thing; and furthermore believe that ''all'' control structures should be FirstClass objects.

''There's a huge advantage to the Smalltalk way, when control structures are objects, the language is simplified by moving those into the library rather than the language.  This also allows you to add your own custom control structures when you need them with the same syntax as the standard ones.  This works because Smalltalk actually makes anonymous functions idiomatic to use with the [] operator.  This is why we love Smalltalk, it's far more expressive than C or its derivatives.  Lisp uses macros to do essentially the same thing, but in a different way.'' This is one of my favorite aspects about IoLanguage as well. -- AnonymousDonor

* Like ReinventingTheDatabaseInApplication.
** Think that a collection of ExtensibleMarkupLanguage (or EssExpressions, or any other way an object might be serialized) documents stored in a HierarchicalFileSystem is a fine replacement for an RDBMS.  

* Can't agree on a definition for ''anything''.
* Are fond of AbstractionInversion''''''s in which everything in the world (including rather low-level stuff) is modeled on top of objects (and the low-level bits and bytes which objects are modeled on top of are carefully hidden from view).
* Complete antipathy towards RelationalWeenie attitudes and approaches.
* A haunting feeling that DatabasesShouldBeJustStorage.
* See nothing wrong with spending 60% of programming/debugging/testing effort in data mapping and transformation between collections (table<->Base Object<->Derived Object<->Array<->XML<->Serialized Object<->etc)

----
CategoryWeenie CategoryRant.
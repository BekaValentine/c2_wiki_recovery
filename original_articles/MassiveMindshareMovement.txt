What makes a tool grow? Developer mindshare. If you want to predict the up and coming successes you have to look at where they're getting their minds from. Hence:

* SmallTalk and LispLanguage: No mindshare left bar diehards, many of whom are now spending at least some of their time on RubyLanguage. Frameworks continue their glacial development ...
* CeePlusPlus: Was sopping up minds in bulk from the old MicrosoftFramework. Still getting minds from embedded and game development but losing them at the same rate to CeeSharp and JavaLanguage.
* ObjectiveCee: Steady slow dribble of minds blowing in from the OSX user base and a few disgruntled javanoids.
* CeeSharp: Massive flow of minds from VisualBasic.
* VisualBasic: Massive flow of minds to CeeSharp. And a few going to PythonLanguage and RubyLanguage.
* JavaLanguage: Captured a large flow of minds prior to DotNet from enterprise framework development. Swapping minds back and forth with DotNet at present. Likewise CeePlusPlus. But losing many minds to RubyLanguage.
* PerlLanguage: Continuing flow of minds out of sysadmin and tool support functionaries. Plus a few adventurous PHPers. Losing minds to RubyLanguage in bulk. ''Could we have some evidence, please, for that assertion?''
* PythonLanguage: Still gets a lot of minds disaffected by CeePlusPlus and PerlLanguage. Losing minds to RubyLanguage with increasing speed.
* RubyLanguage: The target of MassiveMindshareMovement from SmallTalk, JavaLanguage, PerlLanguage, and PythonLanguage due to RubyOnRails. Mindshare here is increasing exponentially, though a slowdown is inevitable as the population generates a few too many libraries over  the next year to mess things up. AllPanaceasBecomePoison ...

----

If Ruby is accumulating all those minds, why does http://www.tiobe.com/tpci.htm rank it less popular than COBOL, Lisp, Ada, FoxPro and ABAP?

''Regarding the relevance of Tiobe's ranking, does tiobe account for different intensity?''

No, TIOBE measures mindshare.

''And how do you define mindshare? Do you have any evidence that Tiobe's definition of mindshare is the same as the above author's?''

I use the standard marketing definition (see http://en.wikipedia.org/wiki/Mindshare).  TIOBE measures popularity on the web, which can be used as a measure of mindshare.  What does any of this have to do with "intensity"?  And what does "intensity" have to do with my question?

''A programmer that knows Cobol and Ruby might program in Ruby 7 hours a day and in Cobol 1 hour a day; that's intensity. This doesn't even go into that if they hate programming in Cobol then they aren't very likely to do extra work of their own free will such as improving tools. Also, tool improvement is disproportionately more likely to be done by highly skilled programmers than highly unskilled programmers.''

OK, but what does any of that have to do with my question?  The original author claims Ruby is gaining mindshare from many other languages.  TIOBE's statistics show it mentioned on the web less often than 21 other languages.  The only languages mentioned above that are less popular than Ruby are SmallTalk and ObjectiveCee.  Surely with all of this massive mindshare movement it would have more web presence than, say, Lisp?

''You know, I think you're right. The reasons why web presence would be vastly greater than mindshare are stronger than for the reverse. Just about anything can be grossly overhyped while still consuming only a few minutes of each user's day. It's more difficult for something to not be talked about yet still be on people's minds. The latter will mostly be reserved for the 'life altering' category of experience which Lisp and Smalltalk are to many.''

''But intensity still matters for real mindshare even though it doesn't figure into the standard definition. Mindshare as defined on wikipedia is the share of a population's mind where each individual mind is considered atomic. For commodities this is a reasonable approximation, for programming languages it isn't.''

----

Instead of "mind share" or "intensity," how about measuring the percentage of business managers, of significant decision making authority, who are willing to "bet the business" on Ruby (vs Java vs C#, etc...)?

Aside from legacy systems, I think this cuts it down to pretty much Java and .Net (C# and VB.NET) dominating the industry.

----
JanuaryZeroSix

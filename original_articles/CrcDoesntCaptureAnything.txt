CRC probably really can capture something, if you do it in the official form where you write responsibilities and collaborators on the card. Even then, you kind of have to draw a UML diagram to really understand what you have: a stack of disconnected CRC cards is really hard to understand.

Used in XP, CRC is much more of a dynamic technique than a documentation technique. We generally scribble little or nothing on the cards, merely using them as props in telling the story of the objects and how they interact, as in CrcDescribesScenarios.

XP uses the cards as a discussion medium, to make what's being talked about concrete to the participants, without the time it would take to draw formal diagrams, and with a more dynamic effect than you can even get with hand-drawn UML on the whiteboard.

An XP CRC session will address only a handful of objects at a time, and the point is just to get the idea of the implementation into the heads of the team who will type it in. Then they go type it in.

All the real class names, and all the method names, will be made up by the team as they create the code. Since everyone names things just the same way, that works just fine. Since a typical development spurt is an hour or two, their memory is more than sufficient to get the design into code. After that, TheSourceCodeIsTheDesign.

ExtremeProgramming doesn't recommend keeping the cards. It's faster to make them again instead of finding them in the stack, and much more effective, because the motion, the writing, the talking, and the waving around helps build up the memory of what the design is. -- RonJeffries
----
CategoryCrcCards
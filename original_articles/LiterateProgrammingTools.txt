(see also LiterateProgramming where there is a list of some tools)

I want to start here (?) a study of Literate Programming, and especially its implications for collaborative, Web hosted, free software projects. I want to develop a Web-based tool for open/free software development, for other projects, and I maintain that some principles of lit-prog would be essential for this tool.

Some preliminary ideas to study and develop:

	* Focus on documentation: essential for supporting the entire software development life-cycle, as opposed to just the coding phase. I want to take this idea to the extreme. To make a pun of it: whereas Extreme Programming says "the code is the documentation", I claim it is the other way around: software is nothing but documentation! Thus, what better development tool is there... than a Wiki?!
	* Software architecture, lit-prog, and hypertext: I suggest that Wiki-like hypertexts can organize code better, and even help manipulate the software's architecture. Lit-prog's "inverting the sock" (code inside, documentation outside) might be just what was missing, to free us of the poor way programming languages deal with modularization.
	* Against SourceForge: this is where my proposal begins -- in suggesting that the SF model of software development is too poor. SF only provides a CVS repository, and mailing-lists (the rest is done better by Google). But CVS does little more than FTP, and mlists only get you noise (where Wiki produces signal!).

Resources for studying:

	* (I've various research papers about lit-prog, but I'll re-read and list only the intelligent ones here, with some commentary, soon...)

Help needed:

	* Hosting for this (and other) projects: more Wikis, for discussions, and application platforms (hosting PHP, Python, Java?) for the real thing. Any help in finding, or setting up, Web sites, would be great!
	* Resources to study...
	* Expert commentary on this study, as it develops...

-- Molly (molly_k22@yahoo.com)
----
CategoryLiterateProgramming